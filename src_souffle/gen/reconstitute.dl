
#include "instance.dl"
#include "python_ast.dl"
#include "../lib/sequence.dl"
.comp reconstitute {

    .decl in(xs : sequence)

    .init the_split = split 
    the_split.in(xs) :- in(xs).

    .init seq_split = split<instance>
    
    .decl rel_Module(xs : sequence, tree : Module)

    
    rel_Module([$Grammar("Module", "Module"), xs], $Module(body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0
    
    

    .decl rel_CompareRight(xs : sequence, tree : CompareRight)

    
    rel_CompareRight([$Grammar("CompareRight", "CompareRight"), xs], $CompareRight(op, rand)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_cmpop(prefix_0, op),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, rand),
        xs_2 = suffix_1
    
    

    .decl rel_ExceptHandler(xs : sequence, tree : ExceptHandler)

    
    rel_ExceptHandler([$Grammar("ExceptHandler", "ExceptHandler"), xs], $ExceptHandler(arg, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_except_arg(prefix_0, arg),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1
    
    

    .decl rel_Param(xs : sequence, tree : Param)

    
    rel_Param([$Grammar("Param", "Param"), xs], $Param(name, type, default)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_param_type(prefix_1, type),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_param_default(prefix_2, default),
        xs_3 = suffix_2
    
    

    .decl rel_ImportName(xs : sequence, tree : ImportName)

    
    rel_ImportName([$Grammar("ImportName", "ImportName"), xs], $ImportName(name, as_name)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_alias(prefix_1, as_name),
        xs_2 = suffix_1
    
    

    .decl rel_Withitem(xs : sequence, tree : Withitem)

    
    rel_Withitem([$Grammar("Withitem", "Withitem"), xs], $Withitem(contet, target)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contet),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_alias_expr(prefix_1, target),
        xs_2 = suffix_1
    
    

    .decl rel_ClassDef(xs : sequence, tree : ClassDef)

    
    rel_ClassDef([$Grammar("ClassDef", "ClassDef"), xs], $ClassDef(name, bs, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_bases(prefix_1, bs),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_statements(prefix_2, body),
        xs_3 = suffix_2
    
    

    .decl rel_ElifBlock(xs : sequence, tree : ElifBlock)

    
    rel_ElifBlock([$Grammar("ElifBlock", "ElifBlock"), xs], $ElifBlock(test, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1
    
    

    .decl rel_ElseBlock(xs : sequence, tree : ElseBlock)

    
    rel_ElseBlock([$Grammar("ElseBlock", "ElseBlock"), xs], $ElseBlock(body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0
    
    

    .decl rel_FinallyBlock(xs : sequence, tree : FinallyBlock)

    
    rel_FinallyBlock([$Grammar("FinallyBlock", "FinallyBlock"), xs], $FinallyBlock(body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0
    
    

    .decl rel_return_type(xs : sequence, tree : return_type)

    
    rel_return_type([$Grammar("return_type", "SomeReturnType"), xs], $SomeReturnType(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_return_type([$Grammar("return_type", "NoReturnType"), xs], $NoReturnType()) :-
        xs = nil
    
    

    .decl rel_module_id(xs : sequence, tree : module_id)

    
    rel_module_id([$Grammar("module_id", "SomeModuleId"), xs], $SomeModuleId(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_module_id([$Grammar("module_id", "NoModuleId"), xs], $NoModuleId()) :-
        xs = nil
    
    

    .decl rel_except_arg(xs : sequence, tree : except_arg)

    
    rel_except_arg([$Grammar("except_arg", "SomeExceptArg"), xs], $SomeExceptArg(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_except_arg([$Grammar("except_arg", "SomeExceptArgName"), xs], $SomeExceptArgName(contents, name)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_symbol(prefix_1, name),
        xs_2 = suffix_1
    

    rel_except_arg([$Grammar("except_arg", "NoExceptArg"), xs], $NoExceptArg()) :-
        xs = nil
    
    

    .decl rel_param_type(xs : sequence, tree : param_type)

    
    rel_param_type([$Grammar("param_type", "SomeParamType"), xs], $SomeParamType(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_param_type([$Grammar("param_type", "NoParamType"), xs], $NoParamType()) :-
        xs = nil
    
    

    .decl rel_param_default(xs : sequence, tree : param_default)

    
    rel_param_default([$Grammar("param_default", "SomeParamDefault"), xs], $SomeParamDefault(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_param_default([$Grammar("param_default", "NoParamDefault"), xs], $NoParamDefault()) :-
        xs = nil
    
    

    .decl rel_parameters_d(xs : sequence, tree : parameters_d)

    
    rel_parameters_d([$Grammar("parameters_d", "ConsKwParam"), xs], $ConsKwParam(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters_d(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_parameters_d([$Grammar("parameters_d", "SingleKwParam"), xs], $SingleKwParam(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters_d([$Grammar("parameters_d", "DictionarySplatParam"), xs], $DictionarySplatParam(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_parameters_c(xs : sequence, tree : parameters_c)

    
    rel_parameters_c([$Grammar("parameters_c", "SingleListSplatParam"), xs], $SingleListSplatParam(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters_c([$Grammar("parameters_c", "TransListSplatParam"), xs], $TransListSplatParam(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters_d(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_parameters_c([$Grammar("parameters_c", "ParamsD"), xs], $ParamsD(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_parameters_d(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_parameters_b(xs : sequence, tree : parameters_b)

    
    rel_parameters_b([$Grammar("parameters_b", "ConsParam"), xs], $ConsParam(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters_b(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_parameters_b([$Grammar("parameters_b", "SingleParam"), xs], $SingleParam(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters_b([$Grammar("parameters_b", "ParamsC"), xs], $ParamsC(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_parameters_c(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_parameters(xs : sequence, tree : parameters)

    
    rel_parameters([$Grammar("parameters", "ParamsA"), xs], $ParamsA(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_parameters_a(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters([$Grammar("parameters", "ParamsB"), xs], $ParamsB(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_parameters_b(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters([$Grammar("parameters", "NoParam"), xs], $NoParam()) :-
        xs = nil
    
    

    .decl rel_parameters_a(xs : sequence, tree : parameters_a)

    
    rel_parameters_a([$Grammar("parameters_a", "ConsPosParam"), xs], $ConsPosParam(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters_a(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_parameters_a([$Grammar("parameters_a", "SinglePosParam"), xs], $SinglePosParam(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_parameters_a([$Grammar("parameters_a", "TransPosParam"), xs], $TransPosParam(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Param(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters_b(prefix_1, tail),
        xs_2 = suffix_1
    
    

    .decl rel_keyword(xs : sequence, tree : keyword)

    
    rel_keyword([$Grammar("keyword", "NamedKeyword"), xs], $NamedKeyword(name, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, contents),
        xs_2 = suffix_1
    

    rel_keyword([$Grammar("keyword", "SplatKeyword"), xs], $SplatKeyword(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_alias(xs : sequence, tree : alias)

    
    rel_alias([$Grammar("alias", "SomeAlias"), xs], $SomeAlias(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_alias([$Grammar("alias", "NoAlias"), xs], $NoAlias()) :-
        xs = nil
    
    

    .decl rel_alias_expr(xs : sequence, tree : alias_expr)

    
    rel_alias_expr([$Grammar("alias_expr", "SomeAliasExpr"), xs], $SomeAliasExpr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_alias_expr([$Grammar("alias_expr", "NoAliasExpr"), xs], $NoAliasExpr()) :-
        xs = nil
    
    

    .decl rel_bases(xs : sequence, tree : bases)

    
    rel_bases([$Grammar("bases", "SomeBases"), xs], $SomeBases(bases)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_bases_a(prefix_0, bases),
        xs_1 = suffix_0
    

    rel_bases([$Grammar("bases", "NoBases"), xs], $NoBases()) :-
        xs = nil
    
    

    .decl rel_bases_a(xs : sequence, tree : bases_a)

    
    rel_bases_a([$Grammar("bases_a", "ConsBase"), xs], $ConsBase(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_bases_a(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_bases_a([$Grammar("bases_a", "SingleBase"), xs], $SingleBase(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_bases_a([$Grammar("bases_a", "KeywordsBase"), xs], $KeywordsBase(kws)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_keywords(prefix_0, kws),
        xs_1 = suffix_0
    
    

    .decl rel_keywords(xs : sequence, tree : keywords)

    
    rel_keywords([$Grammar("keywords", "ConsKeyword"), xs], $ConsKeyword(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_keyword(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_keywords(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_keywords([$Grammar("keywords", "SingleKeyword"), xs], $SingleKeyword(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_keyword(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_comparisons(xs : sequence, tree : comparisons)

    
    rel_comparisons([$Grammar("comparisons", "ConsCompareRight"), xs], $ConsCompareRight(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_CompareRight(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comparisons(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_comparisons([$Grammar("comparisons", "SingleCompareRight"), xs], $SingleCompareRight(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_CompareRight(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_option_expr(xs : sequence, tree : option_expr)

    
    rel_option_expr([$Grammar("option_expr", "SomeExpr"), xs], $SomeExpr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_option_expr([$Grammar("option_expr", "NoExpr"), xs], $NoExpr()) :-
        xs = nil
    
    

    .decl rel_comma_exprs(xs : sequence, tree : comma_exprs)

    
    rel_comma_exprs([$Grammar("comma_exprs", "ConsExpr"), xs], $ConsExpr(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comma_exprs(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_comma_exprs([$Grammar("comma_exprs", "SingleExpr"), xs], $SingleExpr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_target_exprs(xs : sequence, tree : target_exprs)

    
    rel_target_exprs([$Grammar("target_exprs", "ConsTargetExpr"), xs], $ConsTargetExpr(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_target_exprs(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_target_exprs([$Grammar("target_exprs", "SingleTargetExpr"), xs], $SingleTargetExpr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_decorators(xs : sequence, tree : decorators)

    
    rel_decorators([$Grammar("decorators", "ConsDec"), xs], $ConsDec(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_decorators(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_decorators([$Grammar("decorators", "NoDec"), xs], $NoDec()) :-
        xs = nil
    
    

    .decl rel_constraint_filters(xs : sequence, tree : constraint_filters)

    
    rel_constraint_filters([$Grammar("constraint_filters", "ConsFilter"), xs], $ConsFilter(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_constraint_filters(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_constraint_filters([$Grammar("constraint_filters", "SingleFilter"), xs], $SingleFilter(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_constraint_filters([$Grammar("constraint_filters", "NoFilter"), xs], $NoFilter()) :-
        xs = nil
    
    

    .decl rel_sequence_string(xs : sequence, tree : sequence_string)

    
    rel_sequence_string([$Grammar("sequence_string", "ConsStr"), xs], $ConsStr(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_string(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_sequence_string([$Grammar("sequence_string", "SingleStr"), xs], $SingleStr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_arguments(xs : sequence, tree : arguments)

    
    rel_arguments([$Grammar("arguments", "ConsArg"), xs], $ConsArg(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_arguments(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_arguments([$Grammar("arguments", "SingleArg"), xs], $SingleArg(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_arguments([$Grammar("arguments", "KeywordsArg"), xs], $KeywordsArg(kws)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_keywords(prefix_0, kws),
        xs_1 = suffix_0
    
    

    .decl rel_dictionary_item(xs : sequence, tree : dictionary_item)

    
    rel_dictionary_item([$Grammar("dictionary_item", "Field"), xs], $Field(key, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, key),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, contents),
        xs_2 = suffix_1
    

    rel_dictionary_item([$Grammar("dictionary_item", "DictionarySplatFields"), xs], $DictionarySplatFields(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_dictionary_contents(xs : sequence, tree : dictionary_contents)

    
    rel_dictionary_contents([$Grammar("dictionary_contents", "ConsDictionaryItem"), xs], $ConsDictionaryItem(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_dictionary_item(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_dictionary_contents(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_dictionary_contents([$Grammar("dictionary_contents", "SingleDictionaryItem"), xs], $SingleDictionaryItem(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_dictionary_item(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_sequence_var(xs : sequence, tree : sequence_var)

    
    rel_sequence_var([$Grammar("sequence_var", "ConsId"), xs], $ConsId(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_var(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_sequence_var([$Grammar("sequence_var", "SingleId"), xs], $SingleId(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_sequence_ImportName(xs : sequence, tree : sequence_ImportName)

    
    rel_sequence_ImportName([$Grammar("sequence_ImportName", "ConsImportName"), xs], $ConsImportName(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ImportName(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ImportName(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_sequence_ImportName([$Grammar("sequence_ImportName", "SingleImportName"), xs], $SingleImportName(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ImportName(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_sequence_Withitem(xs : sequence, tree : sequence_Withitem)

    
    rel_sequence_Withitem([$Grammar("sequence_Withitem", "ConsWithitem"), xs], $ConsWithitem(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Withitem(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_Withitem(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_sequence_Withitem([$Grammar("sequence_Withitem", "SingleWithitem"), xs], $SingleWithitem(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_Withitem(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_statements(xs : sequence, tree : statements)

    
    rel_statements([$Grammar("statements", "ConsStmt"), xs], $ConsStmt(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_stmt(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_statements([$Grammar("statements", "SingleStmt"), xs], $SingleStmt(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_stmt(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_comprehension_constraints(xs : sequence, tree : comprehension_constraints)

    
    rel_comprehension_constraints([$Grammar("comprehension_constraints", "ConsConstraint"), xs], $ConsConstraint(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_constraint(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comprehension_constraints(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_comprehension_constraints([$Grammar("comprehension_constraints", "SingleConstraint"), xs], $SingleConstraint(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_constraint(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_sequence_ExceptHandler(xs : sequence, tree : sequence_ExceptHandler)

    
    rel_sequence_ExceptHandler([$Grammar("sequence_ExceptHandler", "ConsExceptHandler"), xs], $ConsExceptHandler(head, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ExceptHandler(prefix_0, head),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ExceptHandler(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_sequence_ExceptHandler([$Grammar("sequence_ExceptHandler", "SingleExceptHandler"), xs], $SingleExceptHandler(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ExceptHandler(prefix_0, contents),
        xs_1 = suffix_0
    
    

    .decl rel_conditions(xs : sequence, tree : conditions)

    
    rel_conditions([$Grammar("conditions", "ElifCond"), xs], $ElifCond(contents, tail)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ElifBlock(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_conditions(prefix_1, tail),
        xs_2 = suffix_1
    

    rel_conditions([$Grammar("conditions", "ElseCond"), xs], $ElseCond(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_ElseBlock(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_conditions([$Grammar("conditions", "NoCond"), xs], $NoCond()) :-
        xs = nil
    
    

    .decl rel_function_def(xs : sequence, tree : function_def)

    
    rel_function_def([$Grammar("function_def", "FunctionDef"), xs], $FunctionDef(name, params, ret_typ, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters(prefix_1, params),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_return_type(prefix_2, ret_typ),
        xs_3 = suffix_2,
        the_split(prefix_3, suffix_3, xs_3),
        rel_statements(prefix_3, body),
        xs_4 = suffix_3
    

    rel_function_def([$Grammar("function_def", "AsyncFunctionDef"), xs], $AsyncFunctionDef(name, params, ret_typ, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, name),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_parameters(prefix_1, params),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_return_type(prefix_2, ret_typ),
        xs_3 = suffix_2,
        the_split(prefix_3, suffix_3, xs_3),
        rel_statements(prefix_3, body),
        xs_4 = suffix_3
    
    

    .decl rel_stmt(xs : sequence, tree : stmt)

    
    rel_stmt([$Grammar("stmt", "DecFunctionDef"), xs], $DecFunctionDef(decs, fun_def)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_decorators(prefix_0, decs),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_function_def(prefix_1, fun_def),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "DecAsyncFunctionDef"), xs], $DecAsyncFunctionDef(decs, fun_def)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_decorators(prefix_0, decs),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_function_def(prefix_1, fun_def),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "DecClassDef"), xs], $DecClassDef(decs, class_def)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_decorators(prefix_0, decs),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_ClassDef(prefix_1, class_def),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "ReturnSomething"), xs], $ReturnSomething(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Return"), xs], $Return()) :-
        xs = nil
    

    rel_stmt([$Grammar("stmt", "Delete"), xs], $Delete(targets)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_comma_exprs(prefix_0, targets),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Assign"), xs], $Assign(targets, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_target_exprs(prefix_0, targets),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, contents),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "AugAssign"), xs], $AugAssign(target, op, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_operator(prefix_1, op),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_expr(prefix_2, contents),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "TypedAssign"), xs], $TypedAssign(target, type, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, type),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_expr(prefix_2, contents),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "TypedDeclare"), xs], $TypedDeclare(target, type)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, type),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "For"), xs], $For(target, iter, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, iter),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_statements(prefix_2, body),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "ForElse"), xs], $ForElse(target, iter, body, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, iter),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_statements(prefix_2, body),
        xs_3 = suffix_2,
        the_split(prefix_3, suffix_3, xs_3),
        rel_ElseBlock(prefix_3, orelse),
        xs_4 = suffix_3
    

    rel_stmt([$Grammar("stmt", "AsyncFor"), xs], $AsyncFor(target, iter, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, iter),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_statements(prefix_2, body),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "AsyncForElse"), xs], $AsyncForElse(target, iter, body, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, iter),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_statements(prefix_2, body),
        xs_3 = suffix_2,
        the_split(prefix_3, suffix_3, xs_3),
        rel_ElseBlock(prefix_3, orelse),
        xs_4 = suffix_3
    

    rel_stmt([$Grammar("stmt", "While"), xs], $While(test, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "WhileElse"), xs], $WhileElse(test, body, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_ElseBlock(prefix_2, orelse),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "If"), xs], $If(test, body, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_conditions(prefix_2, orelse),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "With"), xs], $With(items, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_Withitem(prefix_0, items),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "AsyncWith"), xs], $AsyncWith(items, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_Withitem(prefix_0, items),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_statements(prefix_1, body),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "Raise"), xs], $Raise()) :-
        xs = nil
    

    rel_stmt([$Grammar("stmt", "RaiseExc"), xs], $RaiseExc(exc)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, exc),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "RaiseFrom"), xs], $RaiseFrom(exc, caus)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, exc),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, caus),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "Try"), xs], $Try(body, handlers)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ExceptHandler(prefix_1, handlers),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "TryElse"), xs], $TryElse(body, handlers, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ExceptHandler(prefix_1, handlers),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_ElseBlock(prefix_2, orelse),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "TryFin"), xs], $TryFin(body, handlers, fin)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ExceptHandler(prefix_1, handlers),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_FinallyBlock(prefix_2, fin),
        xs_3 = suffix_2
    

    rel_stmt([$Grammar("stmt", "TryElseFin"), xs], $TryElseFin(body, handlers, orelse, fin)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_statements(prefix_0, body),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ExceptHandler(prefix_1, handlers),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_ElseBlock(prefix_2, orelse),
        xs_3 = suffix_2,
        the_split(prefix_3, suffix_3, xs_3),
        rel_FinallyBlock(prefix_3, fin),
        xs_4 = suffix_3
    

    rel_stmt([$Grammar("stmt", "Assert"), xs], $Assert(test)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "AssertMsg"), xs], $AssertMsg(test, msg)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, test),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, msg),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "Import"), xs], $Import(names)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_ImportName(prefix_0, names),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "ImportFrom"), xs], $ImportFrom(module, names)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_module_id(prefix_0, module),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_sequence_ImportName(prefix_1, names),
        xs_2 = suffix_1
    

    rel_stmt([$Grammar("stmt", "ImportWildCard"), xs], $ImportWildCard(module)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_module_id(prefix_0, module),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Global"), xs], $Global(names)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_var(prefix_0, names),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Nonlocal"), xs], $Nonlocal(names)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_var(prefix_0, names),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Expr"), xs], $Expr(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_stmt([$Grammar("stmt", "Pass"), xs], $Pass()) :-
        xs = nil
    

    rel_stmt([$Grammar("stmt", "Break"), xs], $Break()) :-
        xs = nil
    

    rel_stmt([$Grammar("stmt", "Continue"), xs], $Continue()) :-
        xs = nil
    
    

    .decl rel_expr(xs : sequence, tree : expr)

    
    rel_expr([$Grammar("expr", "BoolOp"), xs], $BoolOp(left, op, right)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, left),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_boolop(prefix_1, op),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_expr(prefix_2, right),
        xs_3 = suffix_2
    

    rel_expr([$Grammar("expr", "NamedExpr"), xs], $NamedExpr(target, contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, contents),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "BinOp"), xs], $BinOp(left, op, right)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, left),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_operator(prefix_1, op),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_expr(prefix_2, right),
        xs_3 = suffix_2
    

    rel_expr([$Grammar("expr", "UnaryOp"), xs], $UnaryOp(op, right)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_unaryop(prefix_0, op),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, right),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Lambda"), xs], $Lambda(params, body)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_parameters(prefix_0, params),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, body),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "IfExp"), xs], $IfExp(body, test, orelse)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, body),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, test),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_expr(prefix_2, orelse),
        xs_3 = suffix_2
    

    rel_expr([$Grammar("expr", "Dictionary"), xs], $Dictionary(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_dictionary_contents(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "EmptyDictionary"), xs], $EmptyDictionary()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Set"), xs], $Set(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_comma_exprs(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "ListComp"), xs], $ListComp(contents, constraints)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comprehension_constraints(prefix_1, constraints),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "SetComp"), xs], $SetComp(contents, constraints)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comprehension_constraints(prefix_1, constraints),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "DictionaryComp"), xs], $DictionaryComp(key, contents, constraints)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, key),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, contents),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_comprehension_constraints(prefix_2, constraints),
        xs_3 = suffix_2
    

    rel_expr([$Grammar("expr", "GeneratorExp"), xs], $GeneratorExp(contents, constraints)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comprehension_constraints(prefix_1, constraints),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Await"), xs], $Await(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "YieldNothing"), xs], $YieldNothing()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Yield"), xs], $Yield(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "YieldFrom"), xs], $YieldFrom(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "Compare"), xs], $Compare(left, comps)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, left),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_comparisons(prefix_1, comps),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Call"), xs], $Call(func)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, func),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "CallArgs"), xs], $CallArgs(func, args)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, func),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_arguments(prefix_1, args),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Integer"), xs], $Integer(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "Float"), xs], $Float(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "ConcatString"), xs], $ConcatString(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_sequence_string(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "True_"), xs], $True_()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "False_"), xs], $False_()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "None_"), xs], $None_()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Ellip"), xs], $Ellip()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Attribute"), xs], $Attribute(contents, name)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_symbol(prefix_1, name),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Subscript"), xs], $Subscript(contents, slice)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, slice),
        xs_2 = suffix_1
    

    rel_expr([$Grammar("expr", "Starred"), xs], $Starred(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "Name"), xs], $Name(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_symbol(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "List"), xs], $List(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_comma_exprs(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "EmptyList"), xs], $EmptyList()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Tuple"), xs], $Tuple(contents)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_comma_exprs(prefix_0, contents),
        xs_1 = suffix_0
    

    rel_expr([$Grammar("expr", "EmptyTuple"), xs], $EmptyTuple()) :-
        xs = nil
    

    rel_expr([$Grammar("expr", "Slice"), xs], $Slice(lower, upper, step)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_option_expr(prefix_0, lower),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_option_expr(prefix_1, upper),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_option_expr(prefix_2, step),
        xs_3 = suffix_2
    
    

    .decl rel_boolop(xs : sequence, tree : boolop)

    
    rel_boolop([$Grammar("boolop", "And"), xs], $And()) :-
        xs = nil
    

    rel_boolop([$Grammar("boolop", "Or"), xs], $Or()) :-
        xs = nil
    
    

    .decl rel_operator(xs : sequence, tree : operator)

    
    rel_operator([$Grammar("operator", "Add"), xs], $Add()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "Sub"), xs], $Sub()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "Mult"), xs], $Mult()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "MatMult"), xs], $MatMult()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "Div"), xs], $Div()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "Mod"), xs], $Mod()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "Pow"), xs], $Pow()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "LShift"), xs], $LShift()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "RShift"), xs], $RShift()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "BitOr"), xs], $BitOr()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "BitXor"), xs], $BitXor()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "BitAnd"), xs], $BitAnd()) :-
        xs = nil
    

    rel_operator([$Grammar("operator", "FloorDiv"), xs], $FloorDiv()) :-
        xs = nil
    
    

    .decl rel_unaryop(xs : sequence, tree : unaryop)

    
    rel_unaryop([$Grammar("unaryop", "Invert"), xs], $Invert()) :-
        xs = nil
    

    rel_unaryop([$Grammar("unaryop", "Not"), xs], $Not()) :-
        xs = nil
    

    rel_unaryop([$Grammar("unaryop", "UAdd"), xs], $UAdd()) :-
        xs = nil
    

    rel_unaryop([$Grammar("unaryop", "USub"), xs], $USub()) :-
        xs = nil
    
    

    .decl rel_cmpop(xs : sequence, tree : cmpop)

    
    rel_cmpop([$Grammar("cmpop", "Eq"), xs], $Eq()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "NotEq"), xs], $NotEq()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "Lt"), xs], $Lt()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "LtE"), xs], $LtE()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "Gt"), xs], $Gt()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "GtE"), xs], $GtE()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "Is"), xs], $Is()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "IsNot"), xs], $IsNot()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "In"), xs], $In()) :-
        xs = nil
    

    rel_cmpop([$Grammar("cmpop", "NotIn"), xs], $NotIn()) :-
        xs = nil
    
    

    .decl rel_constraint(xs : sequence, tree : constraint)

    
    rel_constraint([$Grammar("constraint", "AsyncConstraint"), xs], $AsyncConstraint(target, search_space, filts)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, search_space),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_constraint_filters(prefix_2, filts),
        xs_3 = suffix_2
    

    rel_constraint([$Grammar("constraint", "Constraint"), xs], $Constraint(target, search_space, filts)) :-
        xs_0 = xs,
        the_split(prefix_0, suffix_0, xs_0),
        rel_expr(prefix_0, target),
        xs_1 = suffix_0,
        the_split(prefix_1, suffix_1, xs_1),
        rel_expr(prefix_1, search_space),
        xs_2 = suffix_1,
        the_split(prefix_2, suffix_2, xs_2),
        rel_constraint_filters(prefix_2, filts),
        xs_3 = suffix_2
    
     

    .decl rel_symbol(xs : seq.list, word : symbol)
    rel_symbol([$Vocab(_, word), nil], word).

}

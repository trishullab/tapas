"""
This type stub file was generated by pyright.
"""

import sys
import numpy as np
from collections.abc import Generator, Iterable
from typing import Any, ClassVar, NoReturn, TYPE_CHECKING, TypeVar

__all__ = ["_GenericAlias", "NDArray"]
_T = TypeVar("_T", bound="_GenericAlias")
class _GenericAlias:
    """A python-based backport of the `types.GenericAlias` class.

    E.g. for ``t = list[int]``, ``t.__origin__`` is ``list`` and
    ``t.__args__`` is ``(int,)``.

    See Also
    --------
    :pep:`585`
        The PEP responsible for introducing `types.GenericAlias`.

    """
    __slots__ = ...
    @property
    def __origin__(self) -> type:
        ...
    
    @property
    def __args__(self) -> tuple[object, ...]:
        ...
    
    @property
    def __parameters__(self) -> tuple[TypeVar, ...]:
        """Type variables in the ``GenericAlias``."""
        ...
    
    @property
    def __unpacked__(self) -> bool:
        ...
    
    @property
    def __typing_unpacked_tuple_args__(self) -> tuple[object, ...] | None:
        ...
    
    def __init__(self, origin: type, args: object | tuple[object, ...], starred: bool = ...) -> None:
        ...
    
    @property
    def __call__(self) -> type[Any]:
        ...
    
    def __reduce__(self: _T) -> tuple[type[_T], tuple[type[Any], tuple[object, ...], bool],]:
        ...
    
    def __mro_entries__(self, bases: Iterable[object]) -> tuple[type[Any]]:
        ...
    
    def __dir__(self) -> list[str]:
        """Implement ``dir(self)``."""
        ...
    
    def __hash__(self) -> int:
        """Return ``hash(self)``."""
        ...
    
    def __instancecheck__(self, obj: object) -> NoReturn:
        """Check if an `obj` is an instance."""
        ...
    
    def __subclasscheck__(self, cls: type) -> NoReturn:
        """Check if a `cls` is a subclass."""
        ...
    
    def __repr__(self) -> str:
        """Return ``repr(self)``."""
        ...
    
    def __getitem__(self: _T, key: object | tuple[object, ...]) -> _T:
        """Return ``self[key]``."""
        ...
    
    def __eq__(self, value: object) -> bool:
        """Return ``self == value``."""
        ...
    
    def __iter__(self: _T) -> Generator[_T, None, None]:
        """Return ``iter(self)``."""
        ...
    
    _ATTR_EXCEPTIONS: ClassVar[frozenset[str]] = ...
    def __getattribute__(self, name: str) -> Any:
        """Return ``getattr(self, name)``."""
        ...
    


if sys.version_info >= (3, 9):
    _GENERIC_ALIAS_TYPE = ...
else:
    ...
ScalarType = TypeVar("ScalarType", bound=np.generic, covariant=True)
if TYPE_CHECKING or sys.version_info >= (3, 9):
    _DType = np.dtype[ScalarType]
    NDArray = np.ndarray[Any, np.dtype[ScalarType]]
else:
    ...

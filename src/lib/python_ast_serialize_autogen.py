# THIS FILE IS AUTOGENERATED
# CHANGES MAY BE LOST


from __future__ import annotations
import lib.abstract_token
from lib.abstract_token_construct_autogen import abstract_token
from lib.python_ast_construct_autogen import *
from lib.line_format_construct_autogen import InLine, NewLine, IndentLine




def from_return_annotation(
    o : return_annotation
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[return_annotation, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, return_annotation):

            
            def handle_SomeReturnAnno(o : SomeReturnAnno): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'return_annotation',
                        selection = 'SomeReturnAnno'
                    )])
                )
    

            def handle_NoReturnAnno(o : NoReturnAnno): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'return_annotation',
                        selection = 'NoReturnAnno'
                    )])
                )
    


            match_return_annotation(stack_item, ReturnAnnotationHandlers(
                case_SomeReturnAnno = handle_SomeReturnAnno,
                case_NoReturnAnno = handle_NoReturnAnno
            ))

        else:
            result += stack_item 

    return result
    


def from_except_arg(
    o : except_arg
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[except_arg, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, except_arg):

            
            def handle_SomeExceptArg(o : SomeExceptArg): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'except_arg',
                        selection = 'SomeExceptArg'
                    )])
                )
    

            def handle_SomeExceptArgName(o : SomeExceptArgName): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        


                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'except_arg',
                        selection = 'SomeExceptArgName'
                    )])
                )
    

            def handle_NoExceptArg(o : NoExceptArg): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'except_arg',
                        selection = 'NoExceptArg'
                    )])
                )
    


            match_except_arg(stack_item, ExceptArgHandlers(
                case_SomeExceptArg = handle_SomeExceptArg,
                case_SomeExceptArgName = handle_SomeExceptArgName,
                case_NoExceptArg = handle_NoExceptArg
            ))

        else:
            result += stack_item 

    return result
    


def from_param_annotation(
    o : param_annotation
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[param_annotation, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, param_annotation):

            
            def handle_SomeParamAnno(o : SomeParamAnno): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'param_annotation',
                        selection = 'SomeParamAnno'
                    )])
                )
    

            def handle_NoParamAnno(o : NoParamAnno): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'param_annotation',
                        selection = 'NoParamAnno'
                    )])
                )
    


            match_param_annotation(stack_item, ParamAnnotationHandlers(
                case_SomeParamAnno = handle_SomeParamAnno,
                case_NoParamAnno = handle_NoParamAnno
            ))

        else:
            result += stack_item 

    return result
    


def from_param_default(
    o : param_default
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[param_default, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, param_default):

            
            def handle_SomeParamDefault(o : SomeParamDefault): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'param_default',
                        selection = 'SomeParamDefault'
                    )])
                )
    

            def handle_NoParamDefault(o : NoParamDefault): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'param_default',
                        selection = 'NoParamDefault'
                    )])
                )
    


            match_param_default(stack_item, ParamDefaultHandlers(
                case_SomeParamDefault = handle_SomeParamDefault,
                case_NoParamDefault = handle_NoParamDefault
            ))

        else:
            result += stack_item 

    return result
    


def from_parameters_d(
    o : parameters_d
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[parameters_d, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, parameters_d):

            
            def handle_ConsKwParam(o : ConsKwParam): 
                
                stack.append(o.tail)


                stack.append(from_Param(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_d',
                        selection = 'ConsKwParam'
                    )])
                )
    

            def handle_SingleKwParam(o : SingleKwParam): 
                
                stack.append(from_Param(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_d',
                        selection = 'SingleKwParam'
                    )])
                )
    

            def handle_DictionarySplatParam(o : DictionarySplatParam): 
                
                stack.append(from_Param(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_d',
                        selection = 'DictionarySplatParam'
                    )])
                )
    


            match_parameters_d(stack_item, ParametersDHandlers(
                case_ConsKwParam = handle_ConsKwParam,
                case_SingleKwParam = handle_SingleKwParam,
                case_DictionarySplatParam = handle_DictionarySplatParam
            ))

        else:
            result += stack_item 

    return result
    


def from_parameters_c(
    o : parameters_c
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[parameters_c, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, parameters_c):

            
            def handle_SingleListSplatParam(o : SingleListSplatParam): 
                
                stack.append(from_Param(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_c',
                        selection = 'SingleListSplatParam'
                    )])
                )
    

            def handle_TransListSplatParam(o : TransListSplatParam): 
                
                stack.append(from_parameters_d(o.tail))


                stack.append(from_Param(o.head))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_c',
                        selection = 'TransListSplatParam'
                    )])
                )
    

            def handle_ParamsD(o : ParamsD): 
                
                stack.append(from_parameters_d(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_c',
                        selection = 'ParamsD'
                    )])
                )
    


            match_parameters_c(stack_item, ParametersCHandlers(
                case_SingleListSplatParam = handle_SingleListSplatParam,
                case_TransListSplatParam = handle_TransListSplatParam,
                case_ParamsD = handle_ParamsD
            ))

        else:
            result += stack_item 

    return result
    


def from_parameters_b(
    o : parameters_b
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[parameters_b, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, parameters_b):

            
            def handle_ConsParam(o : ConsParam): 
                
                stack.append(o.tail)


                stack.append(from_Param(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_b',
                        selection = 'ConsParam'
                    )])
                )
    

            def handle_SingleParam(o : SingleParam): 
                
                stack.append(from_Param(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_b',
                        selection = 'SingleParam'
                    )])
                )
    

            def handle_ParamsC(o : ParamsC): 
                
                stack.append(from_parameters_c(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_b',
                        selection = 'ParamsC'
                    )])
                )
    


            match_parameters_b(stack_item, ParametersBHandlers(
                case_ConsParam = handle_ConsParam,
                case_SingleParam = handle_SingleParam,
                case_ParamsC = handle_ParamsC
            ))

        else:
            result += stack_item 

    return result
    


def from_parameters_a(
    o : parameters_a
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[parameters_a, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, parameters_a):

            
            def handle_ConsPosParam(o : ConsPosParam): 
                
                stack.append(o.tail)


                stack.append(from_Param(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_a',
                        selection = 'ConsPosParam'
                    )])
                )
    

            def handle_SinglePosParam(o : SinglePosParam): 
                

                stack.append(from_Param(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_a',
                        selection = 'SinglePosParam'
                    )])
                )
    

            def handle_TransPosParam(o : TransPosParam): 
                
                stack.append(from_parameters_b(o.tail))


                stack.append(from_Param(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters_a',
                        selection = 'TransPosParam'
                    )])
                )
    


            match_parameters_a(stack_item, ParametersAHandlers(
                case_ConsPosParam = handle_ConsPosParam,
                case_SinglePosParam = handle_SinglePosParam,
                case_TransPosParam = handle_TransPosParam
            ))

        else:
            result += stack_item 

    return result
    


def from_parameters(
    o : parameters
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[parameters, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, parameters):

            
            def handle_ParamsA(o : ParamsA): 
                
                stack.append(from_parameters_a(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters',
                        selection = 'ParamsA'
                    )])
                )
    

            def handle_ParamsB(o : ParamsB): 
                
                stack.append(from_parameters_b(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters',
                        selection = 'ParamsB'
                    )])
                )
    

            def handle_NoParam(o : NoParam): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'parameters',
                        selection = 'NoParam'
                    )])
                )
    


            match_parameters(stack_item, ParametersHandlers(
                case_ParamsA = handle_ParamsA,
                case_ParamsB = handle_ParamsB,
                case_NoParam = handle_NoParam
            ))

        else:
            result += stack_item 

    return result
    


def from_keyword(
    o : keyword
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[keyword, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, keyword):

            
            def handle_NamedKeyword(o : NamedKeyword): 
                
                stack.append(from_expr(o.content))


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'keyword',
                        selection = 'NamedKeyword'
                    )])
                )
    

            def handle_SplatKeyword(o : SplatKeyword): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'keyword',
                        selection = 'SplatKeyword'
                    )])
                )
    


            match_keyword(stack_item, KeywordHandlers(
                case_NamedKeyword = handle_NamedKeyword,
                case_SplatKeyword = handle_SplatKeyword
            ))

        else:
            result += stack_item 

    return result
    


def from_import_name(
    o : import_name
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[import_name, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, import_name):

            
            def handle_ImportNameAlias(o : ImportNameAlias): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.alias
                    )])
                )
        


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'import_name',
                        selection = 'ImportNameAlias'
                    )])
                )
    

            def handle_ImportNameOnly(o : ImportNameOnly): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'import_name',
                        selection = 'ImportNameOnly'
                    )])
                )
    


            match_import_name(stack_item, ImportNameHandlers(
                case_ImportNameAlias = handle_ImportNameAlias,
                case_ImportNameOnly = handle_ImportNameOnly
            ))

        else:
            result += stack_item 

    return result
    


def from_with_item(
    o : with_item
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[with_item, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, with_item):

            
            def handle_WithItemAlias(o : WithItemAlias): 
                
                stack.append(from_expr(o.alias))


                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'with_item',
                        selection = 'WithItemAlias'
                    )])
                )
    

            def handle_WithItemOnly(o : WithItemOnly): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'with_item',
                        selection = 'WithItemOnly'
                    )])
                )
    


            match_with_item(stack_item, WithItemHandlers(
                case_WithItemAlias = handle_WithItemAlias,
                case_WithItemOnly = handle_WithItemOnly
            ))

        else:
            result += stack_item 

    return result
    


def from_bases(
    o : bases
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[bases, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, bases):

            
            def handle_SomeBases(o : SomeBases): 
                

                stack.append(from_bases_a(o.bases))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'bases',
                        selection = 'SomeBases'
                    )])
                )
    

            def handle_NoBases(o : NoBases): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'bases',
                        selection = 'NoBases'
                    )])
                )
    


            match_bases(stack_item, BasesHandlers(
                case_SomeBases = handle_SomeBases,
                case_NoBases = handle_NoBases
            ))

        else:
            result += stack_item 

    return result
    


def from_bases_a(
    o : bases_a
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[bases_a, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, bases_a):

            
            def handle_ConsBase(o : ConsBase): 
                
                stack.append(o.tail)


                stack.append(from_expr(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'bases_a',
                        selection = 'ConsBase'
                    )])
                )
    

            def handle_SingleBase(o : SingleBase): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'bases_a',
                        selection = 'SingleBase'
                    )])
                )
    

            def handle_KeywordsBase(o : KeywordsBase): 
                
                stack.append(from_keywords(o.kws))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'bases_a',
                        selection = 'KeywordsBase'
                    )])
                )
    


            match_bases_a(stack_item, BasesAHandlers(
                case_ConsBase = handle_ConsBase,
                case_SingleBase = handle_SingleBase,
                case_KeywordsBase = handle_KeywordsBase
            ))

        else:
            result += stack_item 

    return result
    


def from_keywords(
    o : keywords
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[keywords, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, keywords):

            
            def handle_ConsKeyword(o : ConsKeyword): 
                
                stack.append(o.tail)


                stack.append(from_keyword(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'keywords',
                        selection = 'ConsKeyword'
                    )])
                )
    

            def handle_SingleKeyword(o : SingleKeyword): 
                
                stack.append(from_keyword(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'keywords',
                        selection = 'SingleKeyword'
                    )])
                )
    


            match_keywords(stack_item, KeywordsHandlers(
                case_ConsKeyword = handle_ConsKeyword,
                case_SingleKeyword = handle_SingleKeyword
            ))

        else:
            result += stack_item 

    return result
    


def from_comparisons(
    o : comparisons
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[comparisons, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, comparisons):

            
            def handle_ConsCompareRight(o : ConsCompareRight): 
                
                stack.append(o.tail)


                stack.append(from_CompareRight(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comparisons',
                        selection = 'ConsCompareRight'
                    )])
                )
    

            def handle_SingleCompareRight(o : SingleCompareRight): 
                
                stack.append(from_CompareRight(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comparisons',
                        selection = 'SingleCompareRight'
                    )])
                )
    


            match_comparisons(stack_item, ComparisonsHandlers(
                case_ConsCompareRight = handle_ConsCompareRight,
                case_SingleCompareRight = handle_SingleCompareRight
            ))

        else:
            result += stack_item 

    return result
    


def from_option_expr(
    o : option_expr
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[option_expr, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, option_expr):

            
            def handle_SomeExpr(o : SomeExpr): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'option_expr',
                        selection = 'SomeExpr'
                    )])
                )
    

            def handle_NoExpr(o : NoExpr): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'option_expr',
                        selection = 'NoExpr'
                    )])
                )
    


            match_option_expr(stack_item, OptionExprHandlers(
                case_SomeExpr = handle_SomeExpr,
                case_NoExpr = handle_NoExpr
            ))

        else:
            result += stack_item 

    return result
    


def from_comma_exprs(
    o : comma_exprs
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[comma_exprs, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, comma_exprs):

            
            def handle_ConsExpr(o : ConsExpr): 
                
                stack.append(o.tail)


                stack.append(from_expr(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comma_exprs',
                        selection = 'ConsExpr'
                    )])
                )
    

            def handle_SingleExpr(o : SingleExpr): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comma_exprs',
                        selection = 'SingleExpr'
                    )])
                )
    


            match_comma_exprs(stack_item, CommaExprsHandlers(
                case_ConsExpr = handle_ConsExpr,
                case_SingleExpr = handle_SingleExpr
            ))

        else:
            result += stack_item 

    return result
    


def from_target_exprs(
    o : target_exprs
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[target_exprs, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, target_exprs):

            
            def handle_ConsTargetExpr(o : ConsTargetExpr): 
                
                stack.append(o.tail)


                stack.append(from_expr(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'target_exprs',
                        selection = 'ConsTargetExpr'
                    )])
                )
    

            def handle_SingleTargetExpr(o : SingleTargetExpr): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'target_exprs',
                        selection = 'SingleTargetExpr'
                    )])
                )
    


            match_target_exprs(stack_item, TargetExprsHandlers(
                case_ConsTargetExpr = handle_ConsTargetExpr,
                case_SingleTargetExpr = handle_SingleTargetExpr
            ))

        else:
            result += stack_item 

    return result
    


def from_decorators(
    o : decorators
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[decorators, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, decorators):

            
            def handle_ConsDec(o : ConsDec): 
                
                stack.append(o.tail)

                stack.append(from_expr(o.head))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'decorators',
                        selection = 'ConsDec'
                    )])
                )
    

            def handle_NoDec(o : NoDec): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'decorators',
                        selection = 'NoDec'
                    )])
                )
    


            match_decorators(stack_item, DecoratorsHandlers(
                case_ConsDec = handle_ConsDec,
                case_NoDec = handle_NoDec
            ))

        else:
            result += stack_item 

    return result
    


def from_constraint_filters(
    o : constraint_filters
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[constraint_filters, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, constraint_filters):

            
            def handle_ConsFilter(o : ConsFilter): 
                
                stack.append(o.tail)

                stack.append(from_expr(o.head))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'constraint_filters',
                        selection = 'ConsFilter'
                    )])
                )
    

            def handle_SingleFilter(o : SingleFilter): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'constraint_filters',
                        selection = 'SingleFilter'
                    )])
                )
    

            def handle_NoFilter(o : NoFilter): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'constraint_filters',
                        selection = 'NoFilter'
                    )])
                )
    


            match_constraint_filters(stack_item, ConstraintFiltersHandlers(
                case_ConsFilter = handle_ConsFilter,
                case_SingleFilter = handle_SingleFilter,
                case_NoFilter = handle_NoFilter
            ))

        else:
            result += stack_item 

    return result
    


def from_sequence_string(
    o : sequence_string
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[sequence_string, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, sequence_string):

            
            def handle_ConsStr(o : ConsStr): 
                
                stack.append(o.tail)


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'string',
                        selection = o.head
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_string',
                        selection = 'ConsStr'
                    )])
                )
    

            def handle_SingleStr(o : SingleStr): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'string',
                        selection = o.content
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_string',
                        selection = 'SingleStr'
                    )])
                )
    


            match_sequence_string(stack_item, SequenceStringHandlers(
                case_ConsStr = handle_ConsStr,
                case_SingleStr = handle_SingleStr
            ))

        else:
            result += stack_item 

    return result
    


def from_arguments(
    o : arguments
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[arguments, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, arguments):

            
            def handle_ConsArg(o : ConsArg): 
                
                stack.append(o.tail)


                stack.append(from_expr(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'arguments',
                        selection = 'ConsArg'
                    )])
                )
    

            def handle_SingleArg(o : SingleArg): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'arguments',
                        selection = 'SingleArg'
                    )])
                )
    

            def handle_KeywordsArg(o : KeywordsArg): 
                
                stack.append(from_keywords(o.kws))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'arguments',
                        selection = 'KeywordsArg'
                    )])
                )
    


            match_arguments(stack_item, ArgumentsHandlers(
                case_ConsArg = handle_ConsArg,
                case_SingleArg = handle_SingleArg,
                case_KeywordsArg = handle_KeywordsArg
            ))

        else:
            result += stack_item 

    return result
    


def from_dictionary_item(
    o : dictionary_item
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[dictionary_item, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, dictionary_item):

            
            def handle_Field(o : Field): 
                
                stack.append(from_expr(o.content))


                stack.append(from_expr(o.key))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'dictionary_item',
                        selection = 'Field'
                    )])
                )
    

            def handle_DictionarySplatFields(o : DictionarySplatFields): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'dictionary_item',
                        selection = 'DictionarySplatFields'
                    )])
                )
    


            match_dictionary_item(stack_item, DictionaryItemHandlers(
                case_Field = handle_Field,
                case_DictionarySplatFields = handle_DictionarySplatFields
            ))

        else:
            result += stack_item 

    return result
    


def from_dictionary_content(
    o : dictionary_content
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[dictionary_content, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, dictionary_content):

            
            def handle_ConsDictionaryItem(o : ConsDictionaryItem): 
                
                stack.append(o.tail)


                stack.append(from_dictionary_item(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'dictionary_content',
                        selection = 'ConsDictionaryItem'
                    )])
                )
    

            def handle_SingleDictionaryItem(o : SingleDictionaryItem): 
                
                stack.append(from_dictionary_item(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'dictionary_content',
                        selection = 'SingleDictionaryItem'
                    )])
                )
    


            match_dictionary_content(stack_item, DictionaryContentHandlers(
                case_ConsDictionaryItem = handle_ConsDictionaryItem,
                case_SingleDictionaryItem = handle_SingleDictionaryItem
            ))

        else:
            result += stack_item 

    return result
    


def from_sequence_name(
    o : sequence_name
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[sequence_name, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, sequence_name):

            
            def handle_ConsId(o : ConsId): 
                
                stack.append(o.tail)


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.head
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_name',
                        selection = 'ConsId'
                    )])
                )
    

            def handle_SingleId(o : SingleId): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.content
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_name',
                        selection = 'SingleId'
                    )])
                )
    


            match_sequence_name(stack_item, SequenceNameHandlers(
                case_ConsId = handle_ConsId,
                case_SingleId = handle_SingleId
            ))

        else:
            result += stack_item 

    return result
    


def from_sequence_import_name(
    o : sequence_import_name
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[sequence_import_name, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, sequence_import_name):

            
            def handle_ConsImportName(o : ConsImportName): 
                
                stack.append(o.tail)


                stack.append(from_import_name(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_import_name',
                        selection = 'ConsImportName'
                    )])
                )
    

            def handle_SingleImportName(o : SingleImportName): 
                
                stack.append(from_import_name(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_import_name',
                        selection = 'SingleImportName'
                    )])
                )
    


            match_sequence_import_name(stack_item, SequenceImportNameHandlers(
                case_ConsImportName = handle_ConsImportName,
                case_SingleImportName = handle_SingleImportName
            ))

        else:
            result += stack_item 

    return result
    


def from_sequence_with_item(
    o : sequence_with_item
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[sequence_with_item, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, sequence_with_item):

            
            def handle_ConsWithItem(o : ConsWithItem): 
                
                stack.append(o.tail)


                stack.append(from_with_item(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_with_item',
                        selection = 'ConsWithItem'
                    )])
                )
    

            def handle_SingleWithItem(o : SingleWithItem): 
                
                stack.append(from_with_item(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_with_item',
                        selection = 'SingleWithItem'
                    )])
                )
    


            match_sequence_with_item(stack_item, SequenceWithItemHandlers(
                case_ConsWithItem = handle_ConsWithItem,
                case_SingleWithItem = handle_SingleWithItem
            ))

        else:
            result += stack_item 

    return result
    


def from_module(
    o : module
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[module, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, module):

            
            def handle_FutureMod(o : FutureMod): 
                
                stack.append(from_statements(o.body))

                stack.append(from_sequence_import_name(o.names))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'module',
                        selection = 'FutureMod'
                    )])
                )
    

            def handle_SimpleMod(o : SimpleMod): 
                
                stack.append(from_statements(o.body))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'module',
                        selection = 'SimpleMod'
                    )])
                )
    


            match_module(stack_item, ModuleHandlers(
                case_FutureMod = handle_FutureMod,
                case_SimpleMod = handle_SimpleMod
            ))

        else:
            result += stack_item 

    return result
    


def from_statements(
    o : statements
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[statements, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, statements):

            
            def handle_ConsStmt(o : ConsStmt): 
                
                stack.append(o.tail)

                stack.append(from_stmt(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'statements',
                        selection = 'ConsStmt'
                    )])
                )
    

            def handle_SingleStmt(o : SingleStmt): 
                
                stack.append(from_stmt(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'statements',
                        selection = 'SingleStmt'
                    )])
                )
    


            match_statements(stack_item, StatementsHandlers(
                case_ConsStmt = handle_ConsStmt,
                case_SingleStmt = handle_SingleStmt
            ))

        else:
            result += stack_item 

    return result
    


def from_comprehension_constraints(
    o : comprehension_constraints
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[comprehension_constraints, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, comprehension_constraints):

            
            def handle_ConsConstraint(o : ConsConstraint): 
                
                stack.append(o.tail)

                stack.append(from_constraint(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comprehension_constraints',
                        selection = 'ConsConstraint'
                    )])
                )
    

            def handle_SingleConstraint(o : SingleConstraint): 
                
                stack.append(from_constraint(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'comprehension_constraints',
                        selection = 'SingleConstraint'
                    )])
                )
    


            match_comprehension_constraints(stack_item, ComprehensionConstraintsHandlers(
                case_ConsConstraint = handle_ConsConstraint,
                case_SingleConstraint = handle_SingleConstraint
            ))

        else:
            result += stack_item 

    return result
    


def from_sequence_ExceptHandler(
    o : sequence_ExceptHandler
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[sequence_ExceptHandler, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, sequence_ExceptHandler):

            
            def handle_ConsExceptHandler(o : ConsExceptHandler): 
                
                stack.append(o.tail)

                stack.append(from_ExceptHandler(o.head))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_ExceptHandler',
                        selection = 'ConsExceptHandler'
                    )])
                )
    

            def handle_SingleExceptHandler(o : SingleExceptHandler): 
                
                stack.append(from_ExceptHandler(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'sequence_ExceptHandler',
                        selection = 'SingleExceptHandler'
                    )])
                )
    


            match_sequence_ExceptHandler(stack_item, SequenceExceptHandlerHandlers(
                case_ConsExceptHandler = handle_ConsExceptHandler,
                case_SingleExceptHandler = handle_SingleExceptHandler
            ))

        else:
            result += stack_item 

    return result
    


def from_conditions(
    o : conditions
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[conditions, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, conditions):

            
            def handle_ElifCond(o : ElifCond): 
                
                stack.append(o.tail)

                stack.append(from_ElifBlock(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'conditions',
                        selection = 'ElifCond'
                    )])
                )
    

            def handle_ElseCond(o : ElseCond): 
                
                stack.append(from_ElseBlock(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'conditions',
                        selection = 'ElseCond'
                    )])
                )
    

            def handle_NoCond(o : NoCond): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'conditions',
                        selection = 'NoCond'
                    )])
                )
    


            match_conditions(stack_item, ConditionsHandlers(
                case_ElifCond = handle_ElifCond,
                case_ElseCond = handle_ElseCond,
                case_NoCond = handle_NoCond
            ))

        else:
            result += stack_item 

    return result
    


def from_function_def(
    o : function_def
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[function_def, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, function_def):

            
            def handle_FunctionDef(o : FunctionDef): 
                
                stack.append(from_statements(o.body))


                stack.append(from_return_annotation(o.ret_anno))


                stack.append(from_parameters(o.params))


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'function_def',
                        selection = 'FunctionDef'
                    )])
                )
    

            def handle_AsyncFunctionDef(o : AsyncFunctionDef): 
                
                stack.append(from_statements(o.body))


                stack.append(from_return_annotation(o.ret_anno))


                stack.append(from_parameters(o.params))


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'function_def',
                        selection = 'AsyncFunctionDef'
                    )])
                )
    


            match_function_def(stack_item, FunctionDefHandlers(
                case_FunctionDef = handle_FunctionDef,
                case_AsyncFunctionDef = handle_AsyncFunctionDef
            ))

        else:
            result += stack_item 

    return result
    


def from_stmt(
    o : stmt
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[stmt, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, stmt):

            
            def handle_DecFunctionDef(o : DecFunctionDef): 
                
                stack.append(from_function_def(o.fun_def))

                stack.append(from_decorators(o.decs))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'DecFunctionDef'
                    )])
                )
    

            def handle_DecClassDef(o : DecClassDef): 
                
                stack.append(from_ClassDef(o.class_def))

                stack.append(from_decorators(o.decs))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'DecClassDef'
                    )])
                )
    

            def handle_ReturnSomething(o : ReturnSomething): 
                
                stack.append(from_expr(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'ReturnSomething'
                    )])
                )
    

            def handle_Return(o : Return): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Return'
                    )])
                )
    

            def handle_Delete(o : Delete): 
                
                stack.append(from_comma_exprs(o.targets))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Delete'
                    )])
                )
    

            def handle_Assign(o : Assign): 
                
                stack.append(from_expr(o.content))


                stack.append(from_target_exprs(o.targets))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Assign'
                    )])
                )
    

            def handle_AugAssign(o : AugAssign): 
                
                stack.append(from_expr(o.content))


                stack.append(from_operator(o.op))


                stack.append(from_expr(o.target))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AugAssign'
                    )])
                )
    

            def handle_AnnoAssign(o : AnnoAssign): 
                
                stack.append(from_expr(o.content))


                stack.append(from_expr(o.anno))


                stack.append(from_expr(o.target))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AnnoAssign'
                    )])
                )
    

            def handle_AnnoDeclar(o : AnnoDeclar): 
                
                stack.append(from_expr(o.anno))


                stack.append(from_expr(o.target))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AnnoDeclar'
                    )])
                )
    

            def handle_For(o : For): 
                
                stack.append(from_statements(o.body))


                stack.append(from_expr(o.iter))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'For'
                    )])
                )
    

            def handle_ForElse(o : ForElse): 
                
                stack.append(from_ElseBlock(o.orelse))

                stack.append(from_statements(o.body))


                stack.append(from_expr(o.iter))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'ForElse'
                    )])
                )
    

            def handle_AsyncFor(o : AsyncFor): 
                
                stack.append(from_statements(o.body))


                stack.append(from_expr(o.iter))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AsyncFor'
                    )])
                )
    

            def handle_AsyncForElse(o : AsyncForElse): 
                
                stack.append(from_ElseBlock(o.orelse))

                stack.append(from_statements(o.body))


                stack.append(from_expr(o.iter))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AsyncForElse'
                    )])
                )
    

            def handle_While(o : While): 
                
                stack.append(from_statements(o.body))


                stack.append(from_expr(o.test))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'While'
                    )])
                )
    

            def handle_WhileElse(o : WhileElse): 
                
                stack.append(from_ElseBlock(o.orelse))

                stack.append(from_statements(o.body))


                stack.append(from_expr(o.test))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'WhileElse'
                    )])
                )
    

            def handle_If(o : If): 
                
                stack.append(from_conditions(o.orelse))

                stack.append(from_statements(o.body))


                stack.append(from_expr(o.test))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'If'
                    )])
                )
    

            def handle_With(o : With): 
                
                stack.append(from_statements(o.body))


                stack.append(from_sequence_with_item(o.items))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'With'
                    )])
                )
    

            def handle_AsyncWith(o : AsyncWith): 
                
                stack.append(from_statements(o.body))


                stack.append(from_sequence_with_item(o.items))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AsyncWith'
                    )])
                )
    

            def handle_Raise(o : Raise): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Raise'
                    )])
                )
    

            def handle_RaiseExc(o : RaiseExc): 
                
                stack.append(from_expr(o.exc))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'RaiseExc'
                    )])
                )
    

            def handle_RaiseFrom(o : RaiseFrom): 
                
                stack.append(from_expr(o.caus))


                stack.append(from_expr(o.exc))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'RaiseFrom'
                    )])
                )
    

            def handle_Try(o : Try): 
                
                stack.append(from_sequence_ExceptHandler(o.handlers))

                stack.append(from_statements(o.body))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Try'
                    )])
                )
    

            def handle_TryElse(o : TryElse): 
                
                stack.append(from_ElseBlock(o.orelse))

                stack.append(from_sequence_ExceptHandler(o.handlers))

                stack.append(from_statements(o.body))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'TryElse'
                    )])
                )
    

            def handle_TryExceptFin(o : TryExceptFin): 
                
                stack.append(from_FinallyBlock(o.fin))

                stack.append(from_sequence_ExceptHandler(o.handlers))

                stack.append(from_statements(o.body))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'TryExceptFin'
                    )])
                )
    

            def handle_TryFin(o : TryFin): 
                
                stack.append(from_FinallyBlock(o.fin))

                stack.append(from_statements(o.body))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'TryFin'
                    )])
                )
    

            def handle_TryElseFin(o : TryElseFin): 
                
                stack.append(from_FinallyBlock(o.fin))

                stack.append(from_ElseBlock(o.orelse))

                stack.append(from_sequence_ExceptHandler(o.handlers))

                stack.append(from_statements(o.body))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'TryElseFin'
                    )])
                )
    

            def handle_Assert(o : Assert): 
                
                stack.append(from_expr(o.test))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Assert'
                    )])
                )
    

            def handle_AssertMsg(o : AssertMsg): 
                
                stack.append(from_expr(o.msg))


                stack.append(from_expr(o.test))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'AssertMsg'
                    )])
                )
    

            def handle_Import(o : Import): 
                
                stack.append(from_sequence_import_name(o.names))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Import'
                    )])
                )
    

            def handle_ImportFrom(o : ImportFrom): 
                
                stack.append(from_sequence_import_name(o.names))


                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.module
                    )])
                )
        

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'ImportFrom'
                    )])
                )
    

            def handle_ImportWildCard(o : ImportWildCard): 
                

                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.module
                    )])
                )
        

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'ImportWildCard'
                    )])
                )
    

            def handle_Global(o : Global): 
                
                stack.append(from_sequence_name(o.names))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Global'
                    )])
                )
    

            def handle_Nonlocal(o : Nonlocal): 
                
                stack.append(from_sequence_name(o.names))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Nonlocal'
                    )])
                )
    

            def handle_Expr(o : Expr): 
                
                stack.append(from_expr(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Expr'
                    )])
                )
    

            def handle_Pass(o : Pass): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Pass'
                    )])
                )
    

            def handle_Break(o : Break): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Break'
                    )])
                )
    

            def handle_Continue(o : Continue): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'stmt',
                        selection = 'Continue'
                    )])
                )
    


            match_stmt(stack_item, StmtHandlers(
                case_DecFunctionDef = handle_DecFunctionDef,
                case_DecClassDef = handle_DecClassDef,
                case_ReturnSomething = handle_ReturnSomething,
                case_Return = handle_Return,
                case_Delete = handle_Delete,
                case_Assign = handle_Assign,
                case_AugAssign = handle_AugAssign,
                case_AnnoAssign = handle_AnnoAssign,
                case_AnnoDeclar = handle_AnnoDeclar,
                case_For = handle_For,
                case_ForElse = handle_ForElse,
                case_AsyncFor = handle_AsyncFor,
                case_AsyncForElse = handle_AsyncForElse,
                case_While = handle_While,
                case_WhileElse = handle_WhileElse,
                case_If = handle_If,
                case_With = handle_With,
                case_AsyncWith = handle_AsyncWith,
                case_Raise = handle_Raise,
                case_RaiseExc = handle_RaiseExc,
                case_RaiseFrom = handle_RaiseFrom,
                case_Try = handle_Try,
                case_TryElse = handle_TryElse,
                case_TryExceptFin = handle_TryExceptFin,
                case_TryFin = handle_TryFin,
                case_TryElseFin = handle_TryElseFin,
                case_Assert = handle_Assert,
                case_AssertMsg = handle_AssertMsg,
                case_Import = handle_Import,
                case_ImportFrom = handle_ImportFrom,
                case_ImportWildCard = handle_ImportWildCard,
                case_Global = handle_Global,
                case_Nonlocal = handle_Nonlocal,
                case_Expr = handle_Expr,
                case_Pass = handle_Pass,
                case_Break = handle_Break,
                case_Continue = handle_Continue
            ))

        else:
            result += stack_item 

    return result
    


def from_expr(
    o : expr
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[expr, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, expr):

            
            def handle_BoolOp(o : BoolOp): 
                

                stack.append(o.right)


                stack.append(from_boolop(o.op))


                stack.append(o.left)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'BoolOp'
                    )])
                )
    

            def handle_AssignExpr(o : AssignExpr): 
                
                stack.append(o.content)


                stack.append(o.target)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'AssignExpr'
                    )])
                )
    

            def handle_BinOp(o : BinOp): 
                

                stack.append(o.right)


                stack.append(from_operator(o.op))


                stack.append(o.left)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'BinOp'
                    )])
                )
    

            def handle_UnaryOp(o : UnaryOp): 
                

                stack.append(o.right)


                stack.append(from_unaryop(o.op))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'UnaryOp'
                    )])
                )
    

            def handle_Lambda(o : Lambda): 
                
                stack.append(o.body)


                stack.append(from_parameters(o.params))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Lambda'
                    )])
                )
    

            def handle_IfExp(o : IfExp): 
                
                stack.append(o.orelse)


                stack.append(o.test)


                stack.append(o.body)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'IfExp'
                    )])
                )
    

            def handle_Dictionary(o : Dictionary): 
                

                stack.append(from_dictionary_content(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Dictionary'
                    )])
                )
    

            def handle_EmptyDictionary(o : EmptyDictionary): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'EmptyDictionary'
                    )])
                )
    

            def handle_Set(o : Set): 
                

                stack.append(from_comma_exprs(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Set'
                    )])
                )
    

            def handle_ListComp(o : ListComp): 
                

                stack.append(from_comprehension_constraints(o.constraints))

                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'ListComp'
                    )])
                )
    

            def handle_SetComp(o : SetComp): 
                

                stack.append(from_comprehension_constraints(o.constraints))

                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'SetComp'
                    )])
                )
    

            def handle_DictionaryComp(o : DictionaryComp): 
                

                stack.append(from_comprehension_constraints(o.constraints))

                stack.append(o.content)


                stack.append(o.key)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'DictionaryComp'
                    )])
                )
    

            def handle_GeneratorExp(o : GeneratorExp): 
                

                stack.append(from_comprehension_constraints(o.constraints))

                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'GeneratorExp'
                    )])
                )
    

            def handle_Await(o : Await): 
                
                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Await'
                    )])
                )
    

            def handle_YieldNothing(o : YieldNothing): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'YieldNothing'
                    )])
                )
    

            def handle_Yield(o : Yield): 
                
                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Yield'
                    )])
                )
    

            def handle_YieldFrom(o : YieldFrom): 
                
                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'YieldFrom'
                    )])
                )
    

            def handle_Compare(o : Compare): 
                
                stack.append(from_comparisons(o.comps))


                stack.append(o.left)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Compare'
                    )])
                )
    

            def handle_Call(o : Call): 
                

                stack.append(o.func)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Call'
                    )])
                )
    

            def handle_CallArgs(o : CallArgs): 
                

                stack.append(from_arguments(o.args))


                stack.append(o.func)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'CallArgs'
                    )])
                )
    

            def handle_Integer(o : Integer): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'integer',
                        selection = o.content
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Integer'
                    )])
                )
    

            def handle_Float(o : Float): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'float',
                        selection = o.content
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Float'
                    )])
                )
    

            def handle_ConcatString(o : ConcatString): 
                
                stack.append(from_sequence_string(o.content))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'ConcatString'
                    )])
                )
    

            def handle_True_(o : True_): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'True_'
                    )])
                )
    

            def handle_False_(o : False_): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'False_'
                    )])
                )
    

            def handle_None_(o : None_): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'None_'
                    )])
                )
    

            def handle_Ellip(o : Ellip): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Ellip'
                    )])
                )
    

            def handle_Attribute(o : Attribute): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.name
                    )])
                )
        


                stack.append(o.content)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Attribute'
                    )])
                )
    

            def handle_Subscript(o : Subscript): 
                

                stack.append(o.slice)


                stack.append(o.content)
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Subscript'
                    )])
                )
    

            def handle_Starred(o : Starred): 
                
                stack.append(o.content)

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Starred'
                    )])
                )
    

            def handle_Name(o : Name): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Vocab(
                        options = 'identifier',
                        selection = o.content
                    )])
                )
        
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Name'
                    )])
                )
    

            def handle_List(o : List): 
                

                stack.append(from_comma_exprs(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'List'
                    )])
                )
    

            def handle_EmptyList(o : EmptyList): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'EmptyList'
                    )])
                )
    

            def handle_Tuple(o : Tuple): 
                

                stack.append(from_comma_exprs(o.content))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Tuple'
                    )])
                )
    

            def handle_EmptyTuple(o : EmptyTuple): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'EmptyTuple'
                    )])
                )
    

            def handle_Slice(o : Slice): 
                
                stack.append(from_option_expr(o.step))


                stack.append(from_option_expr(o.upper))


                stack.append(from_option_expr(o.lower))
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'expr',
                        selection = 'Slice'
                    )])
                )
    


            match_expr(stack_item, ExprHandlers(
                case_BoolOp = handle_BoolOp,
                case_AssignExpr = handle_AssignExpr,
                case_BinOp = handle_BinOp,
                case_UnaryOp = handle_UnaryOp,
                case_Lambda = handle_Lambda,
                case_IfExp = handle_IfExp,
                case_Dictionary = handle_Dictionary,
                case_EmptyDictionary = handle_EmptyDictionary,
                case_Set = handle_Set,
                case_ListComp = handle_ListComp,
                case_SetComp = handle_SetComp,
                case_DictionaryComp = handle_DictionaryComp,
                case_GeneratorExp = handle_GeneratorExp,
                case_Await = handle_Await,
                case_YieldNothing = handle_YieldNothing,
                case_Yield = handle_Yield,
                case_YieldFrom = handle_YieldFrom,
                case_Compare = handle_Compare,
                case_Call = handle_Call,
                case_CallArgs = handle_CallArgs,
                case_Integer = handle_Integer,
                case_Float = handle_Float,
                case_ConcatString = handle_ConcatString,
                case_True_ = handle_True_,
                case_False_ = handle_False_,
                case_None_ = handle_None_,
                case_Ellip = handle_Ellip,
                case_Attribute = handle_Attribute,
                case_Subscript = handle_Subscript,
                case_Starred = handle_Starred,
                case_Name = handle_Name,
                case_List = handle_List,
                case_EmptyList = handle_EmptyList,
                case_Tuple = handle_Tuple,
                case_EmptyTuple = handle_EmptyTuple,
                case_Slice = handle_Slice
            ))

        else:
            result += stack_item 

    return result
    


def from_boolop(
    o : boolop
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[boolop, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, boolop):

            
            def handle_And(o : And): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'boolop',
                        selection = 'And'
                    )])
                )
    

            def handle_Or(o : Or): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'boolop',
                        selection = 'Or'
                    )])
                )
    


            match_boolop(stack_item, BoolopHandlers(
                case_And = handle_And,
                case_Or = handle_Or
            ))

        else:
            result += stack_item 

    return result
    


def from_operator(
    o : operator
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[operator, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, operator):

            
            def handle_Add(o : Add): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Add'
                    )])
                )
    

            def handle_Sub(o : Sub): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Sub'
                    )])
                )
    

            def handle_Mult(o : Mult): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Mult'
                    )])
                )
    

            def handle_MatMult(o : MatMult): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'MatMult'
                    )])
                )
    

            def handle_Div(o : Div): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Div'
                    )])
                )
    

            def handle_Mod(o : Mod): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Mod'
                    )])
                )
    

            def handle_Pow(o : Pow): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'Pow'
                    )])
                )
    

            def handle_LShift(o : LShift): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'LShift'
                    )])
                )
    

            def handle_RShift(o : RShift): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'RShift'
                    )])
                )
    

            def handle_BitOr(o : BitOr): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'BitOr'
                    )])
                )
    

            def handle_BitXor(o : BitXor): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'BitXor'
                    )])
                )
    

            def handle_BitAnd(o : BitAnd): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'BitAnd'
                    )])
                )
    

            def handle_FloorDiv(o : FloorDiv): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'operator',
                        selection = 'FloorDiv'
                    )])
                )
    


            match_operator(stack_item, OperatorHandlers(
                case_Add = handle_Add,
                case_Sub = handle_Sub,
                case_Mult = handle_Mult,
                case_MatMult = handle_MatMult,
                case_Div = handle_Div,
                case_Mod = handle_Mod,
                case_Pow = handle_Pow,
                case_LShift = handle_LShift,
                case_RShift = handle_RShift,
                case_BitOr = handle_BitOr,
                case_BitXor = handle_BitXor,
                case_BitAnd = handle_BitAnd,
                case_FloorDiv = handle_FloorDiv
            ))

        else:
            result += stack_item 

    return result
    


def from_unaryop(
    o : unaryop
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[unaryop, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, unaryop):

            
            def handle_Invert(o : Invert): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'unaryop',
                        selection = 'Invert'
                    )])
                )
    

            def handle_Not(o : Not): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'unaryop',
                        selection = 'Not'
                    )])
                )
    

            def handle_UAdd(o : UAdd): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'unaryop',
                        selection = 'UAdd'
                    )])
                )
    

            def handle_USub(o : USub): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'unaryop',
                        selection = 'USub'
                    )])
                )
    


            match_unaryop(stack_item, UnaryopHandlers(
                case_Invert = handle_Invert,
                case_Not = handle_Not,
                case_UAdd = handle_UAdd,
                case_USub = handle_USub
            ))

        else:
            result += stack_item 

    return result
    


def from_cmpop(
    o : cmpop
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[cmpop, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, cmpop):

            
            def handle_Eq(o : Eq): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'Eq'
                    )])
                )
    

            def handle_NotEq(o : NotEq): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'NotEq'
                    )])
                )
    

            def handle_Lt(o : Lt): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'Lt'
                    )])
                )
    

            def handle_LtE(o : LtE): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'LtE'
                    )])
                )
    

            def handle_Gt(o : Gt): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'Gt'
                    )])
                )
    

            def handle_GtE(o : GtE): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'GtE'
                    )])
                )
    

            def handle_Is(o : Is): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'Is'
                    )])
                )
    

            def handle_IsNot(o : IsNot): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'IsNot'
                    )])
                )
    

            def handle_In(o : In): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'In'
                    )])
                )
    

            def handle_NotIn(o : NotIn): 
                
                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'cmpop',
                        selection = 'NotIn'
                    )])
                )
    


            match_cmpop(stack_item, CmpopHandlers(
                case_Eq = handle_Eq,
                case_NotEq = handle_NotEq,
                case_Lt = handle_Lt,
                case_LtE = handle_LtE,
                case_Gt = handle_Gt,
                case_GtE = handle_GtE,
                case_Is = handle_Is,
                case_IsNot = handle_IsNot,
                case_In = handle_In,
                case_NotIn = handle_NotIn
            ))

        else:
            result += stack_item 

    return result
    


def from_constraint(
    o : constraint
) -> tuple[abstract_token, ...]:

    result = () 

    stack : list[Union[constraint, tuple[abstract_token, ...]]] = [o]
    while stack:
        stack_item = stack.pop()
        if isinstance(stack_item, constraint):

            
            def handle_AsyncConstraint(o : AsyncConstraint): 
                
                stack.append(from_constraint_filters(o.filts))

                stack.append(from_expr(o.search_space))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'constraint',
                        selection = 'AsyncConstraint'
                    )])
                )
    

            def handle_Constraint(o : Constraint): 
                
                stack.append(from_constraint_filters(o.filts))

                stack.append(from_expr(o.search_space))


                stack.append(from_expr(o.target))

                stack.append(
                    tuple([lib.abstract_token.make_Grammar(
                        options = 'constraint',
                        selection = 'Constraint'
                    )])
                )
    


            match_constraint(stack_item, ConstraintHandlers(
                case_AsyncConstraint = handle_AsyncConstraint,
                case_Constraint = handle_Constraint
            ))

        else:
            result += stack_item 

    return result
     



def from_CompareRight(
    o : CompareRight
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'CompareRight',
            selection = 'CompareRight'
        )]) +

        from_cmpop(o.op) +
        from_expr(o.rand)

    )
    


def from_ExceptHandler(
    o : ExceptHandler
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'ExceptHandler',
            selection = 'ExceptHandler'
        )]) +

        from_except_arg(o.arg) +
        from_statements(o.body)

    )
    


def from_Param(
    o : Param
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'Param',
            selection = 'Param'
        )]) +

        tuple([lib.abstract_token.make_Vocab(options = 'identifier', selection = o.name)]) +
        from_param_annotation(o.anno) +
        from_param_default(o.default)

    )
    


def from_ClassDef(
    o : ClassDef
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'ClassDef',
            selection = 'ClassDef'
        )]) +

        tuple([lib.abstract_token.make_Vocab(options = 'identifier', selection = o.name)]) +
        from_bases(o.bs) +
        from_statements(o.body)

    )
    


def from_ElifBlock(
    o : ElifBlock
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'ElifBlock',
            selection = 'ElifBlock'
        )]) +

        from_expr(o.test) +
        from_statements(o.body)

    )
    


def from_ElseBlock(
    o : ElseBlock
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'ElseBlock',
            selection = 'ElseBlock'
        )]) +

        from_statements(o.body)

    )
    


def from_FinallyBlock(
    o : FinallyBlock
) -> tuple[abstract_token, ...]:

    return (
        tuple([lib.abstract_token.make_Grammar(
            options = 'FinallyBlock',
            selection = 'FinallyBlock'
        )]) +

        from_statements(o.body)

    )
     

    
{
    "module_identifier": [
        "gc",
        "sortedcontainers",
        "queue",
        "deque",
        "sys",
        "List",
        "count",
        "fmod",
        "numpy...linalg",
        "tee",
        "regex",
        "bisect_right",
        "sqrt",
        "partial",
        "e",
        "floor",
        "combinations",
        "PriorityQueue",
        "sum",
        "Iterable",
        "cycle",
        "Fraction",
        "nsmallest",
        "prod",
        "itemgetter",
        "Queue",
        "re",
        "bisect_left",
        "stdout",
        "accumulate",
        "datetime",
        "permutations",
        "ceil",
        "hypot",
        "chain",
        "fractions",
        "networkx",
        "itertools",
        "copy",
        "reduce",
        "compress",
        "stdin",
        "heapq",
        "heapify",
        "matplotlib.pyplot",
        "deepcopy",
        "IntEnum",
        "numpy",
        "unittest",
        "reader",
        "SortedList",
        "inf",
        "zip_longest",
        "enum",
        "gcd",
        "mul",
        "log10",
        "string",
        "random",
        "log2",
        "bisect",
        "heappush",
        "perf_counter",
        "functools",
        "factorial",
        "math",
        "product",
        "lru_cache",
        "merge",
        "collections",
        "Counter",
        "groupby",
        "statistics",
        "det",
        "heappop",
        "time",
        "filterfalse",
        "defaultdict",
        "fabs",
        "log",
        "_collections",
        "typing",
        "ascii_lowercase",
        "cmp_to_key",
        "csv",
        "operator"
    ],
    "identifier": [
        "present",
        "min",
        "currLowestCity",
        "canmoveto",
        "fish_list",
        "ppowers",
        "totalNumOdds",
        "group",
        "is_floor",
        "ind_min",
        "start_person",
        "imag",
        "px_max",
        "neighborCount",
        "draw",
        "isupper",
        "dif",
        "my",
        "column",
        "minVal",
        "_vals",
        "divisor",
        "cg",
        "xs",
        "U",
        "new_list",
        "vowels_idx",
        "currLowestCount",
        "consecutive_zombies",
        "ax",
        "aux",
        "calculateDist",
        "_nonC",
        "player_row",
        "argsort",
        "yt",
        "all_lit",
        "start_posi",
        "box_move",
        "min_nums",
        "I_I",
        "curSum",
        "posible",
        "binStr",
        "vis",
        "E",
        "act",
        "Iterable",
        "init_graph",
        "variables",
        "n",
        "code",
        "check_pos_valid",
        "minlen",
        "hyp",
        "nums_for_line",
        "org",
        "numbers",
        "boizz",
        "last_a",
        "player_i",
        "last_digit",
        "splitting",
        "prod",
        "visualize",
        "lenn",
        "second_highest",
        "number2",
        "nb_r",
        "currNum",
        "arr_str",
        "vn",
        "curc",
        "rets",
        "new_word",
        "nl",
        "isinstance",
        "word2",
        "no_space",
        "stdout",
        "lmp",
        "nbi",
        "newarry",
        "pre_sum",
        "LN",
        "newNode",
        "popsn",
        "total_speed",
        "brackets",
        "seven_generator",
        "upper_index",
        "nsj",
        "depenses",
        "var",
        "curr_sum",
        "x_val",
        "ways",
        "prefixes",
        "low",
        "min_city",
        "People",
        "degree",
        "got_on_2nd",
        "subAns",
        "num_j",
        "is_not",
        "mind",
        "list1",
        "exponent",
        "done",
        "oo",
        "numOfNb",
        "nei",
        "new",
        "waiting",
        "Par",
        "oppositeNextBoxPos",
        "counter",
        "Matrix",
        "step",
        "nsb",
        "numof",
        "nextPos",
        "j1",
        "l_way",
        "aa",
        "out_bounds",
        "adjacency_matrix",
        "ser_req",
        "ups_tot_",
        "min_nbrs",
        "all_num_list",
        "AppenderAndSorter",
        "fre",
        "lru_cache",
        "digit",
        "fib",
        "linp",
        "last_i",
        "command",
        "strm",
        "countsum",
        "correct_city",
        "min_reachable",
        "heappop",
        "is_sorted",
        "all",
        "max_gap",
        "rs",
        "nextBoxPos_y",
        "string_no_space",
        "swap_",
        "pref",
        "res_node",
        "dy",
        "lout",
        "models1",
        "target_row",
        "stra",
        "min_value",
        "sP",
        "next_dp",
        "balancedContest",
        "diag_45",
        "cur_sum",
        "print_s",
        "dep",
        "dummy1",
        "Min",
        "opp_c",
        "Q",
        "match",
        "deque",
        "K",
        "asum",
        "M",
        "seperate",
        "midNode",
        "s_arr",
        "MI",
        "get_info",
        "sample_len",
        "visited_pusher",
        "mycount",
        "ds",
        "isInvalid",
        "sp_pq",
        "pre_masks",
        "clang",
        "__residue_table",
        "isValid",
        "dl",
        "no_space2",
        "CELSIUS",
        "to_scale",
        "dks",
        "pairs",
        "__sub__",
        "ascArr",
        "ti1",
        "efficiency",
        "sum_digits",
        "field",
        "cache",
        "models2",
        "__",
        "new_expo",
        "q0",
        "G2",
        "divisors1",
        "coef",
        "smol",
        "TempMul",
        "W",
        "firstnum",
        "dijkstra",
        "_sat_not",
        "cost",
        "cur_speed",
        "sumi",
        "minW",
        "new_coefficient",
        "lines",
        "square_sums_row",
        "swapped",
        "readin",
        "xb",
        "ONE_ZERO",
        "leq",
        "new_distance",
        "newArray",
        "MAX_INT",
        "loc",
        "x_list",
        "cases",
        "amount",
        "getSum",
        "pyramid",
        "primeSeive",
        "mx",
        "personCanMove",
        "is_integer",
        "seen",
        "col_move",
        "countSegments",
        "mir_y",
        "input_lookup",
        "cur_cities",
        "updated_distance",
        "getNumberOfNeighbors",
        "prev_last",
        "cango",
        "adj",
        "english",
        "closest",
        "tmp_str_ar",
        "braces",
        "noc",
        "canvas",
        "build",
        "testCase",
        "first_symbol",
        "getpar",
        "s_x",
        "from_iterable",
        "dv",
        "spower",
        "s2",
        "currW",
        "fails0",
        "min_connections",
        "currBoxPos",
        "heapify",
        "parity_S",
        "countVowels",
        "totalSum",
        "Gap",
        "cur_u",
        "BreakIt",
        "pr2",
        "argminn",
        "num_k",
        "nnn",
        "max_performance",
        "sort_csv_columns",
        "axis",
        "combs",
        "c",
        "cur_eff",
        "y_idx",
        "directions",
        "addsum",
        "s_r",
        "sums",
        "c_y",
        "isspace",
        "sorted_odd",
        "dig_pow",
        "Tree",
        "edge2",
        "m1",
        "Graph",
        "next_dist",
        "child",
        "log2",
        "nxt_s",
        "twopow",
        "current_weight",
        "data",
        "each",
        "lastdig",
        "sy",
        "a",
        "kMod",
        "hardproblems",
        "iter",
        "nsy",
        "product",
        "odd_val",
        "row_status",
        "temp1",
        "derive",
        "solved_by",
        "n2",
        "append",
        "y_value",
        "amicable_numbers",
        "zhi",
        "decimal",
        "trav_dist",
        "sinx",
        "box_posi",
        "ns",
        "marks",
        "perf",
        "now",
        "gcdl",
        "func0",
        "combin",
        "cl",
        "date1",
        "retval_list",
        "max_len",
        "s_2",
        "nums",
        "moveN",
        "eff",
        "original_col",
        "is_accessible",
        "nc",
        "good_prefixes",
        "i_value",
        "ix",
        "sumSpeed",
        "added",
        "next_i",
        "remove_node",
        "candidate_3",
        "walls",
        "has_path",
        "dr",
        "formula",
        "b_c",
        "getLeadingSubStringBitMapCounts",
        "inter",
        "otherSum",
        "b_r",
        "sn",
        "j_index",
        "model2",
        "print",
        "nf",
        "node_1",
        "naked",
        "c3",
        "sort_list_s",
        "final_odd",
        "a1",
        "prefix_odd",
        "greatest_distance",
        "relation",
        "pick",
        "maxProductPath",
        "assertEqual",
        "low_eff",
        "dij",
        "combinations",
        "dmatrix",
        "dj",
        "nd",
        "logic",
        "outlist",
        "fake",
        "usedSpeeds",
        "min75",
        "fir",
        "fact",
        "pat_i",
        "l_",
        "ih",
        "taken",
        "x2",
        "directed",
        "o2",
        "sub_matrix",
        "init_positions",
        "from_",
        "off_list_k",
        "DFS",
        "nb_tests",
        "VP",
        "reach_count",
        "getCoefs",
        "player_j",
        "nextPos_y",
        "cities",
        "AdjMat",
        "getsum",
        "nxt_step",
        "G3",
        "am",
        "plist",
        "mmin",
        "update_fees",
        "good1",
        "dia_status_2",
        "mir_x",
        "nstrs",
        "get_check",
        "numberList",
        "sim",
        "de",
        "lower",
        "len_city",
        "dw",
        "val1",
        "hash1",
        "cityGraph",
        "staticmethod",
        "max_bit",
        "spoc",
        "up_down",
        "player_col",
        "ssum",
        "fm",
        "new_sen",
        "r",
        "min50",
        "cur_bs",
        "dictionary",
        "modn",
        "virgin",
        "que",
        "nq",
        "ip",
        "capOthers",
        "path_beetwen",
        "numpy",
        "maxSoFar",
        "nextBoxPos",
        "rstrip",
        "max_product",
        "absNum",
        "binaryToDecimal",
        "cakewalk",
        "move",
        "z1",
        "helper",
        "words",
        "_get_next",
        "_sat_and",
        "rank",
        "evennos",
        "orderby",
        "curr_answer",
        "is_valid",
        "string",
        "l",
        "freq",
        "input",
        "computeDistances",
        "sum_value",
        "last_idx",
        "hh",
        "sell",
        "init_state",
        "R",
        "num_rows",
        "survivor",
        "hehe",
        "res",
        "new_box_col",
        "highest",
        "harvested_fruit",
        "tup2",
        "fast",
        "NAME",
        "lo",
        "bit",
        "alpha",
        "round",
        "minCnt",
        "__y",
        "fin",
        "dfs",
        "ps",
        "posi",
        "disable",
        "box_col",
        "sort_array",
        "heap",
        "req_score",
        "Exception",
        "memo",
        "main0",
        "delta",
        "ssp",
        "curPtr",
        "leng",
        "city_sum_under_thresh",
        "Dfs",
        "num_nbrs",
        "minValue",
        "min_moves",
        "altnums",
        "dict",
        "c4",
        "new_human",
        "mas",
        "Stack",
        "maxPerform",
        "erg",
        "secondnum",
        "s1",
        "sum_speed",
        "candi",
        "tj1",
        "next_ch",
        "nextch",
        "c1",
        "minReachableCount",
        "iterat",
        "closure_gen",
        "studentswhosolved",
        "number1",
        "outer",
        "cur_e",
        "cout",
        "ee",
        "curr_best_idx",
        "est",
        "pushes",
        "pusher",
        "lim2",
        "bMis",
        "curr_row",
        "nx",
        "mov",
        "best_city",
        "y1",
        "to_remove",
        "curfreq",
        "MAX",
        "sum",
        "power_mod",
        "prevfreq",
        "dp1",
        "c2res",
        "head_match",
        "ct",
        "name",
        "city_num",
        "Solution",
        "ini",
        "fails1",
        "performance",
        "lista",
        "max_1",
        "add_edge",
        "est_dessous",
        "tops",
        "check2",
        "tpos",
        "lists",
        "cur_no",
        "mid_num",
        "wri",
        "startPos",
        "countu",
        "npy",
        "w1",
        "src_row",
        "verbose",
        "c2_min",
        "splitlines",
        "cq",
        "j_",
        "curr",
        "L_I",
        "tempResult",
        "bitValue",
        "points",
        "px2",
        "real",
        "currentFruit",
        "num",
        "peek",
        "heapq",
        "findTheCity",
        "bit_idx",
        "start_j",
        "numberlist",
        "before",
        "literals",
        "currs",
        "second",
        "reverse",
        "b",
        "__import__",
        "moves",
        "curr_d",
        "starttime",
        "primes",
        "squares",
        "minimum_city_distance",
        "items",
        "left",
        "nsx",
        "INF",
        "stu",
        "lololololo",
        "table",
        "newDist",
        "speedtotal",
        "current_max",
        "maxd",
        "step_counter",
        "md",
        "p",
        "tc",
        "s11",
        "convertFromC",
        "n2n",
        "exponent_new",
        "bit_length",
        "di",
        "nondecdigits",
        "n_size",
        "fp",
        "budget",
        "bools",
        "node",
        "for_o",
        "simple_multiplication",
        "collections",
        "float",
        "xy_dif",
        "neighbour",
        "floyedWarshalAllPairDist",
        "det",
        "lowr",
        "_c",
        "u",
        "men_list",
        "first_part",
        "stopOver",
        "res5",
        "current_count",
        "p2",
        "fa",
        "cell_j",
        "max_idx",
        "dijkstrase",
        "seen_character",
        "fn",
        "val",
        "abc",
        "all_marks",
        "events_count",
        "update",
        "coffset",
        "jumpB",
        "ilen",
        "maxv",
        "sum_num",
        "do_lcm",
        "bM",
        "next_step",
        "behind_box_y",
        "dfs3",
        "bj",
        "ar",
        "cr",
        "iscakewalk",
        "player_moves",
        "is_empty",
        "lg",
        "odds",
        "check1",
        "traversal",
        "n_state",
        "init_dist",
        "nextCity",
        "distance",
        "oddNumLoc",
        "max2",
        "delimiter",
        "tl",
        "list_length",
        "rmv",
        "dist_matrix",
        "newr",
        "do",
        "PriorityQueue",
        "cur_neighbor",
        "first_match",
        "perm",
        "hard",
        "nums2",
        "it",
        "last_u",
        "floydWarshall",
        "firstLetter",
        "maketrans",
        "counts_map",
        "bl",
        "islower",
        "linalg",
        "pt1",
        "capLetter",
        "closers",
        "intersect_dict",
        "num_obj",
        "my_list",
        "stri",
        "L1",
        "neighborCity",
        "elem",
        "comb",
        "te",
        "currD",
        "steps",
        "res_arr",
        "on_list_k",
        "pa",
        "restWord",
        "startx",
        "ser",
        "max_r",
        "vertexDist",
        "dam",
        "next_y",
        "city_numbers",
        "blocked",
        "plt",
        "behind_box_x",
        "len",
        "first",
        "animals",
        "issum",
        "nsr",
        "big",
        "nj",
        "ranges",
        "temps",
        "endPos",
        "j2",
        "trans",
        "eve",
        "resultado",
        "l2",
        "meneven",
        "second_num",
        "stairs",
        "city",
        "pancakeSort",
        "sep",
        "cifra",
        "finl_mrks",
        "index_list",
        "s",
        "new_pos",
        "diff",
        "player",
        "temp_q",
        "ty",
        "func_dict",
        "is_and",
        "strList",
        "unittest",
        "boundary",
        "fruit",
        "ok",
        "el",
        "hueristicEstimation",
        "tmp_s",
        "new_dist",
        "filter",
        "min_cities",
        "curr_steps",
        "word_2",
        "fr",
        "nextI",
        "_min",
        "square",
        "finished",
        "comp",
        "last_e",
        "intermediate_dist",
        "result",
        "desc",
        "neg_eff",
        "passengers_station_x",
        "ub",
        "neighbor",
        "Interpreter",
        "sorted_arr",
        "_row",
        "cur_w",
        "secondary",
        "table_str",
        "top",
        "next_j",
        "to_bit",
        "pt2",
        "highest_len",
        "noomber",
        "n_min",
        "currIndex",
        "bi",
        "td",
        "source",
        "posAvailable",
        "extract",
        "rowsWithQueen",
        "finalodd",
        "decode",
        "maxbits",
        "nrow",
        "b0",
        "F",
        "half_life",
        "num_lst",
        "fidx",
        "iterations",
        "dpu",
        "largeNumber",
        "digit_lengths",
        "prepar",
        "square_candidates",
        "result_from_subtract",
        "values",
        "fee2",
        "tr",
        "_adj",
        "num_c",
        "filterfalse",
        "mp",
        "apt",
        "sorted_even",
        "min_so_far",
        "log",
        "totalSpeed",
        "path",
        "LookupError",
        "arg",
        "oddNums",
        "nex",
        "start",
        "next",
        "r_arr",
        "otherx",
        "ascii_lowercase",
        "add",
        "check_DNA",
        "answer",
        "passAll",
        "opening",
        "super_sum",
        "coefficient",
        "where",
        "isMatch",
        "rem",
        "engineer",
        "idx",
        "Memory",
        "l1d",
        "AMi",
        "new_number",
        "binomialCoefficient",
        "ys",
        "count_ways",
        "longestToInt",
        "nowc",
        "iterator",
        "rx",
        "row_move",
        "candidate_4",
        "maxValue",
        "value",
        "cur_house",
        "cw",
        "curr_min",
        "row_num",
        "end_table",
        "pe",
        "greater",
        "dia_status_1",
        "max_lenght",
        "numSteps",
        "opr",
        "my_sum",
        "mate",
        "ids",
        "weishu",
        "ey",
        "clf",
        "__name__",
        "readline",
        "records",
        "position",
        "num_cols",
        "roffset",
        "cur_o",
        "fh",
        "isprime",
        "cur_a",
        "dig",
        "vals",
        "max_pro",
        "displays",
        "lenList",
        "can_player_access_cell",
        "non_zero_index",
        "pts",
        "minLen",
        "G",
        "oddL",
        "fi",
        "prev_first",
        "moveW",
        "s_pos",
        "minLength",
        "maxPerformance",
        "exponent1",
        "qs_add",
        "V",
        "n0",
        "delta_j",
        "heappushpop",
        "visitedCity",
        "alpha_seq",
        "h",
        "display",
        "ret",
        "nxt_b",
        "pyramidArray",
        "mularray",
        "prePtr",
        "nextBox",
        "nextNum",
        "int_to_negabinary",
        "cityDist",
        "n_reachable",
        "run",
        "gta",
        "uppr",
        "infect",
        "sspeed",
        "CA",
        "eff_pq",
        "game",
        "currPlayerPos",
        "next_x",
        "test",
        "paritys",
        "node_wt",
        "maximumGap",
        "row",
        "process_task",
        "solveNQueens",
        "endswith",
        "Temp",
        "gen_prime",
        "c1_max",
        "rows",
        "__starting_point",
        "sumOfSpeed",
        "Oddnos",
        "not_possible",
        "construct_graph",
        "nsi",
        "total",
        "diag_135",
        "bats",
        "AT",
        "trouble",
        "lit",
        "prev",
        "b_max",
        "new_exponent",
        "who_is_bitten",
        "serg_mrks",
        "to_add",
        "AM",
        "tii",
        "mn",
        "pre",
        "summ",
        "pl",
        "c_num",
        "break_rules",
        "make_pattern",
        "year",
        "nr",
        "xt",
        "listWord",
        "badIdx",
        "flag",
        "other2c",
        "reconstruct",
        "ni",
        "minval",
        "clear",
        "follows",
        "t_pos",
        "high",
        "pre_s",
        "b2",
        "ns_c",
        "new_coeff",
        "dist",
        "max_degree",
        "longest_len",
        "total_literals",
        "ti",
        "min_queue",
        "py_min",
        "ncity",
        "pi",
        "by2",
        "Edge",
        "ii",
        "i_idx",
        "__and__",
        "pp",
        "xc",
        "height",
        "x",
        "wt",
        "newpos",
        "layout",
        "to_try",
        "map",
        "py",
        "maxLen",
        "smallest_neigh_node",
        "num_of_even",
        "packString",
        "w2",
        "digit_rotated",
        "abs_value",
        "i_index",
        "src_col",
        "limit",
        "binary1",
        "letter",
        "join",
        "q",
        "direction",
        "tj",
        "B",
        "dis",
        "npx",
        "minc",
        "cur_visited",
        "tot",
        "denominator",
        "buy_or_sell",
        "move_res",
        "HEAP",
        "others",
        "distinct",
        "s_1",
        "pattern",
        "ca",
        "cur_num",
        "value_to_sort",
        "nextBoxPos_x",
        "index_to_insert",
        "expression",
        "needs_rep",
        "edges_dict",
        "int",
        "vert",
        "str",
        "ansheap",
        "EOFError",
        "products",
        "bisect_right",
        "setter",
        "follow",
        "buckets",
        "max_2",
        "max_v",
        "totalNumEvens",
        "add_edges",
        "curre",
        "tarjan",
        "traverse",
        "sieve",
        "ord_a",
        "valid",
        "tmp",
        "bMjCounts",
        "cycle",
        "min_node",
        "ow",
        "targc",
        "property",
        "max_length",
        "rjust",
        "exp_der",
        "prods",
        "filled",
        "boys_men",
        "yi",
        "source_city",
        "arr3",
        "memory",
        "lenLastIdx",
        "Queue",
        "IndexError",
        "table1",
        "vowels",
        "graph",
        "tmp_sum",
        "model1",
        "inFile",
        "max_diff",
        "trade",
        "PMS",
        "box_next_y",
        "d2",
        "minHeap",
        "ups_left",
        "loji_hogya",
        "BIT",
        "frontier",
        "listln",
        "matrix",
        "playerPos",
        "matches",
        "y_val",
        "start_state",
        "new_string",
        "q2",
        "indb",
        "weight",
        "cp",
        "curr_speed_sum",
        "tempSum",
        "top_kth_speed",
        "qq",
        "ch",
        "two_by_two",
        "Memoize",
        "copy",
        "y",
        "can_val",
        "par",
        "WALL",
        "beg_col",
        "max_number",
        "tempLast",
        "nby",
        "for_i",
        "spd",
        "itr",
        "seq2",
        "AttributeError",
        "d10",
        "m_len",
        "es_list",
        "chars",
        "IntEnum",
        "res1",
        "connect",
        "si_new",
        "divisor_sum",
        "iteration",
        "_s",
        "Sieve",
        "matching",
        "toiso",
        "global_min",
        "token",
        "min_neighbors",
        "price",
        "res_city",
        "concat",
        "cnt",
        "zip_longest",
        "gcd",
        "inc_cost",
        "where_to_stop",
        "how_many_years",
        "bfs",
        "heuristic",
        "combo",
        "speed_sum",
        "city_dist_threshold",
        "mini",
        "startswith",
        "o1",
        "boxj",
        "gen",
        "minCount",
        "gap",
        "num_local",
        "first_non_zero_digit_after_indices",
        "cnt1",
        "visit",
        "thresh",
        "replace",
        "mapping",
        "found",
        "num_nodes",
        "jumps",
        "chr",
        "boysodd",
        "mat",
        "ende",
        "degrees",
        "smallest_neigh_count",
        "num2",
        "toK",
        "pushPosArr",
        "profit",
        "joinning",
        "list_s",
        "args",
        "convert",
        "xx",
        "neigh_vert",
        "getF",
        "coEx",
        "C",
        "sizeM",
        "dire",
        "allEdge",
        "neighbor_weight",
        "minNode",
        "vertices",
        "seq1",
        "bsc",
        "_sum",
        "index2",
        "digs",
        "placeValue",
        "max75",
        "size",
        "moveS",
        "u1",
        "find_target",
        "dec",
        "os",
        "dx",
        "zombies_gcd",
        "vows",
        "zombie",
        "ff",
        "summe",
        "cmap",
        "numstr",
        "min_len",
        "prix",
        "odd_multiply",
        "beforemin",
        "slice",
        "isalpha",
        "padding",
        "narr",
        "req",
        "e0",
        "candidates",
        "berserk_rater",
        "curr_city",
        "CLANG",
        "s_list",
        "multi",
        "mark",
        "currLen",
        "discard",
        "tour",
        "remain",
        "od",
        "_hamilton",
        "kSmallestPairs",
        "N0",
        "c1_min",
        "get_reachable_count",
        "location",
        "binA",
        "dp",
        "infected",
        "qPow",
        "rt",
        "remainder",
        "res2",
        "travelled",
        "hp",
        "str1",
        "visited_set",
        "dp_new",
        "parity",
        "listofstrings",
        "even_men",
        "speedSum",
        "ups_left_",
        "compute_distances",
        "factors",
        "last_max",
        "nbj",
        "maxPerformance1",
        "ln",
        "curr_n",
        "dijk",
        "codes",
        "setrecursionlimit",
        "reachable_from_this_house",
        "_7",
        "Ans",
        "new_b",
        "currmin",
        "next_player",
        "zip",
        "exponent2",
        "ry",
        "distDict",
        "true_indexes",
        "cur_p",
        "expr",
        "odd_boys",
        "i_val",
        "o",
        "library",
        "start_table",
        "qu",
        "path_to_root",
        "max_nums",
        "datetime",
        "minheap",
        "result_list",
        "lst1",
        "get_num_vertices_less_than_threshold",
        "realmaxval",
        "speed",
        "jj",
        "find_longest",
        "num_i",
        "cls",
        "build_jump_table",
        "mm",
        "even_multiply",
        "max1",
        "solutions",
        "next_l",
        "sergey_score",
        "startCity",
        "minCity",
        "cityWithLeastNumber",
        "starty",
        "segment_display",
        "curr_v",
        "tsum",
        "sr",
        "hash",
        "cc",
        "nextJ",
        "minds",
        "end_col",
        "find_num_closest",
        "fails",
        "d1",
        "su",
        "adjnode",
        "INFI",
        "djikstra",
        "maximum_value",
        "tail",
        "pq",
        "numofNeighbor",
        "p_coord",
        "delta_i",
        "cureff",
        "max_value",
        "j",
        "outa",
        "boxi",
        "dir",
        "lit_comb",
        "bool",
        "list_",
        "ex_new",
        "boxToTarget",
        "get_vars",
        "contact",
        "numerator",
        "i_",
        "l2d",
        "maxi",
        "nxt",
        "max_node",
        "initial_node",
        "ico",
        "topological_sort_tree",
        "cols",
        "subindex",
        "cont_ans",
        "cell_i",
        "maxarr",
        "init",
        "BFS",
        "next_box",
        "getBadIdx",
        "_2",
        "cakwalkproblems",
        "TestSeven",
        "pool",
        "temp2",
        "dummy",
        "Decode",
        "inv",
        "newx",
        "mpr",
        "__str__",
        "Formula",
        "wall",
        "numCities",
        "frl",
        "pmat",
        "shortest_distance",
        "eng",
        "prec",
        "foll",
        "cur_bx",
        "bpos",
        "BRACES",
        "FLOOR",
        "globalMin",
        "precision",
        "min_threshold_cities",
        "msc",
        "max_val",
        "tee",
        "divided",
        "BASE",
        "bMi",
        "current_team",
        "minn",
        "binomial_coeff",
        "models",
        "sqrt",
        "y_",
        "max_num",
        "cyfry",
        "removes",
        "partial",
        "e",
        "floor",
        "tnarr",
        "capitalize",
        "digits",
        "num_vertices",
        "hq",
        "initial",
        "scores",
        "n_box",
        "max25",
        "sorting",
        "remove",
        "bucketNum",
        "cityList",
        "mask",
        "i10",
        "boy_list",
        "f1",
        "ValueError",
        "_",
        "zombies",
        "px_min",
        "dt",
        "reachable_within_threashold",
        "sh",
        "ma",
        "pjj",
        "fac",
        "is_minus",
        "findMaximumXOR",
        "repeat",
        "max_perf",
        "within_threshold",
        "element",
        "_5",
        "encode",
        "node_2",
        "speed_heap",
        "newft",
        "dist_u",
        "accumulate",
        "maxProduct",
        "unique",
        "finaleven",
        "zeroes",
        "ret_num",
        "reach",
        "order",
        "hypot",
        "current_box",
        "finalstring",
        "speedset",
        "fish_hold_list",
        "format_number",
        "compress",
        "pow",
        "sorted_nums",
        "you",
        "dindex",
        "coeff_der",
        "i",
        "even",
        "get_way",
        "score",
        "min_nbrs_city",
        "min_vertex_val",
        "I",
        "bad_row",
        "validPos",
        "iternums",
        "fibLikeGen",
        "minSum",
        "tuple",
        "splits",
        "isalnum",
        "countDown",
        "find_n_neigh",
        "min_ct",
        "minnb",
        "parentIndex",
        "count_arr",
        "min_wt",
        "represent",
        "mohit_question",
        "endstring",
        "res4",
        "pancake_flip",
        "performOperations",
        "product_list",
        "strip",
        "PM",
        "SUM_AT",
        "for_u",
        "othery",
        "dlist",
        "cs",
        "bisect",
        "stringa",
        "pos2",
        "cmd",
        "pair",
        "O",
        "functools",
        "large",
        "rm",
        "difficulty",
        "max_index",
        "set",
        "suma",
        "man",
        "curmin_val",
        "nums_neighbors",
        "pickDist",
        "options",
        "interpreter",
        "sortedList",
        "new_prime",
        "largest",
        "percent",
        "x1",
        "bc2",
        "hi",
        "remaining",
        "boy",
        "num_str",
        "ptr",
        "get_bit",
        "idx2",
        "nei_cost",
        "letterNo",
        "ny",
        "current_human",
        "lt",
        "setPrimes",
        "swap",
        "col",
        "run_bfs",
        "bii",
        "box_row",
        "nn",
        "setroot",
        "insert",
        "tj2",
        "arr",
        "locate",
        "extra",
        "twodiffs",
        "valid_n",
        "cels",
        "wrap",
        "br",
        "city_2",
        "mens",
        "change",
        "sentence",
        "v1",
        "sc",
        "days",
        "dude",
        "people",
        "moveE",
        "min_efficiency",
        "cosx",
        "key",
        "gph",
        "one_down",
        "children",
        "checkBad",
        "union",
        "stg",
        "set_index",
        "longest_item",
        "maps",
        "max_res",
        "xr",
        "bit_",
        "final_even",
        "indexes",
        "eval_sat",
        "rules",
        "action",
        "highest_len_name",
        "prefix_even",
        "want",
        "ran",
        "stripped_digit",
        "localNode",
        "b_pos",
        "multiply",
        "list",
        "conn",
        "appendleft",
        "isvalid_posi",
        "level",
        "num_pushs",
        "pr",
        "god",
        "evenNumLoc",
        "Y",
        "sl",
        "base_list",
        "cells",
        "dkstr",
        "dp_cur",
        "lol",
        "adjList",
        "arr2",
        "n_vertices",
        "nex_w",
        "write",
        "running_sum",
        "line",
        "multiple",
        "visited",
        "left_index",
        "synopsis",
        "cursum",
        "n_person",
        "currChar",
        "dic",
        "min_",
        "nbs",
        "max_c",
        "bucketSize",
        "small",
        "derivitave",
        "num_string",
        "xor1",
        "min_cnt",
        "middle",
        "whitespace",
        "new_cost",
        "nxt_v",
        "minSubArrayLen",
        "box_j",
        "maxGap",
        "index1",
        "qsize",
        "min_seen",
        "lb",
        "edge",
        "hamilton",
        "city_",
        "soln",
        "good_R",
        "maxV",
        "n_start",
        "trueword",
        "tails",
        "TO_KELVIN",
        "perc",
        "iHeap",
        "next_q",
        "sum_sergey",
        "new_box_row",
        "djikstras",
        "true_vars",
        "my_score",
        "iso",
        "binary",
        "resum",
        "sec",
        "MAX_VAL",
        "total_weight",
        "station2",
        "even_val",
        "illegal",
        "dest",
        "player_y",
        "keys",
        "st",
        "check",
        "res_str",
        "reqd",
        "br2",
        "exp",
        "math",
        "hired",
        "c2_max",
        "unvisited_queue",
        "endtime",
        "actual",
        "fromK",
        "my_pairs",
        "Max",
        "board",
        "alll",
        "goal",
        "topind",
        "lastdigit",
        "min_reach",
        "total_infected",
        "__not_diagonal",
        "mem",
        "Literal",
        "txt",
        "indexed",
        "neighCount",
        "mod_",
        "tup",
        "p_j",
        "mysum",
        "a_string",
        "bx",
        "nCrModpLucas",
        "prev_vowel",
        "ki",
        "liz",
        "cindex",
        "m2",
        "__x",
        "l1",
        "csk",
        "visits",
        "candidate_2",
        "queue",
        "storage",
        "edge1",
        "open",
        "lpz",
        "is_or",
        "oppositeNextBoxPos_x",
        "max_city",
        "ptsy",
        "minimum",
        "reach_list_upbound",
        "nCrModpDP",
        "val2",
        "deltay",
        "box_moves",
        "dd",
        "n_level",
        "xi",
        "times",
        "n_pos",
        "relax_distance",
        "ex",
        "segs",
        "inda",
        "removed",
        "b1",
        "minarr",
        "fl",
        "neigh",
        "est_distance",
        "capwords",
        "error",
        "toggleVisit",
        "tmp2",
        "object",
        "engineers",
        "original_tot",
        "mc",
        "good",
        "convertToC",
        "buy",
        "sub_determinant",
        "countVowelPermutation",
        "prev_char",
        "arr1",
        "new_dict",
        "secondNumber",
        "is_as",
        "desArr",
        "mod",
        "nextB",
        "currSum",
        "getDivs",
        "parsePatern",
        "binarySearch",
        "newc",
        "__mul__",
        "find_cost",
        "state",
        "maxlen",
        "X",
        "gcd2",
        "currw",
        "way",
        "aw",
        "nextv",
        "eve_arr",
        "first_num",
        "shortestPath",
        "permutations",
        "french",
        "maxvaldig",
        "nid",
        "input_arr",
        "gets",
        "news",
        "nbc",
        "get_min_moves",
        "p_i",
        "itertools",
        "sorted_columns",
        "not_found",
        "lst",
        "output",
        "stdin",
        "pc",
        "np",
        "curr_product",
        "globalNode",
        "begin",
        "L",
        "bitCountZero",
        "negabinary_to_int",
        "__add__",
        "maxSpeeds",
        "five",
        "currv",
        "curr_max",
        "one",
        "previous",
        "CG",
        "tsx",
        "player_bfs",
        "maxim",
        "sum_spd",
        "base",
        "nsc",
        "b_count",
        "travel",
        "p1",
        "dir0",
        "rank_of_element",
        "mul",
        "new_box",
        "reversed",
        "parr",
        "ending",
        "ctr",
        "counte",
        "number_list",
        "fib_1",
        "after",
        "next_node",
        "curr_val",
        "geti",
        "edgeWeight",
        "bracket",
        "standard",
        "converters",
        "factorial",
        "rest",
        "men_from_boys",
        "go",
        "maxsize",
        "disconnected_cities",
        "Counter",
        "P",
        "split",
        "counts",
        "lowestCity",
        "fun",
        "power",
        "nr_idx",
        "bi_new",
        "target_posi",
        "LL",
        "diffs",
        "bitset",
        "odd_arr",
        "final",
        "npc",
        "box_x",
        "Len",
        "placeQueen",
        "min_result",
        "c2",
        "dates",
        "fabs",
        "paths",
        "new_player_col",
        "sub_sum",
        "FUNCS",
        "connected",
        "newpages",
        "sz",
        "grid",
        "li",
        "count_1",
        "r_way",
        "localReachable",
        "is_pushable",
        "fish_hold",
        "test_cases",
        "ans1",
        "indices",
        "empty_graph",
        "lengthOfLIS",
        "reach_list",
        "point",
        "min_cost",
        "city2",
        "calc2",
        "is_prime",
        "number_of_steps",
        "n_steps",
        "min_array",
        "finish",
        "i2",
        "char",
        "k_",
        "idx1",
        "py_temp",
        "box",
        "deltax",
        "last_o",
        "strb",
        "S",
        "A1",
        "right_index",
        "f5",
        "__call__",
        "v2",
        "curr_res",
        "sub",
        "cx",
        "xrange",
        "fees",
        "ro",
        "popleft",
        "count",
        "boys",
        "ml",
        "years",
        "op_ptr",
        "solve",
        "max_",
        "rr",
        "title",
        "flip",
        "mod2",
        "evaluate",
        "eval",
        "globalReachable",
        "numT",
        "convert_temp",
        "tx",
        "psh",
        "_get_raw_way",
        "nb_c",
        "stud",
        "pop",
        "minPushBox",
        "skill",
        "coefficient2",
        "character",
        "str_n",
        "ret0",
        "deg",
        "isnumeric",
        "connections",
        "ucln",
        "min_val",
        "cur_pusher",
        "travelled_distance",
        "sSum",
        "evenL",
        "nodes_reached",
        "dupa",
        "max_pos",
        "__solve_n_queues",
        "impossible_nodes",
        "candidate",
        "max_digits",
        "iterations_done",
        "res3",
        "dc",
        "isum",
        "x_",
        "setdefault",
        "turns",
        "counta",
        "neighbours",
        "sublist",
        "sortd",
        "findTheCityFloydWarshall",
        "estimate",
        "uu",
        "cityThresholdSum",
        "ceil",
        "_jump",
        "inner",
        "dLeft",
        "target",
        "maxSize",
        "S1",
        "length",
        "modulus",
        "minNeighborCount",
        "min_heap",
        "chain",
        "off_list_x",
        "sumOfSpeeds",
        "ncol",
        "all_num",
        "test_seven_second_case",
        "max",
        "mi",
        "past",
        "divmod",
        "heapreplace",
        "prev_count",
        "NM",
        "adjl",
        "new_item",
        "participants",
        "maxRes",
        "dfn",
        "cmp",
        "newspos",
        "lis2",
        "empty",
        "sum_up",
        "existing_nums",
        "k_index",
        "Amod",
        "ans2",
        "neighbors",
        "ones",
        "sorted_unique_arr",
        "s0",
        "sorted",
        "Vowel",
        "log10",
        "distancTreshold",
        "minD",
        "get_distance",
        "cur_b",
        "br1",
        "cn",
        "sum_div",
        "con",
        "self",
        "totalperf",
        "right",
        "profitLoss",
        "satisfiable",
        "yr",
        "nr_id",
        "followed",
        "sx",
        "Inter",
        "minV",
        "untrans",
        "delim",
        "squares_graph",
        "newg",
        "cy",
        "max_a",
        "dist2",
        "z",
        "p_pos",
        "prime",
        "fromi",
        "mult",
        "ed",
        "zero",
        "deq",
        "endCity",
        "nbr",
        "case",
        "visit_ordered",
        "string_array",
        "t1",
        "counti",
        "even_arr",
        "ap",
        "largestVal",
        "UCLN",
        "s_",
        "w_",
        "gh",
        "t2",
        "new_man",
        "min25",
        "nextPos_x",
        "distanceThreshold",
        "min_indexes",
        "int2",
        "distance_map",
        "tot_speed",
        "by",
        "HowManyYears",
        "player_x",
        "result_str",
        "MOVES",
        "reachable_neighbors_of",
        "k_2",
        "div",
        "popped",
        "create_line",
        "fmod",
        "getcld",
        "lrf",
        "jk",
        "evens",
        "stack",
        "pc2",
        "occur",
        "ncr",
        "ans",
        "dT",
        "to",
        "copies",
        "nice",
        "lenght",
        "dpd",
        "stk",
        "get_26_power",
        "last_number",
        "shifted",
        "tsy",
        "threeshold",
        "mylist",
        "do_gcd",
        "str_char",
        "fib_2",
        "odd",
        "num_city",
        "res_connected",
        "z2",
        "speed_h",
        "Engineer",
        "no",
        "most_digits",
        "target_col",
        "xor",
        "bjj",
        "T",
        "nodes",
        "fib_spec",
        "mostDigits",
        "tar",
        "difference",
        "dst",
        "r2",
        "v",
        "lits",
        "bucketsMax",
        "asc",
        "max_return",
        "extend",
        "L2",
        "word",
        "smp",
        "next_state",
        "min_idx",
        "current_eff",
        "findLen",
        "sp",
        "up",
        "best",
        "ob",
        "less",
        "frequency",
        "f",
        "n_max",
        "ss",
        "cur_box",
        "countzero",
        "Can",
        "uv",
        "max_city_numbers",
        "new_a",
        "sj_new",
        "CodeforcesTask696ASolution",
        "_len_arr",
        "validCities",
        "hf",
        "_calc_last_rest",
        "kol",
        "den",
        "mid",
        "r1",
        "min_neighbor",
        "tempres",
        "bMs",
        "is_reachable",
        "n_end",
        "chkprime",
        "FIB",
        "ups_tot",
        "src",
        "na",
        "py_max",
        "push",
        "seq",
        "dict1",
        "array",
        "zeros",
        "box_next_x",
        "second_part_of_number",
        "unvisited",
        "new_frontier",
        "current_best",
        "from_scale",
        "objects",
        "sorted_gap",
        "n_of_eq_var",
        "lost_col_array",
        "validBraces",
        "can_reach",
        "threshold",
        "fee",
        "tem_node",
        "highest_num",
        "b_coord",
        "get",
        "find_path",
        "divide",
        "licznik",
        "d",
        "sum_mid",
        "new_player_position",
        "end_y",
        "maxInd",
        "m_str",
        "n_neighs",
        "retStr",
        "heapSum",
        "workers",
        "SEP",
        "func",
        "B1",
        "yc",
        "pushPos",
        "reachCount",
        "prefix_parities",
        "validMoves",
        "luz",
        "strptime",
        "maximum",
        "edgeWeights",
        "format",
        "shape",
        "ri",
        "width",
        "spaces",
        "find_cities_k",
        "put",
        "jumpP",
        "vp",
        "sys",
        "ind",
        "isdigit",
        "max_prev",
        "es",
        "nw",
        "e1",
        "currentIndex",
        "List",
        "min_n",
        "sink",
        "prefix_sum",
        "option",
        "nextPlayer",
        "good_Rs",
        "ab",
        "nextIndex",
        "visitedAllNodes",
        "pos",
        "currentSmallest",
        "isPrime",
        "toj",
        "minDistance",
        "max_prod",
        "term",
        "getattr",
        "tree",
        "text",
        "m",
        "method1",
        "num3",
        "findX",
        "TWO_ZERO",
        "curr_pos",
        "bj_new",
        "brng",
        "counto",
        "intersection",
        "StopIteration",
        "backtracking",
        "cap",
        "reachable",
        "ishard",
        "twos_difference",
        "ball",
        "person",
        "rfind",
        "box_i",
        "itemgetter",
        "chad",
        "n_cost",
        "coe",
        "px",
        "readnums",
        "start_i",
        "inbound",
        "seven",
        "re",
        "sources",
        "new_y",
        "spos",
        "intermediateCity",
        "distances",
        "last",
        "bisect_left",
        "find",
        "full_way",
        "vf",
        "new_state",
        "curr_j",
        "MOD",
        "distance_sofar",
        "prefix",
        "next_permutations",
        "true_nx",
        "first_part_of_number",
        "capWord",
        "pii",
        "kmod",
        "bucketsMin",
        "m_list",
        "dijstra",
        "minCities",
        "_instruct",
        "currsum",
        "bitCountOne",
        "num_x",
        "getLiterals",
        "geta",
        "info",
        "shift",
        "can_get",
        "names",
        "bfs_from_pusher",
        "getCitiesUnderThreshold",
        "__author__",
        "bracket_pos",
        "bap",
        "tt",
        "read",
        "acts",
        "search_tails",
        "sat",
        "sp_pop",
        "can_move",
        "canMoveTo",
        "validSet",
        "second_part",
        "temp",
        "reader",
        "abs",
        "get_result",
        "currBox",
        "writeline",
        "start_box",
        "inf",
        "end_x",
        "fz2",
        "good2",
        "sol",
        "cell",
        "user_contacts",
        "ansMax",
        "res_reachable",
        "translate",
        "box_y",
        "q1",
        "dir_x",
        "pj",
        "loop",
        "nk",
        "kfib",
        "tb",
        "next_letters",
        "queens",
        "ppl",
        "end_seen",
        "new_queue",
        "expo",
        "sum1",
        "maxNum",
        "b_id",
        "THRESHOLD_MAX",
        "event",
        "_can_player_reach",
        "bad",
        "lowestNumber",
        "final_word",
        "coeff",
        "bad_speed",
        "csv_file_content",
        "used",
        "ts",
        "sumtree",
        "search",
        "asmax",
        "c2other",
        "prevs",
        "kk",
        "ta",
        "edit_dis",
        "sel_cities",
        "time",
        "nei_id",
        "g",
        "icp",
        "dp_array",
        "aaa",
        "poo",
        "shortest_distance_i",
        "edges",
        "getl",
        "sumnumbers",
        "depth",
        "dirs",
        "eff_speed",
        "dfs_travel",
        "curr_col",
        "current_idx",
        "lca",
        "operator",
        "labels",
        "expoMinus",
        "finalCityList",
        "some",
        "currPos",
        "ai",
        "itov",
        "fringe",
        "constructGraph",
        "divisors2",
        "ind_max",
        "sam",
        "curr_min_val",
        "tk",
        "unit",
        "nv",
        "sm",
        "any",
        "num_sum",
        "house",
        "reachable_nodes",
        "head",
        "on_list_x",
        "dblAvg",
        "increasing",
        "k_1",
        "nbr_node",
        "Ssum",
        "find_n_neighbours",
        "remove_edge",
        "last_col",
        "pat",
        "allLiterals",
        "final_list",
        "new_person",
        "free",
        "dp_next",
        "start_seen",
        "notpass",
        "cur_s",
        "xor2",
        "bc1",
        "sum_dig_pow",
        "ith",
        "minIndex",
        "pending",
        "inversion",
        "range",
        "fromkeys",
        "ratio",
        "flit",
        "date2",
        "ljust",
        "found_shorter_path",
        "minimum_city_index",
        "new_player_row",
        "rght",
        "get_price",
        "root",
        "unconnected",
        "get_name",
        "bnum",
        "y2",
        "dim",
        "nck",
        "evenNums",
        "dfs1",
        "is_literal",
        "upper",
        "perimeter",
        "vtoi",
        "calculate_ending_pair_cost",
        "zmin",
        "animal",
        "findTheCity2",
        "lis",
        "engs",
        "cur_i",
        "route",
        "opp_r",
        "maxx",
        "nums1",
        "titles",
        "temp_sum",
        "ost",
        "type",
        "helper_len",
        "convertToParitys",
        "find_lowest_places",
        "count_2",
        "number",
        "lstrip",
        "increase_cost_on_path",
        "out",
        "bucket",
        "ram",
        "test_seven_when_m_is_0",
        "numb",
        "ending_nodes",
        "current_element",
        "slow",
        "A",
        "speeds",
        "parent",
        "cur_bit",
        "determinant",
        "end",
        "res_idx",
        "mincount",
        "oppositeNextBoxPos_y",
        "rq",
        "nb",
        "targetPos",
        "new_exp",
        "s_c",
        "minE",
        "k",
        "default",
        "l1_ans",
        "elongate",
        "least_max",
        "results",
        "targr",
        "bc",
        "heappush",
        "curr_distance",
        "str_num",
        "flags",
        "min_nei",
        "tjj",
        "vb",
        "item",
        "pf",
        "largelst",
        "would_need_rep",
        "p0",
        "nbx",
        "passed",
        "currentMaximum",
        "sj",
        "ele",
        "enumerate",
        "selected_city",
        "fee_on_path",
        "lookup",
        "strin",
        "defaultdict",
        "to_flip",
        "cof",
        "curmin_idx",
        "candidate_1",
        "i1",
        "pqc",
        "get_year",
        "s_car",
        "events",
        "KeyError",
        "ord",
        "xy_sum",
        "inp",
        "lowest_num",
        "compile",
        "visitedDict",
        "test_seven",
        "csv",
        "read_input",
        "minimum_number",
        "coefficients",
        "smm",
        "col_status",
        "str_lst",
        "minv",
        "csv_columns",
        "rez",
        "neigh_cost",
        "gc",
        "openers",
        "N",
        "query",
        "other",
        "x10",
        "reached",
        "min_count",
        "output_lookup",
        "fline",
        "answ",
        "tmp_k",
        "second_largest",
        "px_temp",
        "been",
        "ns_r",
        "f2",
        "currPlayer",
        "segments",
        "currentLargest",
        "asmin",
        "men",
        "rindex",
        "old_d",
        "_0",
        "d2i",
        "aftermax",
        "for_a",
        "show",
        "dfs2",
        "for_e",
        "dikstra",
        "D",
        "lit_set",
        "a0",
        "dists",
        "beeg",
        "calc",
        "des",
        "Count",
        "n_s",
        "vmap",
        "longest",
        "main",
        "boxPos",
        "iy",
        "nextBArr",
        "coffie",
        "bin",
        "yy",
        "newlist",
        "acc",
        "curr_heuristic_est",
        "_sat",
        "getSolutionBitMaps",
        "curr_i",
        "capitalize_word",
        "minEff",
        "countIteration",
        "_dummy",
        "complex",
        "city_1",
        "vowel",
        "next_city",
        "num_len",
        "cur",
        "max_sum",
        "d_",
        "character_num",
        "dir_y",
        "op",
        "ls",
        "remadd",
        "buildGraph",
        "minNum",
        "ptsx",
        "biggest",
        "max_Value",
        "oe",
        "newword",
        "s_sum",
        "line_flag",
        "gotobox",
        "worker",
        "greater_letters",
        "flg",
        "rec",
        "n1",
        "zfill",
        "box_location",
        "index",
        "w",
        "coordinates",
        "reduce",
        "rep",
        "l2_ans",
        "yb",
        "box_start",
        "tmp1",
        "dp2",
        "sum_ser",
        "min1",
        "num_of_odd",
        "tmp_str",
        "cur_by",
        "vertex",
        "fb",
        "all_lower",
        "r_",
        "parity_R",
        "max_d",
        "c_x",
        "bestTeamScore",
        "need",
        "ev_od",
        "SortedList",
        "bx2",
        "realnum",
        "sorted_row",
        "seive",
        "spread",
        "lim1",
        "citySet",
        "newy",
        "two",
        "com",
        "new_x",
        "b_min",
        "totnums",
        "current",
        "t",
        "sort",
        "ll",
        "cur_efficiency",
        "TestCase",
        "unpackString",
        "actions",
        "dict2",
        "bestTeamHeap",
        "sum_list",
        "rests",
        "max_p",
        "togo",
        "nest",
        "opt",
        "date",
        "lastCheck",
        "py2",
        "num_cs",
        "si",
        "bruh",
        "iidx",
        "total_fee",
        "mdd",
        "k_x",
        "__init__",
        "bad_col",
        "smallest",
        "sint",
        "to_string",
        "co",
        "teams",
        "cyk",
        "pos1",
        "playerCanReach",
        "max50",
        "l_st",
        "__abs__",
        "city1"
    ],
    "integer": [
        "5000",
        "100",
        "1000000",
        "15",
        "122",
        "32",
        "97",
        "5003",
        "95",
        "1000000005",
        "10000",
        "29",
        "1_000_000_007",
        "37",
        "65",
        "998244353",
        "5001",
        "9",
        "13",
        "12",
        "40",
        "1",
        "6",
        "90",
        "1000000000",
        "0xAAAAAAAAAAAA",
        "2147483647",
        "35",
        "26",
        "100000",
        "1603",
        "19",
        "28",
        "24",
        "143",
        "999999",
        "9999999",
        "48",
        "500000",
        "10000000",
        "10",
        "6000",
        "27",
        "1000",
        "400",
        "0",
        "1j",
        "22",
        "9999999999999999",
        "8",
        "34",
        "18",
        "7",
        "5",
        "11",
        "23",
        "2340029794923400297949",
        "0x7FFFFFFF",
        "33",
        "96",
        "44",
        "256",
        "20",
        "17",
        "123",
        "263000",
        "66",
        "58",
        "1001",
        "2",
        "0xAAAAAAAA",
        "150001",
        "1021",
        "21",
        "3",
        "999999999",
        "16",
        "200",
        "99999",
        "70",
        "529",
        "1000000007",
        "36",
        "101",
        "4",
        "1600",
        "32000",
        "31",
        "30",
        "999999999999999",
        "9999999999999999999",
        "99",
        "98",
        "10001",
        "30000",
        "100000000000000000000000000000000000",
        "10000000000",
        "14",
        "1000000000000000000000000000000000000000000",
        "47",
        "25"
    ],
    "string": [
        "\"\"\"\nlevel 0: [bx,by,px,py]\n\nlevel 1: [bx-1, by, px-1, py]\n\nlevel 3: \n\n\n\"\"\"",
        "'10'",
        "\"abcdefghijklmnopqrstuvwxyz\"",
        "'math'",
        "\"TGCA\"",
        "\"Q........\"",
        "'[]nesw*'",
        "'''\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new, visited):\n        m, n = len(grid), len(grid[0])\n        if si == si_new and sj == sj_new:\n            return True\n        visited.add((si, sj))\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#' and self.canMoveTo(grid, bi, bj, i, j, si_new, sj_new, visited):\n                return True\n        return False\n\n    def canMoveTo(self, grid, bi, bj, si, sj, validSet):\n        m, n = len(grid), len(grid[0])\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) in validSet:\n                continue\n            if 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                validSet.add((i, j))\n                self.canMoveTo(grid, bi, bj, i, j, validSet)\n        return validSet\n    '''",
        "\"\"\"This functino finds the first number with the most digits\"\"\"",
        "' _0123456789'",
        "\".......Q\"",
        "\"00\"",
        "\"flipping \"",
        "'''\nUsing Dijkstra's Algorithm\n\nIdea:\n1) Do Dijkstra from every node due to the weights are non-negative\n2) For each city calculate the number of reachable cities within the threshold, then search for the optimal city.\n\n'''",
        "'A'",
        "\"P5\"",
        "'S'",
        "'moveS'",
        "\" at \"",
        "\"...Q....\"",
        "\"value = \"",
        "'extra'",
        "\"........Q\"",
        "f'{coe}x^{exp}'",
        "\"yes\"",
        "'     '",
        "'''\nUsing Floyd-Warshall Algorithm\nReference: https://www.youtube.com/watch?v=oNI0rf2P9gE\n\nTC: O(V^3)\nSC: O(V^2)\n'''",
        "'2'",
        "'r'",
        "\"Q...\"",
        "\".txt\"",
        "\"\\\\U0001f600\"",
        "'{}'",
        "\"starting with: \"",
        "'t*5/4'",
        "'c+273.15'",
        "\"..Q.....\"",
        "\"%&B8\"",
        "\"Q......\"",
        "\"index for\"",
        "'3'",
        "\"\\r\\n\"",
        "\"\"\"\r\n    This converts the string s to an int, which is a bitMap of the parity of each letter\r\n    odd ? = first bit set\r\n    odd a = second bit set\r\n    odd b = third bit set \r\n    etc\r\n    \"\"\"",
        "'8 j 8   mBliB8g  imjB8B8  jl  B'",
        "f\"{poo}x^{int(exponent-1)}\"",
        "\"-+,.;:\"",
        "r\"\\bclang\"",
        "'s'",
        "'[]'",
        "' #'",
        "'bestest episode ever'",
        "f\"^{exponent - 1}\"",
        "\"pop\"",
        "'['",
        "\"abdegopq069DOPQR%&B8%&B8\"",
        "' ### '",
        "f'{n:A>6}'",
        "'K'",
        "\"..Q..\"",
        "\"...Q.\"",
        "\"><\"",
        "'02356'",
        "\"\\\\U0001F923\"",
        "'e'",
        "f\"{a}x^{b}\"",
        "\"..Q...\"",
        "\"1\"",
        "\"\"\"Solve puzzle.\"\"\"",
        "\" |\"",
        "\"min\"",
        "'t*100/33'",
        "'ERROR'",
        "')}]'",
        "\"(l[{:n}]{:s}l[{:n}]{:s}l[{:n}])\"",
        "'C'",
        "\"\"\"\n        use manhatan distance as Heuristic esitimation for A-star algorithm: steps + (abs(nextPos[0]-endPos[0]) + abs(nextPos[1]-endPos[1])).  \n        put the heuristic estimation in the hq, together with steps, so the hq stores \n        (heristic estimation of the minimum steps needed from source to target, steps, nextPos). \n        \"\"\"",
        "\"Visiting: \"",
        "\"<>\"",
        "'(100-c)*3/2'",
        "''",
        "'jumpB'",
        "'NO'",
        "f\"{product}x^{ex_new}\"",
        "\"Last digit:\"",
        "'g'",
        "'z'",
        "\"Z\"",
        "'02346'",
        "\"3\"",
        "'zZ'",
        "\"Ro\"",
        "\"sell\"",
        "'jumpP'",
        "\"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"",
        "\"\"\"\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       \n\"\"\"",
        "f'{ans}x^{power}'",
        "\"\"\"\n        Return if player can reach dst position by doing bfs/dfs\n        \"\"\"",
        "\".......Q.\"",
        "\"[news]*\"",
        "\"\"\"\n         :type s: str\n         :type p: str\n         :rtype: bool\n         \"\"\"",
        "'abdegopq069DOPQR'",
        "\"....Q\"",
        "\"\"\"\n12:09\n\nfirst construct the graph\n\ngenerate shortest paths (within threshold) to each city from each city\nreturn the city with the smallest number of paths (and largest number for tiebreak)\n\niterate thru cities\n0\nkeep a PQ of the shortest distances to each node\nwhen we arrive at a new node, add the node + distance to queue\n0->1\n1: 2\n\n0->4\n4: 8\n\n1->2\n2: 3 + 2\n1->4\n4: min(8, 2 + 2) = 4\n\ncontinue until the queue is empty. O(E)\n\nat the end of the traversal, remove all nodes from the list of paths for which dist > threshold O(V)\n\ndo this for each vertex in the graph\nO((E + V)) * V)\n\nOutput: iterate through each list of cities, track min number of cities and choose the largest numbered city with the min.\n\n\"\"\"",
        "\"...Q..\"",
        "'    #'",
        "\"\\n\"",
        "f'{sum}x^{exponent}'",
        "'}'",
        "'TAGC'",
        "\"A\"",
        "'(c+273.15)*9/5'",
        "\"|\\n\"",
        "\".....Q..\"",
        "'v'",
        "'''\n    Floyed-Warshall algorithm won't work if diagonal values are not set to \n    0 when self loop distance is not given\n    '''",
        "'b'",
        "\"x^2\"",
        "\"......Q.\"",
        "\"\"\"\n             1. a, 1\n                 1: bbbb\n                 0: bbbba\n             2. b, 1\n                 10: bbbb\n                 11: bbb\n                 12: bb\n                 13: b\n                 14: ''\n                 00: bbbba\n             3. a, 0\n                 001: bbbb\n             4. b, 0\n                 0011: bbb\n             5, b, 1:\n                 00110: bbb\n                 00111: bb\n                 00112: b\n                 00113: ''\n             6, '', 0\n                 00113 -> true\n             \"\"\"",
        "f'{coeff}x^{exp}'",
        "'{0}{1}'",
        "\"}\"",
        "\"{}\"",
        "\".....Q...\"",
        "\"[1-9]\"",
        "r'\\s+'",
        "'SUCCESS'",
        "\"[]\"",
        "'1235'",
        "'Re'",
        "\"No\"",
        "f'n: {n}'",
        "f\"{c * e}x^{e - 1}\"",
        "'t-32*5/9'",
        "\".Q.....\"",
        "'|       '",
        "'sort'",
        "\"\"\" Dijkstra's method\n    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        oe = {}\n        for l, r, w in edges:       \n            if l not in oe:\n                oe[l] = set()\n            if r not in oe:\n                oe[r] = set()\n            oe[l].add((r, w))\n            oe[r].add((l, w))\n        \n        def dks(been, c, t):\n            cw = been[c]        # Current Weight\n            if c not in oe:     # No route to any other city\n                return\n            pending = set()\n            for other, weight in oe[c]:\n                ow = weight + cw     # From current city to the other city weight\n                if ow > distanceThreshold:\n                    continue\n                \n                if other not in been:\n                    been[other] = ow\n                    pending.add(other)\n                    continue\n                if been[other] > ow: # Through this city is more effcient\n                    been[other] = ow\n                    pending.add(other)\n\n            for o in pending:\n                dks(been, o, t)\n    \n            \n        smallest = 0\n        mc = n+1\n        for city in range(n):\n            dv = {city: 0}\n            dks(dv, city, distanceThreshold)\n            # print(dv)\n            cities = len(dv.keys()) - 1\n            if cities <= mc:\n                smallest = city\n                mc = cities\n        return smallest\n        \"\"\"",
        "'reverse'",
        "r\"\\bcg\\b\"",
        "'%&B8'",
        "f'{word.title()}'",
        "'iu'",
        "\"b\"",
        "\"\"\"\n        Return a list of posible positions the box could be moved to. There are basically 4 choices\n        \"\"\"",
        "\"insert\"",
        "'''\n        Considering all paths between i, j going through each k vertex\n        '''",
        "'t-273.15'",
        "'''\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude09\n'''",
        "\",\"",
        "'{}x^{}'",
        "\"\"\"N choose K\"\"\"",
        "\"Yes\"",
        "\"abcdefghijklmnopqrstuvwxyz?\"",
        "\"%Y/%m/%d\"",
        "\"-\"",
        "\" distance: \"",
        "'''\n        # Notes:\n            return the city with the smallest number of cities that are reachable through some path\n        # Appraoch:\n            Dijkstra\n        '''",
        "\"r\"",
        "'''       \n        # TLE top-down\n        graph = {'a': ['e'], 'e':['a', 'i'],\\\n                'i': ['a','e','o','u'], 'o': ['i', 'u'],\\\n                'u': ['a']}\n        mod = 10**9+7\n        @functools.lru_cache(None)\n        def dp(c, i):\n            if i == 1:\n                return 1\n            return sum(dp(key, i-1) for key in graph[c])%mod\n        return sum(dp(key, n) for key in graph)%mod\n        '''",
        "' '",
        "'^'",
        "f\"{c*e}x^{e-1}\"",
        "'Z'",
        "'-inf'",
        "'({['",
        "f'{result}x^{exponent1}'",
        "\".Q....\"",
        "'     # '",
        "'''\n        vocals = ['aeiou']\n        arr = vocals * n\n        prods = list(map(\"\".join, itertools.product(*arr)))\n        count = 0\n        for prod in prods:\n            if \"aa\" in prod or \"ai\" in prod or \"ao\" in prod or \"au\" in prod or \"ee\" in prod or \"eo\" in prod or \"eu\" in prod or \"ii\" in prod or \"oa\" in prod or \"oe\" in prod or \"oo\" in prod or \"ue\" in prod or \"ui\" in prod or \"uo\" in prod or \"uu\" in prod:\n                continue\n            print(prod)\n            count += 1\n        return count%(10**9+7)\n        '''",
        "'ai'",
        "'moveN'",
        "f\"abdegopq069DOPQR{two}\"",
        "\"input.txt\"",
        "'insert'",
        "'25'",
        "'YES'",
        "\"xxx\"",
        "'moveW'",
        "\"069abdeopqDOPQRg(\"",
        "\"\"\"\n         :type s: int\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"",
        "f\"{p1}x^{p2}\"",
        "'+'",
        "'025'",
        "\"e\"",
        "'c*4/5'",
        "'''\n        graph = buildGraph(n, edges)\n        floyedWarshalAllPairDist(graph)\n        \n        min_city = 0\n        min_count = float('inf')\n        for i in range(n):\n            count = sum([1 if x<=distanceThreshold else 0 for x in graph[i]])\n            if count <= min_count:\n                min_count = count\n                min_city = i\n        \n        return min_city\n        '''",
        "\"m=\"",
        "\"9\"",
        "\"De\"",
        "f'{num:>6}'",
        "\"\"\"\n    A function that checks if a given number n is a prime looping\n    through it and, possibly, expanding the array/list of known\n    primes only if/when necessary (ie: as soon as you check for a\n    potential prime which is greater than a given threshold for each n, stop).\n    :param n:\n    :return:\n    \"\"\"",
        "f'|{ \"|\".join( BASE[x][d] for d in digs) }|'",
        "','",
        "\"(\"",
        "\"\"\"priority queue + bfs \"\"\"",
        "\"[\"",
        "'''\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new):\n        m, n = len(grid), len(grid[0])\n        q = [(si, sj)]\n        visited = {(si, sj)}\n        while q:\n            si, sj = q.pop(0)\n            if si == si_new and sj == sj_new:\n                return True\n            for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n                i, j = si+dx, sj+dy\n                if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                    q.append((i, j))\n                    visited.add((i, j))\n        return False\n\n\n        \n    def canMoveTo(self, grid, bi, bj, si, sj, validSet):\n        m, n = len(grid), len(grid[0])\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) in validSet:\n                continue\n            if 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                validSet.add((i, j))\n                self.canMoveTo(grid, bi, bj, i, j, validSet)\n        return validSet\n    '''",
        "\"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"",
        "'0'",
        "'flip'",
        "'012456'",
        "'Invalid pattern!'",
        "'||'",
        "\"Returning: \"",
        "' | '",
        "\"\"\"\n         :type n: int\n         :rtype: List[List[str]]\n         \"\"\"",
        "f'{coefficient*exponent}x^{exponent-1}'",
        "'d'",
        "\" \"",
        "'       '",
        "\"\"\" Multiply a given number by eight if it is an even number and by nine otherwise. \"\"\"",
        "\"....Q..\"",
        "'De'",
        "'B'",
        "'c*21/40+7.5'",
        "f\"{coefficient * exponent}x^{exponent - 1}\"",
        "f'{string.capwords(word)}'",
        "\"eval\"",
        "'8j aam'",
        "\"append\"",
        "\"S\"",
        "'75 50 00 25'",
        "'i'",
        "\"50\"",
        "'''we will use an if else situation to differentiate the circumstance'''",
        "\"worstest episode ever\"",
        "'''\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new):\n        m, n = len(grid), len(grid[0])\n        q = [(si, sj)]\n        visited = {(si, sj)}\n        while q:\n            si, sj = q.pop(0)\n            if si == si_new and sj == sj_new:\n                return True\n            for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n                i, j = si+dx, sj+dy\n                if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                    q.append((i, j))\n                    visited.add((i, j))\n        return False\n        \n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new, visited):\n        m, n = len(grid), len(grid[0])\n        if si == si_new and sj == sj_new:\n            return True\n        visited.add((si, sj))\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#' and self.canMoveTo(grid, bi, bj, i, j, si_new, sj_new, visited):\n                return True\n        return False\n        \n    def canMoveTo(self, grid, bi, bj, si, sj, validSet):\n        m, n = len(grid), len(grid[0])\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) in validSet:\n                continue\n            if 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                validSet.add((i, j))\n                self.canMoveTo(grid, bi, bj, i, j, validSet)\n        return validSet\n    '''",
        "'inf'",
        "\"Re\"",
        "\"\"\" Multiply the two numbers and then subtract 1 from the exponent. \"\"\"",
        "'100-t*2/3'",
        "'aeoui'",
        "'8asd sdhjk rr'",
        "\"TAGC\"",
        "\"|||||||||\"",
        "'t'",
        "f\"{concat(x): >{size}}\"",
        "'''delicious'''",
        "f\"{y*x}x^{~-y}\"",
        "\"|\"",
        "'No'",
        "'Guess zero'",
        "\"sort\"",
        "'''\nDynamic programing with recursion?\n\nBase case is five. \n\n[1,1,1,1,1]\n\na =1 e=2 i=4 o=2 u=1\n\na,e\ne,a | e,i\ni,a | i,e | i,u, |i,o\no,i | o,u\nu,a\n\na = 2, e = 5, i = 10 ,o = 5, u =1\n\n\n\nEach round, you are calculating the number of permutations a letter has if you were to stick it in front.\n\nfor instance: i\n\n\nfor 3 letters:\ni: used the previous \na,e\ne,a | e,i\no,i | o,u\nu,a\n\nfor a total of 6 additional permutations. \n\n\n\n'''",
        "\"..Q......\"",
        "\"-inf\"",
        "\"\"\"\n        * dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n        # res = {sum(d <= maxd for d in dis[i]): i for i in range(n)}\n        \"\"\"",
        "'''\nIdea is that we figure out for each city i all cities with index larger than i are reachable with distance at most distanceThreshold.\n'''",
        "'?abcdefghijklmnopqrstuvwxyz'",
        "\"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type distanceThreshold: int\n        :rtype: int\n        \"\"\"",
        "';'",
        "f'{first_num}x^{second_num}'",
        "\"*\"",
        "\"%dx^%d\"",
        "\"0\"",
        "'h'",
        "\"()\"",
        "'Impossible'",
        "\"Q\"",
        "\"\"\"\n        \u57ce\u5e02i\u5230\u57ce\u5e02j\u7684\u8ddd\u96e2\u77e9\u9663:\n        [[0, 2, 5, 5, 4], \n         [2, 0, 3, 3, 2], \n         [5, 3, 0, 1, 2], \n         [5, 3, 1, 0, 1], \n         [4, 2, 2, 1, 0]]\n        \"\"\"",
        "'|{}|'",
        "\".Q..\"",
        "\"8%&B\"",
        "'01356'",
        "'append'",
        "f'{coefficient * exponent}x'",
        "\"\"\"\r\n    these are the 27 valid bitmaps that a substring can have\r\n    even ? and the parities the same\r\n    26 cases of odd ? and one bit different in the parity compared to s\r\n    \"\"\"",
        "\"?\"",
        "\"Q.....\"",
        "f'{x}x^{y}'",
        "\"\"\"\r\nCode Chef :: December 2020 Cookoff :: Sed Passwords \r\nProblem Code: SEDPASS\r\nhttps://www.codechef.com/COOK125A/problems/SEDPASS\r\n\"\"\"",
        "\"\"\"\n         :type k: int\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"",
        "\"....Q.\"",
        "'00 25 50 75'",
        "' #   # '",
        "'9'",
        "'w'",
        "\"n\"",
        "\"T\"",
        "'p'",
        "'-'",
        "'a'",
        "'''\n        graph = collections.defaultdict(list)\n        \n        for edge in edges:\n            graph[edge[0]].append([edge[1]], edge[2])\n        \n        res = []\n        \n        for i in range(n):\n        '''",
        "'''\nLets break the question into simple parts:\n\nLets think that we have no person and we have to find the minimum path between box and the target. Easy right? Simple BFS.\n\nIf you know how to solve the first part, what I actually do is modified first part with few constraints.\n\nI just check whether the box can be shifted to the new position(up, down, left, right)\nFor it to be shifted to the new position the person has to be in a corresponding position right?\nSo we check if the person can travel from his old position to his corresponding new position(using another BFS).\nIf the person can travel to his new position than the box can be shifted, otherwise the box cannot be shifted.\nWe keep repeating step 2 until we reach the target or it is not possible to move the box anymore.\n\nNOTE : If you know A* algorithm, you can use Euclidean distance as heuristic and use a priority queue instead of normal queue, the worst case time might increase but but average case will get better.\n'''",
        "'('",
        "'m'",
        "'7'",
        "'''Sort a CSV file by column name.'''",
        "'''\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new, visited):\n        m, n = len(grid), len(grid[0])\n        if si == si_new and sj == sj_new:\n            return True\n        visited.add((si, sj))\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#' and self.canMoveTo(grid, bi, bj, i, j, si_new, sj_new, visited):\n                return True\n        return False\n        \n    def canMoveTo(self, grid, bi, bj, si, sj, validSet):\n        m, n = len(grid), len(grid[0])\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) in validSet:\n                continue\n            if 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                validSet.add((i, j))\n                self.canMoveTo(grid, bi, bj, i, j, validSet)\n        return validSet\n    '''",
        "\"buy\"",
        "\" with index \"",
        "'''\n        \n        '''",
        "'(t-491.67)*5/9'",
        "\"blea\"",
        "\"{0}x^{1}\"",
        "'|       |'",
        "\")\"",
        "''' \n ### |     | ### | ### |     | ### | ### | ### | ### | ### \n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n#   #|    #|    #|    #|#   #|#    |#    |    #|#   #|#   #\n     |     | ### | ### | ### | ### | ### |     | ### | ### \n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n#   #|    #|#    |    #|    #|    #|#   #|    #|#   #|    #\n ### |     | ### | ### |     | ### | ### |     | ### | ### '''",
        "\".Q.......\"",
        "']'",
        "r'[\\s]'",
        "\".Q...\"",
        "\"Neighbor: \"",
        "\"flipped: \"",
        "\"75\"",
        "'cg'",
        "'Q'",
        "\"#\"",
        "'?'",
        "\"Updating for: \"",
        "'aeiou'",
        "'{:b}'",
        "f'{res}x^{b-1}'",
        "'4'",
        "'50'",
        "\"NO\"",
        "'012356'",
        "f'{int(a)*int(b)}x^{(int(b)- 1)}'",
        "\"Impossible\"",
        "\"-1\"",
        "'''this is not the most elegant or concise solution, but it is functional'''",
        "''' dfs not working, https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/discuss/490555/The-Reason-of-DFS-Not-Working-(Explain-Graph-and-Example)\n        d = collections.defaultdict(list)\n        lookup = dict({})\n        for e in edges:\n            s, e, l = e[0], e[1], e[2]\n            d[s].append(e)\n            d[e].append(s)\n            lookup[(s,e)]=l\n            lookup[(e,s)]=l\n        \n        res=collections.defaultdict(list)\n        def dfs(j: int, i:int, t:int, v:set):\n\n            for c in d[i]:\n                if c not in v and c != j and lookup[(i,c)] <= t:\n                    res[j].append(c)\n                    v.add(c)\n                    dfs(j, c, t-lookup[i,c], v)\n                \n        \n        for i in range(n):\n            dfs(i, i, distanceThreshold, set({}))\n        if n > 26:\n            print(\"27={},33={}\".format(res[27], res[33]))\n        mm = len(res[0])\n        r = 0\n        for i in range(n):\n            print(\"{},len:{}\".format(i, len(res[i])))\n            if len(res[i])  <= mm:\n                r = i\n                mm = len(res[i])\n        return r\n        '''",
        "'\\n'",
        "\" | \"",
        "\"hello\"",
        "'G'",
        "\"=\"",
        "' |'",
        "'f'",
        "\"storage\"",
        "'clang'",
        "'  ###  '",
        "\"functools\"",
        "'0123456'",
        "'Exhausted guesses'",
        "\"count\"",
        "'state'",
        "'Hacktivist'",
        "'j'",
        "'print'",
        "'ATCG'",
        "'\\r\\n'",
        "\"\"",
        "'00'",
        "\"\"\"\n         q = [ (('a',1), 4) ]\n         q = [ (('b',1), 4), (('b',1), 3) ] \n         q = [ (('a', 0), 4), (('a',0), 3)), (('a',0), 2), (('a',0), 1), (('a',0), 0), (('a',0), -1)]\n         q = [ (('b', 0), 3) ]\n         q = [ (('b', 1), 2)]\n         q = [ (('', 0), 2), (('', 0), 1), (('', 0), 0), (('', 0), -1)]\n         (('', 0), -1)-> true\n         \n         \"\"\"",
        "\"ATCG\"",
        "\"\"\"Main program.\"\"\"",
        "\"s\"",
        "'YESSS'",
        "\".\"",
        "\"bestest episode ever\"",
        "\"and\"",
        "'c*9/5+32'",
        "f'{r} -> {c}; {dv[r][c]} <= {distanceThreshold}'",
        "'temp'",
        "\"index\"",
        "\"%sx^%s\"",
        "'''\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new):\n        m, n = len(grid), len(grid[0])\n        q = [(si, sj)]\n        visited = {(si, sj)}\n        while q:\n            si, sj = q.pop(0)\n            if si == si_new and sj == sj_new:\n                return True\n            for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n                i, j = si+dx, sj+dy\n                if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#':\n                    q.append((i, j))\n                    visited.add((i, j))\n        return False\n\n    def canMoveTo(self, grid, bi, bj, si, sj, si_new, sj_new, visited):\n        m, n = len(grid), len(grid[0])\n        if si == si_new and sj == sj_new:\n            return True\n        visited.add((si, sj))\n        for dx, dy in [(0, 1), (0, -1), (-1, 0), (1, 0)]:\n            i, j = si+dx, sj+dy\n            if (i, j) not in visited and 0 <= i < m and 0 <= j < n and (i, j) != (bi, bj) and grid[i][j] != '#' and self.canMoveTo(grid, bi, bj, i, j, si_new, sj_new, visited):\n                return True\n        return False\n    '''",
        "'|'",
        "\"Input is not a string\"",
        "'0b'",
        "'''\\\n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |       \n       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |       \n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       '''",
        "\"remove\"",
        "'''\nAlgorithm: \n1) Measure all pair distance using Floyed Warshal algorithm\n2) Find the city with minimum connected cities with atmost threshold distance\n'''",
        "\"p array = \"",
        "'CLANG'",
        "\"\"\"\r\n    This calculates the bit map of each of the len(s) substrings starting with the first character and stores as a dictionary.\r\n    Getting TLE calculating each individually, so calculating with a single pass\r\n    \"\"\"",
        "'{0:b}'",
        "f\"{new_coeff}x^{new_exp}\"",
        "'c'",
        "'''\n        n    t(i)     n-1  (n + i + 1) * (n - i)\ns(n) =  \u03a3   -----  +   \u03a3   ---------------------\n       i=1  i + 1     i=1     2 * (n + i + 1)\n\n        n    i      n-1   n - i\n     =  \u03a3   ---  +   \u03a3    -----\n       i=1   2      i=1     2\n\n        n    i      n-1    i\n     =  \u03a3   ---  +   \u03a3    ---\n       i=1   2      i=1    2\n\n         n      n-1\n     =  ---  +   \u03a3   i\n         2      i=1\n\n         n      n * (n - 1)\n     =  ---  +  -----------\n         2          2\n\n     =  n^2 / 2\n'''",
        "'5'",
        "'[]nsew*'",
        "\"...Q...\"",
        "\"25\"",
        "' 000 |1   2|1   2|1   2| 333 |4   5|4   5|4   5| 666 '",
        "f\"{word.title()}\"",
        "\"{}{}\"",
        "\"\"\"Floyd-warshall, O(n^3)\"\"\"",
        "\"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"",
        "\"x^\"",
        "'013456'",
        "'Yes'",
        "\"w\"",
        "\"no\"",
        "\"ERROR\"",
        "'aeou'",
        "\"| \"",
        "'itertools'",
        "\"_\"",
        "\"]\"",
        "\"...Q\"",
        "\"......Q..\"",
        "'_nonC'",
        "'CG'",
        "'/'",
        "'yes'",
        "\"and \"",
        "'''max_sum=-1\n                for i in range(n):\n                    if count[lst[i]]>1:\n                        index2=dict[lst[i]]\n                        index1=i\n                        print(index1,index2)\n                        if lst[i]%2==0:\n                            val=prefix_even[index2]-prefix_even[index1]-1\n                            print(val)\n                            if val%2==0:\n                                temp_sum=prefix_sum[index2]-prefix_sum[index1]-lst[i]\n                                print(temp_sum)\n                                if temp_sum>max_sum:\n                                    max_sum=temp_sum\n                        else:\n                            val=prefix_odd[index2]-prefix_odd[index1]-1\n                            print(val)\n                            if val%2!=0:\n                                temp_sum=prefix_sum[index2]-prefix_sum[index1]-lst[i]\n                                print(temp_sum)\n                                if temp_sum>max_sum:\n                                    max_sum=temp_sum'''",
        "'buy'",
        "\"print\"",
        "\"abdegopq069DOPQR\"",
        "\"{\"",
        "'sell'",
        "\"..Q....\"",
        "\"hi\"",
        "'nx'",
        "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"",
        "\"B\"",
        "f'{x}x^{exponent-1}'",
        "'#'",
        "'R'",
        "\"z\"",
        "'{'",
        "\";\"",
        "'T'",
        "\"max\"",
        "\"\"\"\nn = 4\nedges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]\ndistanceThreshold = 4\nn = 5\nedges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]]\ndistanceThreshold = 2\ns = Solution()\nprint(s.findTheCity(n, edges, distanceThreshold))\n\"\"\"",
        "\"found element \"",
        "'''|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |'''",
        "r\"\\s\"",
        "\"YES\"",
        "f\"{coeff * exponent}x^{exponent-1}\"",
        "\"\"\"\n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # \n       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # \n  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  \n\"\"\"",
        "'''|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |  ###  |  ###  |  ###  |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n| #   # |     # |     # |     # | #   # | #     | #     |     # | #   # | #   # |\n|       |       |  ###  |  ###  |  ###  |  ###  |  ###  |       |  ###  |  ###  |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n| #   # |     # | #     |     # |     # |     # | #   # |     # | #   # |     # |\n|  ###  |       |  ###  |  ###  |       |  ###  |  ###  |       |  ###  |  ###  |\n'''",
        "F\"{mul}x^{sub}\"",
        "'8'",
        "f\"{m}{n}\"",
        "\"\"\"\n    Basic Idea: \n    \n    The number of cominations is simply N choose K. We calcuate this n-times up to the limit.\n    \n    To sum up all the digits we don't have to calculate the sum of each permuation, rather, we simply have to \n    realise that the digit \"1\" will appear N times.\n    \n        For example: [1,2,3], pick = 3.  \n        \n        If there are 6 combinations of length 3 for 3 numbers then each number much appear once in each combination. \n        Thus the sum is: (1 * 6) + (2 * 6) + (3 * 6)\n    \n        In cases where we have N numbers and need to pick K of them then that means not all numbers appear in all combinations.\n        It turns out combinations_total / (N / limit) gives us how many times N appears in the list of all combinations. \n        \n        For example: [1,2,3] pick 2\n        [1,2]\n        [2,1]\n        [1,3]\n        [3,1]\n        [2,3]\n        [3,2]\n        \n        We can see that 1 appears 4/6 times. \n        combinations_total = 6, N = 3, limit = 2.\n        \n        6 / (3/2) = 4\n    \"\"\"",
        "\"ha\"",
        "\"Hi How Are You\"",
        "\"..Q.\"",
        "\"ACGT\"",
        "\"a\"",
        "\"\"\"Round Robin by Bocker & Liptak\"\"\"",
        "'u'",
        "'pop'",
        "'#    '",
        "'worstest episode ever'",
        "f'{coefficient*exponent}x'",
        "'res'",
        "'l'",
        "f\"{h} {h[::-1]}\"",
        "'x'",
        "f'{i*j}x^{j-1}'",
        "\"\"\"\n         :type nums1: List[int]\n         :type nums2: List[int]\n         :type k: int\n         :rtype: List[List[int]]\n         \"\"\"",
        "'nesw*[]'",
        "\"\"\"\nCreated on Wed Jul 15 23:50:55 2020\n\n@author: shailesh\n\"\"\"",
        "\"...Q.....\"",
        "\"<string>\"",
        "'1 2 3 4 5 6 7 8 9 0'",
        "\"current element: \"",
        "\".....Q.\"",
        "f'{coefficient * exponent}x^{exponent - 1}'",
        "\" Hello \"",
        "\".....Q\"",
        "'word'",
        "'()'",
        "')'",
        "f\"{product}x^{exponent - 1}\"",
        "'*'",
        "\"l[{:n}]\"",
        "\".Q......\"",
        "'&'",
        "\"inf\"",
        "'some text b '",
        "'x^'",
        "\"clang\"",
        "'| '",
        "f\"{square}x^{int(exponent-1)}\"",
        "\"Q....\"",
        "'c*33/100'",
        "\"\"\"Multiplying a given number by eight if it is an even number and by nine otherwise.\"\"\"",
        "'N'",
        "f\"{coeff * exp}x^{exp - 1}\"",
        "'moveE'",
        "\"......Q\"",
        "\"Q.......\"",
        "'75'",
        "'0*.$'",
        "\"....Q....\"",
        "'n'",
        "\"....Q...\"",
        "'no'",
        "'''\n         counter = 0\n         wasspace = 1\n         for char in s:\n             if char == \" \":\n                 wasspace = 1\n                 continue\n             if wasspace == 1:\n                 counter += 1\n                 wasspace = 0\n         return counter\n         '''",
        "\"cg\"",
        "\"\"\"two pointers. \u5728\u4e00\u4e2a\u5faa\u73af\u5b8c\u6210\u540e,[i-1,j]\u5fc5\u7136\u662f[0,j]\u4e2d\u6700\u77ed\u7684\n         \u7b26\u5408\u8981\u6c42\u7684\u533a\u95f4. \u6545i-1\u524d\u4f5c\u4e3a\u8d77\u70b9,j\u524d\u4f5c\u4e3a\u7ec8\u70b9\u7684\u533a\u95f4\u53ef\u4e0d\u8003\u8651,\n         \u5373\u622a\u6389i-1\u4e4b\u524d\u7684\u533a\u95f4.\"\"\"",
        "'F'",
        "\"reverse\"",
        "f'{result}x^{output}'",
        "'1'",
        "'remove'",
        "\"\"\" Capitalize passed string. \"\"\"",
        "'*nswe[]'",
        "'(t-7.5)*40/21'",
        "'box_i'",
        "'Ro'",
        "\"x\"",
        "'.'",
        "\"word\"",
        "f'{a}x^{b}'",
        "'#   #'",
        "'abcdefghijklmnopqrstuvwxyz'",
        "' #     '",
        "\"^\"",
        "'6'",
        "'.T'",
        "'aA'",
        "'o'",
        "\"\"\"\n    Floyd-Warshall\n    \"\"\"",
        "'''Author- Akshit Monga'''",
        "f'{coef*exp}x^{exp-1}'",
        "'''\nExample Input\n1\n3 3\n010\n000\n001\nExample Output\n1 0 1\n2 1 1\n1 1 0\n'''",
        "'01'",
        "\"{}x^{}\""
    ],
    "float": [
        "21.0",
        "1e6",
        "33.0",
        "459.67",
        "40.0",
        "1.25",
        "100.",
        "1.0",
        "491.67",
        "4.0",
        "1e9",
        "100.0",
        "0.0",
        "0.5",
        "3.0",
        "5.0",
        "273.15",
        "359.67",
        "7.5",
        "9.0",
        "2.0",
        "373.15",
        "10e7",
        ".5"
    ]
}
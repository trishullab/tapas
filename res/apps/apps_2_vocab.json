{
    "module_identifier": [
        "count",
        "heappush",
        "SortedSet",
        "Fraction",
        "re",
        "math",
        "stdout",
        "numpy",
        "mul",
        "add",
        "bisect_left",
        "permutations",
        "datetime",
        "cycle",
        "islice",
        "operator",
        "chain",
        "Enum",
        "sqrt",
        "log10",
        "OrderedDict",
        "takewhile",
        "Optional",
        "deque",
        "insort",
        "functools",
        "lru_cache",
        "SortedList",
        "heapq",
        "itertools",
        "copy",
        "floor",
        "bisect_right",
        "sub",
        "defaultdict",
        "wraps",
        "log",
        "zip_longest",
        "timedelta",
        "stdin",
        "sys",
        "Dict",
        "reduce",
        "factorial",
        "Counter",
        "sortedcontainers",
        "random",
        "deepcopy",
        "queue",
        "collections",
        "List",
        "enum",
        "Set",
        "heappop",
        "gcd",
        "bisect",
        "fractions",
        "array",
        "ascii_lowercase",
        "ceil",
        "regex",
        "typing",
        "PriorityQueue",
        "string",
        "groupby"
    ],
    "identifier": [
        "rsplit",
        "climb",
        "lcm",
        "delim",
        "replacing_rules",
        "ele",
        "t3",
        "R2_HIGH",
        "I",
        "data",
        "zip",
        "counter",
        "ft",
        "employee",
        "chunks",
        "pattern",
        "obj",
        "nCats",
        "hold",
        "minA",
        "__starting_point",
        "maxSizeSlicesBruteForce",
        "right_legs",
        "spell",
        "temp1",
        "KNOWN",
        "from_right",
        "searchR",
        "l2r",
        "row",
        "idx",
        "stk",
        "draw_spider",
        "pat",
        "drys",
        "K",
        "_size",
        "mem",
        "getMin",
        "tot",
        "find_min_greater",
        "presents",
        "other",
        "m",
        "sums",
        "w",
        "tmp",
        "indx_chk",
        "lenght",
        "cnts",
        "rvalue",
        "Fraction",
        "_gcd",
        "height",
        "_max",
        "s1",
        "answer",
        "np",
        "array_sort",
        "newlst",
        "busAccess",
        "countA",
        "rleg",
        "longestprefix",
        "ohmS",
        "y",
        "random",
        "inverted_list",
        "arrangement",
        "out",
        "ch",
        "ctlt",
        "hash2",
        "fr",
        "strip",
        "list_of_baubles",
        "new_l",
        "rq",
        "_",
        "last_rained",
        "type",
        "avoid",
        "s",
        "cd",
        "q0",
        "separator",
        "min_a",
        "factor_list",
        "weights",
        "idk",
        "nearest",
        "g2",
        "flag",
        "ra",
        "player_manager",
        "pairs_to_dict",
        "days_next",
        "val1",
        "x3",
        "unpac_lst",
        "lst_inverted",
        "binary_search",
        "i1",
        "pos_max",
        "num_doubles",
        "is_lucky",
        "rules",
        "computelps",
        "found",
        "bin",
        "curra",
        "k",
        "total_cost",
        "bit",
        "negb_frac",
        "get_num_ohms",
        "ZeroDivisionError",
        "len_s",
        "append",
        "firstSeen",
        "Set",
        "check",
        "LPS",
        "filled_at",
        "bisect_backward",
        "comment",
        "arr1",
        "letters",
        "P",
        "nPick",
        "STnum",
        "nn",
        "ls",
        "left_body",
        "leg",
        "candidate",
        "nxts",
        "R1_HIGH",
        "rbody",
        "rains",
        "numsegs",
        "do",
        "extra",
        "b0",
        "baubles",
        "page_size",
        "flush",
        "setrecursionlimit",
        "get",
        "aCb",
        "fin",
        "p1",
        "__ge__",
        "cell",
        "vertex_nums",
        "colors",
        "stdout",
        "permutations",
        "nthMagicNo",
        "tube_price",
        "minz",
        "getCeil",
        "r",
        "num_s",
        "to_list",
        "method2",
        "fold",
        "rank_2",
        "tests",
        "lleg",
        "u",
        "x_data",
        "value_at",
        "dfs",
        "new_lis",
        "traverse",
        "md",
        "cb",
        "link",
        "attempts",
        "mx",
        "num_chars",
        "lk",
        "R2_LOW",
        "inputString",
        "pop",
        "rainSched",
        "same_structure_as",
        "my_invert",
        "primes2",
        "islice",
        "val2",
        "start",
        "zfill",
        "new_s",
        "neighbors",
        "output_string",
        "leftN",
        "bording",
        "hours",
        "avoid_last",
        "sum_digits",
        "li_a",
        "res_left",
        "bitadd",
        "MOD",
        "req",
        "right_val",
        "group_string",
        "o",
        "part",
        "last_rain",
        "swimInWater",
        "mm",
        "next_pizza_slice",
        "open",
        "lstn",
        "memoized",
        "valsdone",
        "reverse",
        "lesser",
        "log",
        "polyPlus",
        "coeff",
        "max_len",
        "dec",
        "__mul__",
        "bit_length",
        "__next__",
        "div",
        "evalmap",
        "caught",
        "max_so_far",
        "Max",
        "needs_trailing_zero",
        "Array",
        "q3",
        "current_max",
        "groupby",
        "get_val",
        "fid",
        "fs",
        "max",
        "dic",
        "indexes",
        "bank",
        "next",
        "formatted",
        "limit",
        "right",
        "massD1",
        "hexdec",
        "bisect_right",
        "sentinel",
        "array_1",
        "x",
        "card_2_value",
        "cat",
        "new_list",
        "DisjointSet",
        "dpOff",
        "li",
        "inf",
        "a1",
        "lastp",
        "k1",
        "eaten",
        "powerset",
        "sortme",
        "grid",
        "bmin",
        "rainOnLake",
        "y_data",
        "temp",
        "appears",
        "rstring",
        "self",
        "new_sums",
        "polyAns",
        "pizza_slice",
        "minflip",
        "pairs",
        "v",
        "Y",
        "any",
        "itr",
        "dry_pos",
        "__le__",
        "great",
        "backtrack",
        "rest",
        "final_string",
        "digit",
        "listx",
        "slices1",
        "next_wet_day",
        "__add__",
        "f_alt",
        "mina",
        "evalvars",
        "__sub__",
        "funcs",
        "si",
        "first_element",
        "oscar",
        "next_ids",
        "adjacent_bus_tour",
        "vet",
        "readline",
        "var",
        "base_num",
        "players",
        "digits_old",
        "string",
        "rix",
        "next_next_pizza_slice",
        "available_dry_day",
        "fruta",
        "prefixHash",
        "dollar",
        "put",
        "char_list",
        "is_power2",
        "f0",
        "lar",
        "decopm",
        "free",
        "counts",
        "temp2",
        "dct_lk2day",
        "indx",
        "free_days_balance",
        "path",
        "first_item",
        "num1",
        "happy",
        "__neg__",
        "prev_pizza_slice_pos",
        "x1y1",
        "col",
        "smallest",
        "prev_pizza_slice",
        "print",
        "BIG",
        "gao",
        "currlength",
        "abs",
        "findLCM",
        "set1",
        "heap",
        "newq",
        "lis",
        "qsort",
        "avoidFlood",
        "iter",
        "join",
        "notPrime",
        "BOB",
        "vertex",
        "fullLake",
        "a0",
        "how_about_a_list",
        "body_size",
        "isolbelow",
        "done",
        "catchingDog",
        "op",
        "_binarySearch",
        "tc",
        "len",
        "find_nearest",
        "returnArray",
        "med",
        "card_1",
        "level",
        "left_i",
        "testcase",
        "str2",
        "moves",
        "a_1",
        "inverse_lst",
        "_count",
        "isBus",
        "operations",
        "root",
        "hit",
        "sep",
        "speed",
        "tube_fare",
        "node",
        "lastIndex",
        "memoize",
        "fnd",
        "deck",
        "primes",
        "Build",
        "arr3",
        "reduce",
        "sumDup",
        "next_lake_index",
        "KMP",
        "answer_list",
        "fsociety",
        "prev_pos",
        "gcdf",
        "compare",
        "hashtable",
        "returnArr",
        "key",
        "result_not_choose",
        "return_arr",
        "eachletter",
        "re",
        "multiplier",
        "no_rain",
        "stack",
        "A",
        "sm",
        "redWith2Blues",
        "bus",
        "rightIndex",
        "number2",
        "toTest",
        "journey",
        "all",
        "lst",
        "sa",
        "mod",
        "bsearch",
        "right_body",
        "ip_string",
        "tableau",
        "number_of_variables",
        "prev_idx",
        "update",
        "grid_index",
        "max_slice",
        "rota",
        "ctra",
        "Result1",
        "Result",
        "greater",
        "sol",
        "rev",
        "taken",
        "randrange",
        "words_sorted",
        "gcdl",
        "Ymin",
        "slicesN",
        "compute_lcm",
        "new_lst",
        "result_list",
        "uind",
        "nones",
        "mul",
        "letter",
        "tbd",
        "trumps",
        "str_lst",
        "zero_index",
        "longestPrefix2",
        "max_adj_sum",
        "partition",
        "k2",
        "vap",
        "wraps",
        "ds",
        "startVal",
        "find_gcd",
        "exps",
        "r2l",
        "lar_fac",
        "cmp",
        "judgeCircle",
        "printer",
        "rounds",
        "__str__",
        "last_idx",
        "tovisit",
        "reindeer",
        "test",
        "footer",
        "sunny",
        "p2",
        "min_elem",
        "gcd_l",
        "debug",
        "player",
        "dind",
        "min_value",
        "categories",
        "seats",
        "is_prime",
        "pivot",
        "binarySearch",
        "_len",
        "spells",
        "__",
        "ixd",
        "contact",
        "nest",
        "Match",
        "list",
        "vary",
        "bus_str",
        "evaluate",
        "ski_jump",
        "mi",
        "duplicates",
        "rfind",
        "__len__",
        "card_game",
        "hair",
        "tuple",
        "line1",
        "j",
        "find_zero_for_lake",
        "nums",
        "SortedSet",
        "cntb",
        "make_div_3",
        "deck_dict",
        "Identifier",
        "dbl_linear",
        "need",
        "intersection",
        "unused",
        "split_s",
        "symbol",
        "reference",
        "filled_lakes",
        "leg2",
        "objects",
        "str1",
        "instructions",
        "extend",
        "islist",
        "lcs",
        "sort",
        "chr",
        "mode",
        "hex",
        "special",
        "right_char",
        "mex",
        "brand",
        "_acc",
        "leng",
        "gcdiv",
        "str3",
        "rain_index",
        "b2",
        "trump",
        "firstElem",
        "dd",
        "c1",
        "n",
        "matrix",
        "carne",
        "data2",
        "cntr2",
        "slice2",
        "_cache",
        "ns",
        "bal",
        "bool",
        "Binary",
        "play",
        "binRota",
        "flatten",
        "top",
        "processed_number",
        "y4",
        "qsize",
        "beard",
        "zeros",
        "res2",
        "minHp",
        "bb",
        "valchecked",
        "polyTimes",
        "predicate",
        "st",
        "process",
        "invList",
        "possible_combo",
        "L",
        "rains_over_city",
        "min_word",
        "card_1_wins",
        "box",
        "character",
        "sn",
        "size",
        "list_s",
        "ct",
        "isinstance",
        "kills",
        "reversed",
        "instruction",
        "trunc",
        "get_flip",
        "to_choose",
        "fn",
        "color_digit",
        "check2",
        "ss",
        "zeros_indices",
        "min_b",
        "R",
        "cards",
        "last_flood",
        "logical_or",
        "recursive",
        "close",
        "fifteens",
        "alp",
        "chosen_day",
        "yi",
        "lower",
        "alist",
        "now",
        "input",
        "datetime",
        "slice1",
        "EOFError",
        "nAnd",
        "solve_linear",
        "fillval",
        "liste",
        "prev_prev_pizza_slice",
        "last_day_rains_over_lake",
        "record",
        "groceries",
        "minb",
        "groups",
        "maxSizeSlices",
        "booleans",
        "london_city_hacker",
        "jump",
        "sieve",
        "recent",
        "failure",
        "vars",
        "get_win",
        "filtered",
        "el1",
        "ord",
        "employees",
        "ar",
        "primes_degrees",
        "indices",
        "lbody",
        "initial_number",
        "po",
        "urgency",
        "RESISTOR_COLORS",
        "Person",
        "earliest_sunny_day",
        "n_bonacci",
        "choice",
        "e",
        "low",
        "version",
        "y2",
        "free_days",
        "position",
        "v1",
        "test_string",
        "candies",
        "lex",
        "minimum",
        "ceil",
        "MIN",
        "ints",
        "ushijima",
        "seat",
        "f2",
        "sum_even_fibonacci",
        "co",
        "poss2",
        "nq",
        "two",
        "bisect_forward",
        "flat",
        "suit_1",
        "band",
        "next_index_to_cap",
        "swapcase",
        "T",
        "last_rainy_day",
        "lst_invert",
        "comb",
        "currb",
        "stg",
        "expr",
        "output",
        "popleft",
        "popitem",
        "casefold",
        "num",
        "split",
        "dry_on_day_index",
        "_func",
        "N",
        "candy",
        "flooded",
        "maxEl",
        "collections",
        "rstrip",
        "prime",
        "rightD",
        "RESULTS",
        "pieces",
        "dict",
        "min_value2",
        "tmp_a",
        "zl",
        "passer_rating",
        "_bisect_forward",
        "Prime",
        "chain",
        "leftD",
        "functools",
        "rightN",
        "spares",
        "new_string",
        "chck",
        "massV_ind",
        "min_ind",
        "helper",
        "tmp_b",
        "args",
        "appendleft",
        "ng",
        "TR",
        "remaining",
        "calc",
        "ALICE",
        "expression",
        "codes",
        "new_arr",
        "found_numbers",
        "x1",
        "second",
        "xi",
        "numero",
        "dp2",
        "water_heap",
        "input_str",
        "suit_2",
        "dry_sequence",
        "make_hash",
        "results",
        "sign",
        "initialize",
        "happyNow",
        "instr",
        "suffixHash",
        "closestNumber",
        "firstsplit",
        "ans",
        "left_char",
        "rec",
        "ma",
        "q",
        "lv",
        "digits",
        "friend_find",
        "inst",
        "discard",
        "processed",
        "massD2_ind",
        "el",
        "list2",
        "a2",
        "minutes",
        "sorted_brands",
        "indexZ",
        "Count",
        "f3",
        "array1",
        "tokens",
        "Cur",
        "que2",
        "array_operations",
        "ascii_letters",
        "F",
        "OrderedDict",
        "C",
        "dp1",
        "sk",
        "hoursRest",
        "right_i",
        "l1",
        "max1",
        "maxSizeSlicesTopDown",
        "z",
        "yards",
        "m2",
        "pre",
        "yds",
        "ca",
        "zs",
        "rv",
        "slices2",
        "pow",
        "deal",
        "KMPSearch",
        "boys",
        "tiwari",
        "find_employees_role",
        "que0",
        "COLORS",
        "ValueError",
        "__delitem__",
        "xor_a",
        "xy",
        "exoskeletons",
        "summax",
        "pizza_slices_left",
        "SortedList",
        "mylist",
        "double_total",
        "startswith",
        "evalints",
        "rem",
        "nextRain",
        "numbers",
        "Cook",
        "get_weight",
        "tmp_acc",
        "bisect",
        "facti",
        "jewels",
        "dryDays",
        "hashmap",
        "decrease",
        "fives",
        "starred_word",
        "bus_fare",
        "format_words",
        "system",
        "math",
        "sec",
        "min_string",
        "u0",
        "sqrt",
        "num_digits",
        "a",
        "Q",
        "masks",
        "m1",
        "check1",
        "sum1",
        "unique",
        "only_one",
        "it",
        "result_choose",
        "cakes",
        "t",
        "DNA_strand",
        "set",
        "STfire",
        "KEY",
        "countB",
        "day",
        "high",
        "invert",
        "valid",
        "remove",
        "nCommas",
        "zix",
        "full",
        "combine",
        "maxf",
        "num2",
        "isnumeric",
        "islower",
        "to_string",
        "capitalize",
        "four",
        "y_dsec_rate",
        "expIndices",
        "sorting",
        "inp",
        "inlist",
        "newliste",
        "maxsize",
        "Trie",
        "total",
        "maxx",
        "func",
        "item",
        "last_indx",
        "ind",
        "offset",
        "cap_s",
        "hour",
        "fib",
        "girls",
        "nidx",
        "enumerate",
        "_bisect_backward",
        "winner",
        "REQUIRE",
        "translation",
        "final",
        "d2",
        "length",
        "next_lake_day",
        "tbl",
        "numMusicPlaylists",
        "total_products",
        "char",
        "__gt__",
        "max_sum",
        "gcdOfStrings",
        "eleD",
        "some_list",
        "Data",
        "cur",
        "freeDays",
        "tab",
        "tdp",
        "acc",
        "inv",
        "cal",
        "ctrb",
        "dedupe",
        "t4",
        "strn",
        "new_word",
        "scntr",
        "itertools",
        "checkPalindrome",
        "H",
        "subtract",
        "cc",
        "dictionary",
        "float",
        "transform",
        "queue",
        "midIndex",
        "h",
        "prm",
        "repeat",
        "cur_less_than",
        "polyElement",
        "lst1",
        "get_color",
        "full_lakes",
        "distance",
        "res",
        "li_b",
        "communication_module",
        "bools",
        "bucket",
        "ratings",
        "card_2_wins",
        "pi",
        "end",
        "isalnum",
        "fact",
        "hash_left",
        "branches",
        "array_int",
        "players_list",
        "closest",
        "nex",
        "solve",
        "data1",
        "final_arr",
        "lastrain",
        "primel",
        "prebit",
        "no_2",
        "mul3",
        "solve_runes",
        "pos",
        "dc",
        "dog",
        "dogs",
        "PRICES",
        "ilist",
        "fgcd",
        "last",
        "color_map",
        "color1",
        "reach",
        "mediantN",
        "multi",
        "prod",
        "__repr__",
        "E",
        "TrieNode",
        "groce",
        "v2",
        "replace",
        "new_multiplier",
        "stop",
        "thearr",
        "even_fib",
        "edges",
        "integers",
        "hi",
        "AttributeError",
        "result",
        "heappush",
        "queue_index",
        "fibonacci",
        "add",
        "build_or_buy",
        "Enum",
        "ohms",
        "fillvalue",
        "td",
        "qval",
        "extra_right",
        "Exception",
        "binomial",
        "cats",
        "B",
        "zip_longest",
        "deadline",
        "joiner",
        "decomp",
        "from_left",
        "rained",
        "round",
        "denominator",
        "curr_mex",
        "f",
        "contender",
        "xs",
        "time",
        "zeroes",
        "chiffre",
        "listy",
        "lakesFull",
        "TestSolution",
        "Xmax",
        "prev_rain",
        "guesses",
        "ip",
        "function",
        "parse",
        "dry_day",
        "isLess",
        "MULTIPLIER",
        "checkto",
        "cycle",
        "takewhile",
        "largest_factor",
        "deque",
        "modexp",
        "permPrime",
        "make",
        "min",
        "negative_list",
        "factorial",
        "encode_resistor_colors",
        "solved",
        "orig",
        "sortedcontainers",
        "tracker",
        "arr2",
        "found_zero",
        "facs",
        "gcd",
        "c",
        "dry_days",
        "regex",
        "most_common",
        "inverse_list",
        "merge",
        "count",
        "msg",
        "header",
        "fairy",
        "prefix",
        "que1",
        "nb",
        "to_drain",
        "track",
        "temp_str",
        "flips",
        "dry",
        "minute",
        "query",
        "new_dp1",
        "x_asc_rate",
        "availables",
        "setup",
        "isprime",
        "SumEvenFibonacci",
        "options",
        "convert",
        "b",
        "comp",
        "format",
        "S",
        "initial_product",
        "drying_strategy",
        "solution",
        "r_leg",
        "Poly",
        "option",
        "newstring",
        "heapq",
        "dct",
        "s_list",
        "fizz",
        "pq",
        "clean_string",
        "ys",
        "index",
        "fi",
        "locs",
        "mp",
        "base",
        "i3",
        "longestPrefix",
        "l",
        "bisect_left",
        "nbin",
        "test_case1",
        "intersperse",
        "right_s",
        "log10",
        "isalpha",
        "curr",
        "maxfact",
        "floods",
        "first_0",
        "priority",
        "inner",
        "sys",
        "drydays",
        "f_val",
        "ls2",
        "element",
        "case",
        "tvl",
        "bitsum",
        "lst2",
        "heappop",
        "inverse",
        "array",
        "poly_spec",
        "setdefault",
        "num_zero",
        "diff",
        "ab",
        "thing",
        "axx",
        "rain_days",
        "boys_index",
        "empty",
        "last_appear",
        "ln",
        "event",
        "threes",
        "get_maxsubseq",
        "fizzbuzz",
        "positives",
        "card_1_value",
        "entry",
        "newx",
        "endswith",
        "curr_day",
        "cnd",
        "ps",
        "kmp",
        "__setitem__",
        "precedence",
        "binary",
        "rain",
        "maxVal",
        "wet_lake",
        "R1_LOW",
        "interceptions",
        "lis3",
        "from_iterable",
        "maxq",
        "levels",
        "lake_to_days",
        "locations",
        "__init__",
        "ind_new",
        "numpy",
        "extra_left",
        "miny",
        "leo",
        "seti",
        "value",
        "x2",
        "variables",
        "reqs",
        "dna",
        "children",
        "gcd_fd",
        "linear",
        "day_to_dry_lake",
        "nodes",
        "r2",
        "drying",
        "has_rained",
        "right_multiplier",
        "is_isogram",
        "diviser",
        "elem",
        "nxt",
        "tube",
        "randint",
        "words",
        "match",
        "range",
        "ret",
        "zero_lake",
        "best",
        "todry",
        "loop",
        "products",
        "structure",
        "tolerance",
        "wrapped",
        "lr",
        "category",
        "lru_cache",
        "sub",
        "sunny_days",
        "gcd_arr",
        "eye",
        "upper",
        "cnt",
        "nextstack",
        "memo",
        "mult",
        "posssible_combo",
        "ex",
        "translate",
        "leg_size",
        "plrs",
        "lo",
        "INSTRUCTIONS",
        "manager",
        "mouth",
        "rank_1",
        "indeks",
        "ME",
        "_default",
        "indexY",
        "items",
        "Solution",
        "o1",
        "leg1",
        "val",
        "current_min",
        "mid",
        "floor",
        "aux",
        "pw",
        "lstrip",
        "amin",
        "history",
        "freeday",
        "you",
        "neg",
        "isdigit",
        "pagination_text",
        "phrase",
        "wet",
        "office",
        "color3",
        "str",
        "cm",
        "eval",
        "score",
        "tyagibagi",
        "baubles_on_tree",
        "vehicle",
        "catch",
        "won",
        "operator",
        "c2",
        "lake",
        "valToInt",
        "spi",
        "values",
        "new",
        "dtype",
        "outro",
        "sLen",
        "Counter",
        "ORDERS",
        "vl",
        "D",
        "split_string",
        "test_case2",
        "txt",
        "suff",
        "avoidFloodBacktrack",
        "r_body",
        "new_array",
        "d",
        "to",
        "best_left",
        "who",
        "chosen_lake_day",
        "ope",
        "retrieved_val",
        "d1",
        "mountain",
        "rains_dict",
        "minB",
        "symbols",
        "one",
        "DoublyLinkedListNode",
        "elems",
        "search",
        "default",
        "y_exist",
        "__gcd",
        "n_picks",
        "cents",
        "cases",
        "hash1",
        "INF",
        "dpOn",
        "num_list",
        "legs",
        "city",
        "b1",
        "dry_on_day",
        "insort",
        "dig_1",
        "next_primes",
        "startPos",
        "eyes",
        "move",
        "left_s",
        "arbitrate",
        "sunny_day_idx",
        "mediantD",
        "ticket",
        "first_ele",
        "group_groceries",
        "LCM",
        "keys",
        "factors",
        "arr4",
        "back",
        "chosen_lake_index",
        "urgent",
        "y3",
        "data2R",
        "MAX",
        "numerator",
        "two_sort",
        "argmin",
        "race",
        "hii",
        "negatives",
        "line",
        "text",
        "poss3",
        "slices_nodes",
        "cache",
        "visited",
        "par",
        "titi",
        "BIT",
        "flags",
        "Number",
        "number",
        "findall",
        "PriorityQueue",
        "sum",
        "seconds",
        "Solution2",
        "lf",
        "cnta",
        "long",
        "product",
        "lake_drying_days",
        "parsed",
        "Ans",
        "resultado",
        "build",
        "arr",
        "bus_counter",
        "te",
        "map",
        "emptystring",
        "sentence",
        "NUM",
        "rv2",
        "List",
        "sy",
        "q2",
        "left_val",
        "R_LEGS",
        "cur_max",
        "MAXX",
        "countg",
        "myList",
        "nnn",
        "qq",
        "o2",
        "massD1_ind",
        "ll",
        "_check",
        "buf",
        "zero",
        "timedelta",
        "count_find_num",
        "main",
        "uni",
        "bol",
        "testNums",
        "alternate_sort",
        "small",
        "listan2",
        "x_exist",
        "dp",
        "multiplyList",
        "complex",
        "new_str",
        "N0",
        "packet",
        "tour",
        "primesL",
        "ctr",
        "tulos",
        "divmod",
        "r1",
        "al",
        "lakes",
        "buzz",
        "word",
        "vertex_set",
        "could_dry",
        "power_law",
        "required",
        "pp",
        "longestPrefix_bychance_Brute",
        "p",
        "merkki",
        "false",
        "tnum",
        "jumpLength",
        "att",
        "makedict",
        "__import__",
        "notplayed",
        "bus_price",
        "picked",
        "fromkeys",
        "ini",
        "poss",
        "SegmentTree",
        "fibfusc",
        "prio",
        "flat_list",
        "name",
        "gc",
        "defaultdict",
        "id",
        "LX",
        "dirs",
        "original",
        "slices",
        "countb",
        "car",
        "isupper",
        "DFS",
        "table2",
        "dig_2",
        "to_empty",
        "jk",
        "trim",
        "length_of_str",
        "filter",
        "max_prefs",
        "group",
        "STval",
        "NINF",
        "ohms_string",
        "int",
        "lst_m",
        "left",
        "pd",
        "news",
        "list1",
        "saved",
        "ix",
        "sl",
        "no",
        "M",
        "filled",
        "questions",
        "diamonds_and_toads",
        "body",
        "binom",
        "days",
        "choose",
        "maketrans",
        "up",
        "t1",
        "hash_right",
        "zero_indices",
        "used",
        "get_sum_of_digits",
        "REGEX_NUMBERS",
        "new_dp",
        "otput",
        "step",
        "true",
        "touchdowns",
        "mn",
        "accumulate",
        "next_pizza_slice_pos",
        "prices",
        "last_ids",
        "LEG",
        "ptr",
        "massD2",
        "fac",
        "str_diviser",
        "cntr",
        "m_list",
        "basicCalculatorIV",
        "target",
        "day_rev",
        "lind",
        "chars",
        "x2y2",
        "sorted",
        "fix",
        "sz",
        "toList",
        "dries",
        "lfact",
        "color2",
        "pair",
        "compute_gcd",
        "res_sum",
        "fnum",
        "let",
        "f1",
        "rb",
        "prev",
        "desc_len",
        "maxim",
        "calc_str",
        "str_num",
        "dnaComplement",
        "cap",
        "aa",
        "create_list",
        "replace_letters",
        "poly",
        "_query",
        "newy",
        "suffix",
        "i2",
        "vals",
        "kind",
        "X",
        "idxs",
        "fill",
        "leftIndex",
        "n2",
        "test_case",
        "max_index",
        "maxi",
        "token",
        "clear",
        "__getitem__",
        "LY",
        "i",
        "page_number",
        "no_1",
        "color_bands",
        "left_legs",
        "completions",
        "pr",
        "findLHS",
        "ast",
        "cross_multiply",
        "cn",
        "di",
        "newStr",
        "test_cases",
        "brands",
        "stdin",
        "xor",
        "write",
        "mx_i",
        "nx",
        "l2",
        "factorize",
        "runes",
        "hcf",
        "pro",
        "highest_pos",
        "EMPLOYEES_ROLES",
        "width",
        "lake_index",
        "number_of_words",
        "get_pre",
        "lps",
        "__lt__",
        "jump_length",
        "q1",
        "new_dp2",
        "idxDry",
        "mat",
        "negative",
        "chain_rain",
        "positive",
        "el2",
        "lmtbf",
        "hand",
        "seq",
        "mmm",
        "lake_tracker",
        "next_rain",
        "free_day",
        "y1",
        "object",
        "rv1",
        "inverted",
        "farey_seq",
        "pref",
        "vegetal",
        "L_LEGS",
        "polyMinus",
        "to_decimal",
        "CATEGORIES",
        "sin",
        "my_list",
        "g",
        "xori",
        "n1",
        "res_right",
        "power",
        "massV",
        "toReturn",
        "pizza_slice_pos",
        "lstCopy",
        "d_next",
        "first",
        "t2",
        "table",
        "sort_list",
        "ordinal",
        "rst",
        "caracter",
        "positive_list",
        "table1",
        "find",
        "len_lak",
        "eval_string",
        "ti",
        "IndexError",
        "snumber",
        "dollars",
        "card_2",
        "seen",
        "insert",
        "makeGood",
        "s2",
        "lis2"
    ],
    "integer": [
        "4",
        "15",
        "65",
        "1000000007",
        "0",
        "2",
        "100",
        "51",
        "53456",
        "5",
        "9",
        "86",
        "7",
        "14",
        "0x3f3f3f3f",
        "11",
        "1000001",
        "180",
        "58",
        "111111111",
        "999",
        "99999",
        "10",
        "87",
        "64",
        "31",
        "200",
        "25",
        "60",
        "8",
        "3600",
        "1000000",
        "300",
        "1000005",
        "100000",
        "256",
        "13",
        "100001",
        "499980",
        "16",
        "128",
        "56",
        "29",
        "68",
        "101",
        "20",
        "21",
        "41",
        "12",
        "10000000",
        "50",
        "69",
        "10000",
        "48",
        "9999",
        "26",
        "100000000",
        "1000009",
        "18",
        "19134702400093278081449423917",
        "100000007",
        "65536",
        "123",
        "1000",
        "33",
        "10001",
        "181",
        "110000",
        "88",
        "6",
        "3",
        "30",
        "8589934592",
        "40",
        "499990",
        "999999999",
        "97",
        "1",
        "32"
    ],
    "string": [
        "'7'",
        "'Sparks'",
        "\"/\u2572%s%s%c%s%s\u2571\\\"",
        "f\"The {['first','second'][eval(fn)]} card won.\"",
        "\"/\u2572\"",
        "'''\n        [1,0,2,0,2,1]\n        for lake2 we need to find sunny_day_idx between 2 - 4\n        sunny_day_idx=[1,4] is a increasing array\n        use binary search to find minimum value between prev_day and curr_day\n        \n        '''",
        "'3\u2666'",
        "'Ollie'",
        "'8\u2663'",
        "'''\nclass Solution:\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n        n = len(rains)\n        ret = []\n        def dfs(i, has_water, ans):\n            i#print(i, has_water,ans)\n            nonlocal ret\n            if ret: return\n            if i == n:  ret = ans; return \n            if rains[i] in has_water:  return \n            if rains[i]:  dfs(i+1, has_water|set([rains[i]]), ans+[-1])\n            else:\n                if not has_water: dfs(i+1, has_water, ans+[1])\n                for lake in has_water:\n                    has_water.remove(lake)\n                    dfs(i+1, has_water, ans+[lake])\n                    has_water.add(lake)\n        dfs(0, set(), [])\n        return ret\n                    \n'''",
        "f'{lleg}{lbody}{eye}{mouth}{eye}{rbody}{rleg}'",
        "\"\"\"\n        We only care about the lakes that receive rain multiple times\n        \n        Those lakes will need to, ideally, be drained prior\n        \n        When we see a repeat --- we need to find the first \"Dry\" after the last\n        and pop it\n        \"\"\"",
        "'Peter'",
        "\" \"",
        "' dna '",
        "'4\u2660'",
        "'Hamm'",
        "'second'",
        "'Sales Assistant'",
        "\"0123456789\"",
        "f'{c}:{\",\".join(sorted(d[c]))}'",
        "\" and \"",
        "\"bug(?!s)\"",
        "'Q\u2663'",
        "'Yes'",
        "\"C3D9\"",
        "' == '",
        "\"(((\"",
        "'C3D9'",
        "\"Let us play again.\"",
        "\"bwsg\"",
        "\"player\"",
        "'Showing {} to {} of {} Products.'",
        "'5\u2666'",
        "'settlement'",
        "\"The first card won.\"",
        "'\u00a3{:.2f}'",
        "'Leo finally won the oscar! Leo is happy'",
        "'Grandma, we will have to buy a Christmas tree first!'",
        "'10'",
        "'7\u2666'",
        "'green'",
        "', '",
        "'2\u2666'",
        "f\"\u00a3{sum(prices):.2f}\"",
        "\"((\"",
        "\"***\"",
        "\"bu_gs\"",
        "\"re\"",
        "' ,'",
        "\"Too many presents\"",
        "'o'",
        "'bw'",
        "'Initially, all lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water.'",
        "\"\"\"\n[1,2,3,4]\nrain[i] = 0 -> \u62bd\u6c34\u65e5\n    dryDay.insert(i)\nrain[i] = x\n1) x is empty: fill[x] = i\n2) x is full: when to drain x?\n    must be in dryDays\n    must be later than fill[x]\n    \n      1  2  3  4  5  6\nfill  x     y     x \ndryD     -     x \n\n\n\"\"\"",
        "'9\u2665'",
        "'Brown'",
        "'%s*%s'",
        "\"development\"",
        "'?'",
        "'c2[-1]==t'",
        "\"g\"",
        "'6\u2663'",
        "'.?#'",
        "'Warehouse Manager'",
        "\"))\"",
        "\">\"",
        "'Your country has an infinite number of lakes.'",
        "'5\u2665'",
        "'role'",
        "'H'",
        "\"A\"",
        "\"The second card won.\"",
        "'Jesse'",
        "'crystal'",
        "'S'",
        "'vegetable'",
        "'''\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n        from bisect import bisect_left\n        wet = {}\n        ans = [1]*len(rains)\n        dry = []\n        for k in range(len(rains)):\n            if not rains[k]:\n                dry.append(k)\n            else:\n                ans[k] = -1\n        for k in range(len(rains)):\n            if rains[k] > 0:\n                if rains[k] not in wet:\n                    wet[rains[k]] = k\n                else:\n                    index = bisect_left(dry, wet[rains[k]])\n                    if index == len(dry) or dry[index] > k:\n                        return []\n                    wet[rains[k]] = k\n                    ans[dry[index]] = rains[k]\n                    dry.pop(index)\n        return ans\n    '''",
        "'''\r\n\r\n                            Online Python Compiler.\r\n                Code, Compile, Run and Debug python program online.\r\nWrite your code in this editor and press \"Run\" button to execute it.\r\n\r\n'''",
        "\"Showing %d to %d of %d Products.\"",
        "\"No\"",
        "'T'",
        "'|'",
        "f\"{d['first_name']} {d['last_name']}\"",
        "r\"(?P<name>[a-zA-Z ]+), (?P<number>[0-9]+)\"",
        "\"\"\"initialize the segment tree with data\"\"\"",
        "'Showing '",
        "\"\u2571\\\\\"",
        "'yellow'",
        "\"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"",
        "f'{e}***'",
        "\"fruit meat other vegetable\"",
        "\"{}{}{}{}{}{}{}\"",
        "\"-\"",
        "''' returns a list of prime factors of n.\n    ex. factorize(24) = [2, 2, 2, 3]\n    source: Rossetta code: prime factorization (slightly modified)\n    http://rosettacode.org/wiki/Prime_decomposition#Python:_Using_floating_point\n    '''",
        "\"\"\"func of data[start, stop)\"\"\"",
        "\"?\"",
        "'joker'",
        "'YES'",
        "\"...\"",
        "\"blue\"",
        "'''#include <bits/stdc++.h> \n#include <math.h> \nusing namespace std; \n\nmain(){\n    long long a=pow(2,1000000000000000000,8589934592);\n    printf(\"%lld\",a);\n}'''",
        "'YES\\n1'",
        "\"city\"",
        "\"{:.2f}{:s}\"",
        "f\"{' '.join(COLORS.get(x) for x in ohms[:2])} {COLORS.get(str(len(ohms[2:]) - 2))} gold\"",
        "'Q\u2660'",
        "\"-1\"",
        "' - '",
        "'0'",
        "'1000000'",
        "\", \"",
        "r'([^\\d]|\\b)0\\d+'",
        "\"[0-9]{1}\"",
        "' '",
        "\"first\"",
        "\" metres: Gold!!\"",
        "'J\u2660'",
        "'h'",
        "'4\u2666'",
        "\"^\"",
        "\"...and it's also not a bug.\"",
        "'bg'",
        "r\"(^0|^(-0))[0-9]+\"",
        "'Admin'",
        "'bug(?!s)'",
        "'When will you give Leo an Oscar?'",
        "'\u00a3'",
        "'6\u2666'",
        "r'[^#]((?R)*)#+|\\A#+'",
        "'blue'",
        "f\"{lenght:0.2f} metres: He's flying!\"",
        "'python'",
        "'''\nfor nn in xrange(1,n+1) :\n    for mm in xrange(1,m+1) :\n        if cc <= c :\n            print \"2\",\n            print nn,nn,mm,mm\n            sys.stdout.flush()\n            matrix[nn][mm] = int(raw_input())\n            cc += 1\n        else :\n            break\n    if cc > c :\n        break\n###print matrix'''",
        "\"5\"",
        "'Trainee'",
        "\"He's flying!\"",
        "\"joker\"",
        "'abcdefghijklmnopqrstuvwxyz'",
        "'3\u2665'",
        "'K\u2660'",
        "'W'",
        "r'[^a-zA-Z]'",
        "\"8\"",
        "'UDLR'",
        "\"He's ok!\"",
        "\"osg\"",
        "'10\u2660'",
        "'white'",
        "f\"\u00a3{tube_price + bus_price:.2f}\"",
        "\"ATCG\"",
        "r'([0-9\\.]+)([kM])?(.*)'",
        "'''\n    def avoidFlood(self, rains: List[int]) -> List[int]:\n        from sortedcontainers import SortedList\n        wet = {}\n        ans = [1]*len(rains)\n        dry = SortedList()\n        for k in range(len(rains)):\n            if not rains[k]:\n                dry.add(k)\n            else:\n                ans[k] = -1\n        for k in range(len(rains)):\n            if rains[k] > 0:\n                if rains[k] not in wet:\n                    wet[rains[k]] = k\n                else:\n                    index = dry.bisect_left(wet[rains[k]])\n                    if index == len(dry) or dry[index] > k:\n                        return []\n                    wet[rains[k]] = k\n                    ans[dry[index]] = rains[k]\n                    dry.pop(index)\n        return ans\n    '''",
        "'first'",
        "'Carmel'",
        "\"/\\\\%s%s%c%s%s/\\\"",
        "'ruby'",
        "\"{} {} {} gold\"",
        "'last_name'",
        "'gold'",
        "'1000'",
        "f'{\", \".join(words[:-1])} and {words[-1]}'",
        "\"\u2571\u2572%s%s%c%s%s\u2571\u2572\"",
        "r'f(\"\\1\")'",
        "\"road\"",
        "'Someone cheats.'",
        "'Bell'",
        "\"collections\"",
        "'rcRC'",
        "f\"{l:.2f} metres: {comment}!\"",
        "r'\\(|\\)|[a-z]+|[0-9]+|[\\+\\-\\*]'",
        "'R'",
        "'''\n        [1,2,0,0,2,1]\n        day0 rains on lake1\n        day1 rains on lake2\n        day2 sunny\n        day3 sunny\n        day4 rains on lake1\n        day5 rains on lake2\n        \n        '''",
        "'Truck Driver'",
        "\"fruit\"",
        "' to '",
        "\"\"\" Will oscar go to Leonardo DiCaprio? \"\"\"",
        "r'\\d{6}'",
        "'*1E6'",
        "'math'",
        "\"a\"",
        "r'(0*1)?(.*)'",
        "'The first card won.'",
        "'city'",
        "' Products.'",
        "'x'",
        "'dna '",
        "\"crystal\"",
        "\"6\"",
        "f'Case {i[0]}: {i[1]}'",
        "\"When will you give Leo an Oscar?\"",
        "'2 3 4 5 6 7 8 9 10 J Q K A'",
        "'k'",
        "\")\"",
        "\"(\"",
        "\"|J\"",
        "\"\\n\"",
        "f\"{s}{r}\"",
        "'ooogg'",
        "'Oops'",
        "\"second\"",
        "'V'",
        "'Receptionist'",
        "\"F\"",
        "f\"{l:.2f} metres: {msg[(l>10)+(l>25)+(l>50)]}\"",
        "f\"\u00a3{sum(2.4 * len(list(l)) if k is str else (len(list(l)) + 1) // 2 * 1.5 for k,l in groupby(journey, type)):.2f}\"",
        "'3\u2660'",
        "'evil'",
        "'.'",
        "f\"{jump_length:.2f} metres: He's ok!\"",
        "'2345678910JQKA'",
        "\"bb\"",
        "'9'",
        "'A\u2666'",
        "\"({} {} {})\"",
        "'n'",
        "\"bw\"",
        "'Leo got one already!'",
        "'squirrel'",
        "'''\n            for a given string 'elkmmmelk', prefix elk will be hashed in ascending order.\n            e: 'e': hash[e] = ord(e)\n            l: 'el': hash[el] = hash(e)*128 + ord(l)\n            k: 'elk': hash[elk] = hash(el)*128 + ord(k)\n            which translates to (l * 128 + ord(s[i]))\n\n            suffix elk will be hashed in descending order\n            k: 'k': hash[k] = ord(k)\n            l: 'lk': hash[lk] = ord(k) + ord(l) * 128\n            e: 'elk': hash[elk] = ord(k) + ord(l) * 128 + ord(e) * 128^2\n            which translates to r + pow(128, i, mod)\n            '''",
        "'''\n         construct a 2d dp[i][j] where i is i different songs and\n         j is the length of the playlist, also track the remaining songs r:\n         for dp update, we have two options:\n         if i <= k:\n            1. add a new song to the list, r -= 1\n         else:\n            if r > L-j\n                1. add a new song to the list, r -= 1\n                2. add an existing song\n            else:\n                1. add a new song\n         '''",
        "f\"{card_1}{card_2}\"",
        "\"0\"",
        "r'bug(?!s)'",
        "f'{category}:{\",\".join(sorted(products))}'",
        "'re'",
        "'r'",
        "'0F12'",
        "\"road settlement city development\"",
        "'2\u2663'",
        "'{:0{}b}'",
        "'d'",
        "\"T\"",
        "'{}:{}'",
        "'f'",
        "\"\"\" Get the additive inverse of each number in given list. \"\"\"",
        "'*1000'",
        "\"3\"",
        "'==00'",
        "'9\u2666'",
        "\"\"\"\n        #O(n^2) working sol\n        ans = [1 for i in range(len(rains))]\n        d = collections.defaultdict(int)\n        d[0]=0\n        \n        for i in range(len(rains)):\n            d[rains[i]]+=1\n            if rains[i]==0:\n                #look for the nearest value that exists in the dict we got\n                for x in range(i+1,len(rains)):\n                    if rains[x] in d and not rains[x]==0:\n                        #print(d,d[rains[x]],rains[x])\n                        d[0]-=1\n                        ans[i] = rains[x]\n                        d[rains[x]]-=1\n                        if d[rains[x]]==0: del d[rains[x]]\n                        break\n            else:\n                #you gotta get out early of a bad pattern that cannot be salvaged\n                if d[rains[i]]>1:\n                    return []\n                ans[i] = -1\n        \n        return ans\n        \"\"\"",
        "'Tori'",
        "'fruit meat other vegetable'",
        "'*1E3'",
        "'9\u2660'",
        "f'FFFF{str(res).zfill(4)}0000'",
        "\"Index out of range\"",
        "'3'",
        "'5\u2663'",
        "'zeeediiihooooonuuuuutaaaaa'",
        "r'(0|-?[1-9?][0-9?]*)'",
        "' ohms'",
        "'K\u2666'",
        "f\"{distance:.2f} metres: He's ok!\"",
        "'grey'",
        "r\"\\d+\\.?\\d*\"",
        "\"1\"",
        "'d.index(c1[:-1])<d.index(c2[:-1])'",
        "' and '",
        "\"\"\"\n         :type ratings: List[int]\n         :rtype: int\n         \"\"\"",
        "\"^ ^\"",
        "'Products.'",
        "'LRUD'",
        "\"Not even for Wolf of wallstreet?!\"",
        "\"Case {}: {}\"",
        "'The second card won.'",
        "\"/\u2572 \u2571\\\\\"",
        "\" metres: \"",
        "\"=\"",
        "'FFFF'",
        "'10\u2663'",
        "'sS'",
        "\"b1u2g3s\"",
        "\"t\"",
        "'No'",
        "'t'",
        "'Anna'",
        "'Boss'",
        "'bug'",
        "'{seq} and {last}'",
        "'Z'",
        "f'{ L_LEGS[legs] }{ \"(\"*body }{ eyes }{ mouth }{ eyes }{ \")\"*body }{ R_LEGS[legs] }'",
        "\"NO\\n\"",
        "'ohms'",
        "'cC'",
        "f\"The {winner} card won.\"",
        "\"vegetable\"",
        "\"first_name\"",
        "\"Yes\"",
        "f\"{x:.2f} metres: {y}!\"",
        "'***'",
        "'''\nLogics:\nWe dry lakes in the order of urgency - Greedy.\nIterating through days, when day i is raining on lake lake, if lake is already full, simply return []; else, push the next raining day for lake to to_empty to queue it for drying.\nWhen day i is sunny, dry the most urgent lake referring to to_empty. Remember to remove it from full.\n        '''",
        "'bugs'",
        "'black brown red orange yellow green blue violet gray white'",
        "'4'",
        "\"Leo got one already!\"",
        "'aeiou'",
        "'\\n'",
        "\"good\"",
        "'1234567890'",
        "'='",
        "'O'",
        "'A\u2660'",
        "'F'",
        "'5\u2660'",
        "'c'",
        "'['",
        "'%s %s %s gold'",
        "'%sFFFF%04i0000%s'",
        "'....'",
        "\")))\"",
        "'other'",
        "'''\n    first we sort the array by sort() function :->\n    and then we will take its first element and use it to get output :->\n    '''",
        "'2\u2665'",
        "'A'",
        "'####'",
        "'J|'",
        "' + '",
        "'3\u2663'",
        "'A\u2663'",
        "'maxi'",
        "\"25\"",
        "\"|\"",
        "\"%.2f\"",
        "'''fruit:{}\nmeat:{}\nother:{}\nvegetable:{}'''",
        "'Hepburn'",
        "']'",
        "'Y'",
        "'On each dry day you may choose to dry one lake.'",
        "\"red\"",
        "'/\\\\'",
        "\"\"\"\n            using deque canDry to store the possible days that can be used to dry a lake\n            using hasRain to store the lake : day pairs\n            update rules:\n                1) if lake rains[i] rains on day i, check if it has rained before or not\n                    if it has rained before, check if there is a way to dry it \n                        binary search the interval between two rain days\n                    if there is no way to dry it, return []\n                2) if there is no rain on day i, put i in canDry\n        \"\"\"",
        "\"The {} card won.\"",
        "'B7A2'",
        "'l'",
        "'Sales Manager'",
        "'10\u2665'",
        "'Q'",
        "'Ross'",
        "f\"{distance:.2f} metres: Gold!!\"",
        "'red'",
        "'A\u2665'",
        "'u'",
        "\"B7A2\"",
        "'8'",
        "'Your goal is to avoid flood.'",
        "'brown'",
        "' gold'",
        "'(^|[+\\-*=])\\?[?\\d]'",
        "'Saunders'",
        "f'{k}:{\",\".join(sorted(v))}'",
        "\"\"\"\n         :type expression: str\n         :type evalvars: List[str]\n         :type evalints: List[int]\n         :rtype: List[str]\n         \"\"\"",
        "f\"{distance:.2f} metres: He's crap!\"",
        "'Jones'",
        "\"Someone cheats.\"",
        "' * '",
        "'-?'",
        "'c2==\"joker\"'",
        "r'(-?[0-9?]+)([-+*])(-?[0-9?]+)=(-?[0-9?]+)'",
        "'234567891JQKA'",
        "\"SegmentTree({0})\"",
        "'*'",
        "f\"{b}{x}***\"",
        "\"()*+-\"",
        "\"meat\"",
        "f'\u00a3{s:.2f}'",
        "f\"{lenght:0.2f} metres: He's crap!\"",
        "\"YES\\n\"",
        "\"He's flying\"",
        "f'\u00a3{round(s,2):.2f}'",
        "\"NO\"",
        "'7\u2663'",
        "\"D\"",
        "\"&\"",
        "r'{n}([-+*]){n}={n}$'",
        "\"\"",
        "'K\u2665'",
        "'K'",
        "'8\u2666'",
        "f'\u00a3{total_cost:.2f}'",
        "'violet'",
        "''' returns a list of prime numbers upto limit.\n    source: Rossetta code: Sieve of Eratosthenes\n    http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above\n    '''",
        "\"He's ok\"",
        "\"TAGC\"",
        "'osg'",
        "'z'",
        "'+-*'",
        "'4\u2665'",
        "\"Grandma, we will have to buy a Christmas tree first!\"",
        "'...'",
        "f'\u00a3{str(sum)}0'",
        "'first_name'",
        "\"G\"",
        "'P'",
        "'a'",
        "\"\u2571\u2572 \u2571\u2572\"",
        "'Not even for Wolf of wallstreet?!'",
        "\"file\"",
        "r'\\b0\\d'",
        "\"Error\"",
        "'8\u2660'",
        "\"\"\"\n         :type moves: str\n         :rtype: bool\n         \"\"\"",
        "\"E\"",
        "'*1000000'",
        "\"Case \"",
        "'gray'",
        "\"Here\"",
        "'U'",
        "'L'",
        "'6\u2665'",
        "'''\nUsing Rabin-Karp incremental hash\nReference:\nhttps://leetcode.com/problems/longest-happy-prefix/discuss/547446/C%2B%2BJava-with-picture-incremental-hash-and-KMP\n'''",
        "\"0F12\"",
        "'p'",
        "\"J\"",
        "'Showing'",
        "'Cal'",
        "'J\u2665'",
        "\"filee\"",
        "\"other\"",
        "'0123456789'",
        "'7\u2660'",
        "'road'",
        "\"b\"",
        "f\"{jump_length:.2f} metres: Gold!!\"",
        "\"_\"",
        "\"\"\"Return string describing Leo based on 'oscar'.\n\n    (int) -> str\n\n    Conditions:\n        - If 'oscar' was 88, you should return \"Leo finally won the oscar! Leo is happy\",\n        - If 'oscar' was 86, you should return \"Not even for Wolf of wallstreet?!\",\n        - If 'oscar' was not 88 or 86 (and below 88) you should return \"When will you give Leo an Oscar?\",\n        - If 'oscar' was over 88 you should return \"Leo got one already!\"\n\n    >>> leo(88)\n    \"Leo finally won the oscar! Leo is happy\"\n\n    Example test cases:\n        - test.assert_equals(leo(85),\"When will you give Leo an Oscar?\")\n        - test.assert_equals(leo(86),\"Not even for Wolf of wallstreet?!\")\n        - test.assert_equals(leo(87),\"When will you give Leo an Oscar?\")\n        - test.assert_equals(leo(88),\"Leo finally won the oscar! Leo is happy\")\n        - test.assert_equals(leo(89),\"Leo got one already!\")\n    \"\"\"",
        "'Mort'",
        "'g'",
        "'brand'",
        "'2'",
        "'\u2571\\\\'",
        "'\u2571\u2572'",
        "'J'",
        "'inf'",
        "'N'",
        "''",
        "'Let us play again.'",
        "\"+\"",
        "'_'",
        "'{:.2f}'",
        "'{first_name} {last_name}'",
        "\"^%s%s%c%s%s^\"",
        "'of'",
        "\" metres: He's flying!\"",
        "'-'",
        "\"/\\\\\"",
        "\"*\"",
        "\"B\"",
        "\"test.txt\"",
        "'#'",
        "\"Leo finally won the oscar! Leo is happy\"",
        "'Does not work here!'",
        "\"Showing {} to {} of {} Products.\"",
        "'Smith'",
        "'*1000k'",
        "\"C\"",
        "'D'",
        "'bwsg'",
        "f\"{k}:{','.join(sorted(v))}\"",
        "\"bug\"",
        "'s'",
        "\"Ce n'est pas un insecte...\"",
        "','",
        "f'{int(part[2])}{d[part[1]]}{int(part[3])}'",
        "'If it rains over a full lake, there will be a flood.'",
        "'b,w,g,s,o'",
        "'4\u2663'",
        "r'([0-9.]+)([k,M])?'",
        "\"+-\"",
        "\"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"",
        "r'[^a-z]'",
        "'contact'",
        "f'{header}{rvalue}{calc:04d}0000{footer}'",
        "f\"{distance:.2f} metres: He's flying!\"",
        "'(\\w+)'",
        "'development'",
        "'v'",
        "f\"{jump_length:.2f} metres: He's crap!\"",
        "'m'",
        "'b'",
        "'1'",
        "\"0000\"",
        "\"YES\"",
        "'w'",
        "\"He's crap!\"",
        "'{} {}'",
        "'=='",
        "\"contact\"",
        "'aBCdeF'",
        "f\"{lenght:0.2f} metres: He's ok!\"",
        "\"7\"",
        "'i'",
        "\"Case\"",
        "'''\n        res keeps track of the index of the end of the prefix, used to output the happy prefix\n        l stores the hash key for prefix\n        r tracks the hash key for suffix\n        '''",
        "'j'",
        "'Jewel'",
        "f\"{header}FFFF{res:0>4}0000{footer}\"",
        "'!'",
        "r'(.+?), (\\d+)(?:, )?'",
        "'psPS'",
        "f'The {[\"first\", \"second\"][t2 == t1 and c2 > c1]} card won.'",
        "\"2\"",
        "\"ooogg\"",
        "\"nZero\"",
        "\"9999\"",
        "\"yZero\"",
        "'B'",
        "\"brand\"",
        "'Morty'",
        "\": \"",
        "\",\"",
        "'NO'",
        "\"squirrel\"",
        "'2\u2660'",
        "'{0[first_name]} {0[last_name]}'",
        "'to'",
        "'6'",
        "'E'",
        "'8\u2665'",
        "'J\u2666'",
        "\"last_name\"",
        "\"#\"",
        "'{}FFFF{:0>4}0000{}'",
        "f\"{x}:{','.join(sorted(y))}\"",
        "\"python\"",
        "\"Gold!!\"",
        "f\"{i}:{j}\"",
        "'player'",
        "\"bugs\"",
        "\"/\\\\ /\\\\\"",
        "'collections'",
        "\"\u2571\u2572\"",
        "\":\"",
        "'orange'",
        "'-inf'",
        "\"Does not work here!\"",
        "'J\u2663'",
        "'5'",
        "'Q\u2666'",
        "'fruit'",
        "'9\u2663'",
        "\"\"\"\n         :type grid: List[List[int]]\n         :rtype: int\n         \"\"\"",
        "' of '",
        "\"{}\"",
        "'^%s^ /\\%s/\\ /\u2572%s\u2571\\ \u2571\u2572%s\u2571\u2572'",
        "r'\\bblue blue red\\b|\\bblue red (?=blue\\b)|\\bred (?=blue blue\\b)'",
        "'good'",
        "'10\u2666'",
        "'black'",
        "f\"{lenght:0.2f} metres: Gold!!\"",
        "'Neil'",
        "'-1'",
        "'G'",
        "'''\n    a a b a a b a a a\n    0 1 2 3 4 5 6 7 8\n    0 1 0 1 2 3 4 5 2\n    \n    '''",
        "'6\u2660'",
        "\"_ ^ /\\ /\u2572 \u2571\u2572 \u2571\u2572 \u2571\\ /\\ ^\"",
        "\" metres: He's ok!\"",
        "'I'",
        "\"9\"",
        "\"role\"",
        "\"\"\"Brute force first loop populates the set of u.  The second loop \n    fills any gaps\"\"\"",
        "f\"{jump_length:.2f} metres: He's flying!\"",
        "'meat'",
        "f\"\u00a3{sum(2.4 if v == 't' else 1.5 for v in vehicle):.2f}\"",
        "\"ruby\"",
        "'{0}'",
        "\"bw bwsg ooogg osg\"",
        "'q'",
        "'Colin'",
        "\"settlement\"",
        "'Warehouse Picker'",
        "'('",
        "\"He's crap\"",
        "')'",
        "'11'",
        "\"r\"",
        "f\"{category}:{','.join(sorted(items))}\"",
        "'/\u2572'",
        "f\"{'0'*i}1{(n-i-1)*'0'}\"",
        "'+'",
        "\"\"\"\n                for x in range(i+1,len(rains)):\n                    print(x,\" is x\")\n                    if rains[x] in d and not rains[x]==0:\n                        #print(d,d[rains[x]],rains[x])\n                        if h: \n                            pop = heappop(h)\n                            print(pop,x,\"compare\")\n                        \n                        d[0]-=1\n                        ans[i] = rains[x]\n                        d[rains[x]]-=1\n                        if d[rains[x]]==0: del d[rains[x]]\n                        break\n                \"\"\"",
        "\"ABCDEF\"",
        "'y'",
        "' JQKA'",
        "f'{length:.2f} metres: {text}!'",
        "\" metres: He's crap!\"",
        "'''\n        now start from the beginning and end of the string\n        - note you shouldn't search teh whole string because the longest prefix/suffix is the string itself\n        '''",
        "'[^#]{1}#'",
        "\"Mid index: %d, Mid val: %d, Target: %d\"",
        "f\"He's {'crap' if l < 10 else 'ok' if l < 25 else 'flying'}\"",
        "f\"{n}/{d}\"",
        "'M'",
        "\"FFFF\"",
        "'{}FFFF{:04}0000{}'",
        "\"4\"",
        "'Q\u2665'",
        "'C'",
        "'7\u2665'",
        "'X'",
        "'e'",
        "\"Gold!\"",
        "'K\u2663'",
        "'^'"
    ],
    "float": [
        "0.00",
        "1.35",
        "2.375",
        "2.40",
        "0.3",
        "1e18",
        ".3",
        "0.0",
        "1.50",
        "1.0",
        "0.1",
        "0.25",
        "30.0",
        ".25",
        "1.5",
        "2.4",
        "0.05",
        "0.5",
        "1e-9"
    ]
}
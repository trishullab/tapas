{
    "identifier": [
        "crop_start",
        "john",
        "juices",
        "canBeMadeSortedByDeletingKElements",
        "ascii",
        "q_list",
        "max_value",
        "suffix",
        "b0",
        "manattan",
        "pd",
        "cy",
        "len1",
        "prof",
        "liczby",
        "findPower",
        "new_y",
        "tcounter",
        "indices",
        "tigerAccelaration",
        "LI",
        "max_diff",
        "DOGS",
        "gosa",
        "FILL",
        "exploreIsland",
        "is_integer",
        "oper",
        "newNode",
        "neighbour",
        "column",
        "feed",
        "source",
        "stu",
        "conn",
        "b10",
        "sDict3",
        "sols",
        "ip_list",
        "curr_node",
        "clone",
        "do_dfs",
        "get_connections",
        "maxsub",
        "u",
        "diff",
        "outP",
        "findAllStrings",
        "to_tuple",
        "iOld",
        "use_binary_search",
        "actual_sum",
        "starmap",
        "boundry",
        "messages",
        "max_sum",
        "L1",
        "roses",
        "rightSum",
        "myComponents",
        "getislands",
        "readline",
        "max_nums",
        "read_int_list",
        "CHANGES",
        "how_many_dalmatians",
        "__rsub__",
        "sr",
        "ux",
        "repeats",
        "ones",
        "min_difficulty",
        "name8",
        "pick",
        "found_1",
        "magnitude",
        "da",
        "arr_list",
        "amount",
        "currentVar",
        "c_y",
        "e",
        "lastPeople",
        "leg1",
        "cur_x",
        "colVector",
        "cases",
        "dx",
        "trump",
        "forward",
        "a_1",
        "list1",
        "sets",
        "maxs",
        "lp",
        "xCrossComp",
        "old_value",
        "water_visited",
        "dif",
        "n_i",
        "count_num_boats",
        "findall",
        "max_prices",
        "lastlevel",
        "delete",
        "t",
        "com",
        "lastRow",
        "stringDicts",
        "rows",
        "find_islands",
        "prev_w",
        "decoder",
        "calc_item",
        "sides",
        "ans_idx",
        "is_snake",
        "g",
        "pft",
        "dc",
        "opt",
        "branch",
        "min_unfairness",
        "is_camel",
        "de_nico",
        "sarr",
        "ni",
        "Node",
        "rightlists",
        "indexNum",
        "word_set",
        "possible_word",
        "minOdd",
        "good",
        "lazy_jem",
        "ki",
        "xSames",
        "expansion",
        "directs",
        "find_first_island",
        "nbre2",
        "next_i",
        "lst1",
        "tiger",
        "qb",
        "log",
        "dirY",
        "top_r",
        "calculate_new_base",
        "to_remove",
        "resolve",
        "bisect_left",
        "min_e",
        "lis",
        "rightsearch",
        "sum_mix",
        "dir",
        "retVal",
        "intervals",
        "bus_out",
        "uv",
        "pile",
        "LF",
        "_n",
        "input",
        "to_camel",
        "II",
        "inx",
        "edge_check",
        "cm",
        "new_col",
        "curMin",
        "left_tree",
        "func",
        "sumBin",
        "buf",
        "still_in_bus",
        "get_edges",
        "change_camel",
        "entered",
        "leg2",
        "itemgetter",
        "input_array",
        "min_f",
        "newString",
        "tree",
        "operator",
        "list_b",
        "quit",
        "sqrt",
        "t6",
        "addStrings",
        "state",
        "cross",
        "zCrossComp",
        "t1",
        "traverseBST",
        "TreeNode",
        "debug_print",
        "__import__",
        "visited2",
        "d_r",
        "po",
        "cash",
        "V",
        "__rpow__",
        "mina",
        "exclude",
        "cunt",
        "rounding",
        "Z",
        "subsequence",
        "power",
        "findIslandA",
        "__pow__",
        "mi",
        "memo",
        "get_in",
        "nums2",
        "pq_l",
        "board_cnt",
        "try_height",
        "lcsfn",
        "is_border",
        "tot",
        "sdict1",
        "combined",
        "lostSheep",
        "LIS_1",
        "difficulty_price",
        "ceiling",
        "qlen",
        "getCounterPairsNumber",
        "finditer",
        "vecList",
        "findIsland",
        "HTMLParser",
        "braceExpansionII",
        "row_len",
        "lisl",
        "first_island",
        "worker_ability",
        "tst",
        "cos",
        "deepcopy",
        "ZEROS",
        "switch",
        "sumlist",
        "history",
        "message",
        "shortVal",
        "top_c",
        "mint",
        "bandwidth",
        "il",
        "pair",
        "function",
        "max_c_idx",
        "ori",
        "left_nodes",
        "dirs_lst",
        "perms",
        "route",
        "bolt",
        "n_c",
        "paint_2",
        "process",
        "c",
        "yy",
        "two",
        "insert_posi",
        "find_camel",
        "r_num",
        "sm",
        "zv",
        "next_val",
        "preres",
        "src_group",
        "a_list",
        "passphrase",
        "num_5",
        "watchMen",
        "ha",
        "start_num",
        "enlarge",
        "change_snake",
        "S_upper",
        "ans_array",
        "daary",
        "max_elem",
        "ud",
        "people_in_the_bus",
        "score_no_current",
        "larr",
        "len",
        "t_lst",
        "stack2",
        "text",
        "cntp",
        "item",
        "super",
        "suuum",
        "p2",
        "people_in",
        "ti",
        "EulerTour_dfs",
        "numOfPassengers",
        "area",
        "p22",
        "cc",
        "pos_lst",
        "it",
        "zeroes",
        "tmp_arr",
        "obj1",
        "msg_segs",
        "prices",
        "value",
        "row_shifts",
        "INV",
        "DVSR",
        "__mul__",
        "back_i",
        "leftSet",
        "distancetoBolt",
        "upper_limit",
        "joe",
        "edge_islands",
        "is1",
        "leftmost",
        "same",
        "make",
        "bin",
        "aux",
        "pp",
        "LEAVE_AS_IT_IS",
        "mostProfit",
        "ps",
        "open",
        "root",
        "all_tress",
        "lcms",
        "sorted",
        "left",
        "full",
        "sheep",
        "res",
        "l0",
        "num_key",
        "loute",
        "id_dict",
        "newsize",
        "res1",
        "ws",
        "ama",
        "numArgs",
        "bisect",
        "eval",
        "boltSpeed",
        "c_srch",
        "from_iterable",
        "recur",
        "per_run",
        "truth",
        "compare",
        "getin",
        "expr",
        "new_row",
        "UV",
        "MAXN",
        "play_pass",
        "boltTime",
        "ch",
        "max_price",
        "on",
        "float",
        "j0",
        "pq",
        "matrix",
        "lenPassedVec",
        "ddp2",
        "str1",
        "key_val",
        "dp2",
        "sn",
        "choose",
        "G",
        "rowVector",
        "rownum",
        "x_offset",
        "outliners",
        "PROC",
        "basho",
        "K",
        "dis",
        "row_shift",
        "powerof4",
        "vec",
        "add",
        "solution",
        "less_than_1",
        "vis",
        "after",
        "all_sum",
        "curr_dist",
        "codon",
        "TypeError",
        "pop_R",
        "cellA",
        "maxJob",
        "isOnEdge",
        "less_than_half",
        "newMoves",
        "right_idx",
        "changed_p",
        "get_bus",
        "name",
        "flood_fill",
        "la",
        "current_profit",
        "val_dict",
        "frm",
        "get_planet_name",
        "get_components",
        "xorBin",
        "quantize",
        "shortest_bridge_here",
        "filter",
        "T",
        "prods",
        "alist",
        "msg_encrypted",
        "onBuss",
        "time_taken",
        "ncol",
        "center",
        "sum_b",
        "sisha",
        "_x",
        "arr_len",
        "max_difficulty",
        "r_start",
        "t_arr",
        "twos",
        "LOOKUP",
        "limit",
        "minflip",
        "next_x",
        "generateBST",
        "respond",
        "check",
        "prev_value",
        "almostEqual",
        "log5n",
        "get_coordinates",
        "arr1",
        "ID",
        "min_num",
        "profit_max_heap",
        "append",
        "maxsize",
        "title",
        "paint_neighbor",
        "digits",
        "v",
        "boundry1",
        "getPrimeFactors",
        "res3",
        "removed_string",
        "mul",
        "cut_length",
        "pval",
        "dp1",
        "bfs",
        "pages",
        "leftovers_sum",
        "components",
        "work",
        "ro",
        "maxRepOpt1",
        "d2",
        "read",
        "event",
        "k_max",
        "max_p",
        "SortedList",
        "start_c",
        "upper_check",
        "pst",
        "minute",
        "cuts",
        "log_n_5",
        "connectedNodes",
        "sumarr",
        "min_price",
        "coordinates",
        "rowB",
        "typelist",
        "prices_length",
        "isBad",
        "deque",
        "take",
        "T0",
        "parent",
        "answers",
        "islandDFS",
        "find_shortest_bridge",
        "insertNode",
        "job",
        "nextN",
        "letter",
        "char_exists",
        "preRes",
        "new_list",
        "talent",
        "max_sublen",
        "SEQ_PATTERN",
        "present",
        "head",
        "s0",
        "Exception",
        "min_island",
        "trace_island",
        "changeID",
        "rooted",
        "getnei",
        "sum_numbers",
        "EOFError",
        "findDistance",
        "query",
        "originBridge",
        "ndpreflen",
        "INF",
        "NN",
        "vertex",
        "found_first",
        "Union",
        "diff2",
        "explore_island",
        "x2pts",
        "needed",
        "sub",
        "groupSymbolRight",
        "planet_names",
        "r0",
        "new_root",
        "alphanumeric_and_length_check_result",
        "node",
        "R",
        "fn",
        "strdict",
        "dz",
        "duplicateFound",
        "handle_startendtag",
        "read_s",
        "toRemove",
        "equals",
        "isLeftInc",
        "get_square",
        "e_o",
        "li",
        "dt",
        "leave",
        "a2",
        "new_array",
        "boundry2",
        "accumulate",
        "maxRes",
        "populate",
        "ppl",
        "guys_in",
        "test_case",
        "island_index",
        "toString",
        "L",
        "takeoff",
        "my",
        "reduce",
        "find",
        "odd",
        "jn",
        "leftidx",
        "is_camel_case",
        "grid",
        "min_end",
        "splitArraySameAverage",
        "suma",
        "h1",
        "deq",
        "inc",
        "a_lst",
        "e2",
        "funcval",
        "dd",
        "auc",
        "empty",
        "retval",
        "re",
        "caseKey",
        "bsearch",
        "add_upper",
        "previous",
        "iy",
        "sep1",
        "largest",
        "outedge",
        "right_good",
        "cc_number",
        "crop_end",
        "sorting",
        "inpl",
        "into_bus",
        "sdict2",
        "ret",
        "inBus",
        "edges_2",
        "still_on",
        "kMax",
        "str_2_arr",
        "int",
        "xRows",
        "MyHTMLParser",
        "newP",
        "word_list",
        "lower_bound",
        "nums1",
        "result",
        "lastPos",
        "ui",
        "curj",
        "lag",
        "embraceIsland",
        "w1",
        "ySames",
        "cap",
        "code_cycle",
        "Vector",
        "maxprofits",
        "matrix_addition",
        "getPow",
        "total",
        "boltime",
        "removeDuplicates",
        "start_r",
        "profit_table",
        "profit",
        "group_people_by_weight",
        "FILL3",
        "dif_l",
        "dp_items",
        "passengersOn",
        "keys",
        "yDict",
        "max_v",
        "s3",
        "isOK",
        "edges_1",
        "sort_arr",
        "rtnList",
        "minl",
        "popleft",
        "inputlist",
        "workerPointer",
        "self",
        "bubblesort_once",
        "pro",
        "repeat_check_result",
        "beggars",
        "factor",
        "fr",
        "adj",
        "make_island",
        "Sbuffer",
        "to_snake",
        "each",
        "maxProfits",
        "parse_union",
        "connections",
        "passengersOff",
        "inorder",
        "ar",
        "numRescueBoats",
        "load",
        "down",
        "indexNum2",
        "totalnum1",
        "test_sum_mix_with_elements_are_only_string",
        "partial",
        "islands",
        "bbb",
        "word",
        "treel",
        "cur_sum",
        "LPS",
        "union",
        "maps",
        "temp_list",
        "sysread",
        "backV",
        "am",
        "previous_string",
        "temp",
        "t0",
        "ljust",
        "first_found",
        "adjL",
        "d",
        "asc_i",
        "shortest",
        "a",
        "lencom",
        "repeat",
        "old_base",
        "queue_index",
        "strVec",
        "wskill",
        "watchman",
        "maxd",
        "pts",
        "dirX",
        "minimum_expand",
        "planents",
        "gg",
        "is_append",
        "yCrossComp",
        "s",
        "half",
        "not_pick",
        "high",
        "reach",
        "hypot",
        "timer",
        "sa",
        "Decimal",
        "target",
        "EulerTour_list",
        "cIdx",
        "shore",
        "front_i",
        "DIRS",
        "math",
        "prev_r",
        "ValueError",
        "summ",
        "mr",
        "bfs_mark_first",
        "coords2",
        "edges",
        "DP",
        "search_island",
        "lma",
        "abstractmethod",
        "digit_sum",
        "N_B_M",
        "treer",
        "distances",
        "y0",
        "big",
        "bridge",
        "combinationSum",
        "p_helper",
        "POW",
        "lst_of_ans",
        "w",
        "norm",
        "pre_cur",
        "getNeisAround",
        "max_dot_product",
        "current_job_profit",
        "n2",
        "binary_cleaner",
        "nowu",
        "targets",
        "isCirlePossible",
        "newTrees",
        "arr2",
        "min_c_idx",
        "left_idx",
        "connectedCompNumber",
        "totalnum2",
        "fullmatch",
        "boltspeed",
        "i2",
        "mmax",
        "pack",
        "start_time",
        "gen_coin",
        "MIN",
        "digsum",
        "mxlen",
        "match",
        "saturday",
        "step2",
        "new_m",
        "Graph",
        "ai",
        "num1",
        "oldi",
        "index_root",
        "ac",
        "illuminati",
        "right_index",
        "ctgL",
        "first_item",
        "getNeighbors",
        "expand",
        "one",
        "changed",
        "root_dict",
        "intarr",
        "nt",
        "getrecursionlimit",
        "child",
        "qsize",
        "backward",
        "sumVal",
        "s_y",
        "groupby",
        "wordlist",
        "sad",
        "sc",
        "nborj",
        "floor_idx",
        "counts",
        "comb_list",
        "col_len",
        "list_a",
        "max",
        "maxdifficulty",
        "cur_y",
        "came",
        "get_possible",
        "array_numbers",
        "y",
        "rowA",
        "di",
        "flatten",
        "boats",
        "rint",
        "tup_list",
        "lower_limit",
        "curr_element_count",
        "test_sum_mix_with_elements_are_only_integer",
        "piles",
        "border_coordinates",
        "___",
        "wo",
        "min_index",
        "index_list",
        "said",
        "coordinates1",
        "cache",
        "flush",
        "findLengthOfShortestSubarray_bruteforce_bsearch",
        "longest_palindrome",
        "last_sorted_to",
        "island1",
        "new_q",
        "seg",
        "infi",
        "be",
        "current_difficulty",
        "printable",
        "space",
        "biggest_number",
        "F",
        "prev_max",
        "pairs",
        "arr_sorted",
        "dot",
        "node_id",
        "nums",
        "positions",
        "first_sorted_from",
        "heappop",
        "nondecrright",
        "routes",
        "lii",
        "more_total",
        "is_mixed_case",
        "spe",
        "coefficient",
        "col_shifts",
        "inf",
        "DIR",
        "leng",
        "rnode",
        "pointer2",
        "kmax",
        "tma",
        "transformed",
        "max_dot_product_next",
        "isPoss",
        "xy",
        "bl",
        "right",
        "selected",
        "leftNode",
        "object",
        "number_of_sides",
        "idxp",
        "sum_nums",
        "bb",
        "ql",
        "stringbegin",
        "last",
        "str",
        "uvs",
        "Letter",
        "lisOnTree",
        "p_y",
        "shortest_bridge",
        "sheeps",
        "columns",
        "nbre1",
        "remain_capacity",
        "VALID_CASE",
        "action",
        "left_trees",
        "cur_c",
        "isalnum",
        "lastY",
        "ir",
        "du",
        "maxarr",
        "inGrid",
        "qr",
        "islower",
        "pow_of_5",
        "longVal",
        "off",
        "remaining",
        "more_than_half",
        "findComponents",
        "done",
        "sys",
        "delta",
        "c0",
        "ele",
        "acos",
        "__str__",
        "suff",
        "tozero",
        "powers",
        "cycle",
        "uncompleted",
        "sum_up",
        "findNeighbors",
        "nboats",
        "countOnes",
        "string_counter",
        "now",
        "ty",
        "iters",
        "cnt",
        "replace",
        "color_island",
        "change_kebab",
        "end_f",
        "VectorInputCoordsValidationError",
        "listOfPlanets",
        "direction",
        "second_index",
        "arg",
        "recode",
        "vNow",
        "stop",
        "LLI",
        "isWaterAround",
        "pal",
        "Ans",
        "idx_i",
        "grp",
        "cur_char",
        "rightidx",
        "hashmap",
        "FILL2",
        "is_valid",
        "__truediv__",
        "found_y",
        "dob",
        "next_",
        "prev",
        "invertOnes",
        "left_end",
        "findClosest",
        "isBound",
        "liste",
        "row_limit",
        "yi",
        "withoutVal",
        "tigacc",
        "tag",
        "bucket",
        "max_index",
        "__repr__",
        "nowt",
        "s2",
        "cmbts",
        "swaped",
        "vs",
        "minBoats",
        "permutation",
        "decoded_msg",
        "sin",
        "_prev",
        "isBst",
        "circle_radius",
        "islands_found",
        "exp",
        "distribution_of",
        "todo",
        "primeFactors",
        "stdout",
        "candidate_max",
        "alphanumeric_and_length_check",
        "desc_idx",
        "sum_down",
        "shifted",
        "z",
        "gt2",
        "Counter",
        "rem",
        "b00",
        "cur_r",
        "name3",
        "rows_number",
        "ptr",
        "tau",
        "rev_v",
        "frequent",
        "planet_map",
        "product",
        "poss1",
        "islandB",
        "borders",
        "si",
        "newS",
        "second",
        "preserved",
        "bisect_right",
        "XA",
        "traverse_island",
        "heapq",
        "tmp1",
        "lenA",
        "player",
        "qu",
        "start_arr_half",
        "a_l",
        "name7",
        "mapOper",
        "order",
        "templ",
        "curr_row",
        "longest_subsequence",
        "eps",
        "dec_idx",
        "getPairsNumber",
        "mat",
        "arr_a",
        "ci",
        "maxc",
        "switch_id",
        "coeff",
        "tokens",
        "lr",
        "pf",
        "sumrange",
        "firsti",
        "start",
        "maxRow",
        "Bit",
        "nums_to_rm",
        "prefix",
        "M_",
        "s_node",
        "sum1",
        "longest",
        "mv",
        "dv",
        "left_on_bus",
        "rl",
        "break_flag",
        "ml",
        "golds_list",
        "L3",
        "idx_j",
        "num2",
        "area_of_polygon_inside_circle",
        "alphabet",
        "is_same",
        "p3",
        "chr",
        "slen",
        "most_common",
        "neighbours",
        "matAdd",
        "tigtime",
        "kardashian_butt",
        "swap",
        "lj",
        "jump",
        "back",
        "at",
        "__pow",
        "ma",
        "isAppended",
        "len2",
        "nex",
        "dogs",
        "mp",
        "next",
        "tail",
        "ds",
        "sen_char",
        "min_height",
        "ami",
        "floor",
        "pic",
        "CHANGE_CASE",
        "mmm",
        "cdi",
        "first_one_found",
        "nondecrleft",
        "t5",
        "total_people_in",
        "should_break",
        "firstOne",
        "_flat",
        "rm",
        "update",
        "search",
        "solar_system",
        "low",
        "element",
        "zeros",
        "pos",
        "cal",
        "deb",
        "radius",
        "nx",
        "newr",
        "cont",
        "dict_",
        "l",
        "min_to_remove",
        "dest",
        "A_sum",
        "cx",
        "rary",
        "i",
        "run_sum",
        "new_dist",
        "MX",
        "grids",
        "validBST",
        "num_people",
        "h",
        "mDifficulty",
        "tb",
        "Dict",
        "DFS",
        "hq",
        "filtered_list",
        "ans1",
        "lstrip",
        "words",
        "update_task",
        "cut",
        "M",
        "group",
        "job_difficulty",
        "isle2",
        "dj",
        "vPar",
        "sub_worker",
        "ny",
        "src_marker",
        "cord",
        "ra",
        "takewhile",
        "parse",
        "right_sub_trees",
        "marker",
        "cs",
        "count",
        "i1",
        "cordb",
        "m",
        "curr_max",
        "soma",
        "add1",
        "col_shift",
        "rj",
        "dup",
        "starting_points",
        "trans",
        "ctri",
        "source_nodes",
        "right_trees",
        "last_start",
        "yCols",
        "functools",
        "increasing_parts",
        "summa",
        "new_string",
        "start_i",
        "output",
        "cor_dict",
        "occs",
        "List",
        "min_distance",
        "que",
        "maxlength",
        "EulerTour",
        "minSub",
        "cur_l",
        "sorted_from",
        "name6",
        "dir_list",
        "found_x",
        "new",
        "strip",
        "withVal",
        "seqs",
        "validate",
        "bm",
        "curr_distance",
        "neighbor",
        "found_uppercase",
        "cuts_sum",
        "int1",
        "chain",
        "dtype",
        "password",
        "convert",
        "firstIsland",
        "first_end",
        "continuer",
        "bus_in",
        "curr_opt",
        "Solution2",
        "findFirstIsland",
        "curr_col",
        "findProfit",
        "table",
        "nb",
        "stack_top",
        "write",
        "appendleft",
        "Queue",
        "mn",
        "groups",
        "start_f",
        "backID",
        "change_case",
        "cumarr",
        "next_boundary_set",
        "dic",
        "jobDifficulty",
        "set1",
        "label",
        "num_2",
        "list_sum",
        "ax",
        "rightTrees",
        "frontier",
        "ROUND_HALF_UP",
        "starts",
        "arr",
        "LS",
        "tigerTime",
        "b",
        "angle",
        "jobs",
        "backup",
        "rets",
        "graph",
        "island",
        "getFist1",
        "end_num",
        "search_row",
        "beggargold",
        "st_val",
        "sum_extra",
        "CHN",
        "dp_with_recursion",
        "__call__",
        "curr_price",
        "fl",
        "rev",
        "lastdp",
        "tc",
        "avail",
        "fillvalue",
        "property",
        "right_tree",
        "totalProfit",
        "to_kebab",
        "isPossible",
        "increasing",
        "X",
        "best_profit",
        "pw",
        "vel",
        "test_cases",
        "D",
        "Solution",
        "coin",
        "a1",
        "print",
        "mx",
        "max_cnt",
        "MP",
        "lhs",
        "sorted_arr",
        "added",
        "np",
        "ov",
        "maxColumn",
        "first_in",
        "groupSymbolLeft",
        "mean",
        "TestSumMix",
        "check_and_update_lowest",
        "ix",
        "size",
        "qs",
        "off_sum",
        "QUERY",
        "soln_exists",
        "changes",
        "nb_of_boats",
        "corda",
        "rightDecreasing",
        "dict",
        "BRIDGE",
        "max2",
        "inv",
        "isValid",
        "name2",
        "tg",
        "hop",
        "subtract",
        "close_idx",
        "iindex",
        "zarr",
        "curr_level",
        "maximum",
        "btime",
        "cmb1",
        "sumA",
        "L2",
        "rightSet",
        "valley",
        "okay",
        "last_idx",
        "solut",
        "isOk",
        "nLetters",
        "place",
        "put",
        "_i",
        "to_int",
        "__class__",
        "ans",
        "tempr",
        "findConnnectedComponent",
        "su",
        "tx",
        "bord",
        "sum_digit",
        "lis2",
        "dsc_a",
        "WATER",
        "pos1",
        "stack",
        "length",
        "rsum",
        "lowerbound",
        "cur_t",
        "_y",
        "tail_longest",
        "thislist",
        "knapsack",
        "add_edge",
        "buyuk",
        "poem_new",
        "person",
        "tt",
        "assertEqual",
        "o",
        "recurse",
        "list",
        "matSub",
        "right_k",
        "left_index",
        "explore_island_dfs",
        "switcher",
        "temp_lim",
        "Q2",
        "sizes",
        "get_neighbors",
        "discarded",
        "min_sup",
        "t3",
        "global_dist_map",
        "delta_i",
        "Q",
        "flag",
        "min_len",
        "isle1",
        "lst_sorted",
        "numLines",
        "compose",
        "rt",
        "total_people_out",
        "is_empty",
        "time",
        "lptr",
        "upper_check_result",
        "aary",
        "me",
        "al",
        "isBoundary",
        "final",
        "coords",
        "RES",
        "tp",
        "valid",
        "sol",
        "maxSoFar",
        "map",
        "r_index",
        "decrease",
        "dps",
        "max_count",
        "numCols",
        "gain",
        "move",
        "islands2",
        "minSum",
        "handle_endtag",
        "shift_range",
        "isValidBST",
        "update_boundaries_dfs_itr",
        "Min",
        "ability",
        "lowest",
        "digit",
        "findBottomLeftValue",
        "buy",
        "goodJobs",
        "shift1",
        "ppl_in_boat",
        "findLengthOfShortestSubarray",
        "an",
        "sum_val",
        "holder",
        "queue",
        "boundary",
        "Solution1",
        "pre_r",
        "difficulty1",
        "less_keys",
        "MOVE_TO_THE_NEXT_CHAR",
        "push_R",
        "maxVal",
        "expectedArea",
        "mark",
        "juan",
        "andBin",
        "poss",
        "cols",
        "flattened_list",
        "dX",
        "lent",
        "itr",
        "flg",
        "cusumma",
        "clis",
        "subQ",
        "l1",
        "global_max",
        "answer",
        "reaction",
        "expression",
        "rarr",
        "next_item",
        "flat",
        "remove_list",
        "to_bits",
        "aM",
        "set_pal",
        "hack",
        "rr",
        "path",
        "dr",
        "max_profits",
        "add_lower",
        "DIGITS",
        "cusummi",
        "peak",
        "word_arr",
        "char",
        "n_y",
        "minimum",
        "read_int",
        "data",
        "iterlinkedlist",
        "kucuk",
        "elem",
        "peoples",
        "iv",
        "output_list",
        "starcount",
        "iL",
        "heap",
        "key_list",
        "floodFill",
        "profits",
        "format",
        "flip_req",
        "__starting_point",
        "curr_n",
        "second_item",
        "pow5",
        "bitmap",
        "chunksize",
        "one_max",
        "__getitem__",
        "setdefault",
        "toggle",
        "target_mean",
        "LENGTH2",
        "d_ind",
        "component",
        "withToTake",
        "bfb",
        "sufffirstkeep_idx",
        "sortPeople",
        "r2",
        "orBin",
        "worker_index",
        "station",
        "atai",
        "maxDiff",
        "planete",
        "bedges",
        "cellB",
        "lc",
        "dist",
        "a0",
        "precur",
        "n_5",
        "divider",
        "two_exponent",
        "remove_dupes",
        "response",
        "round",
        "matB",
        "found_one",
        "zfill",
        "distanetobolt",
        "Zmax",
        "diff_index",
        "halflig",
        "ls",
        "Edge",
        "r_list",
        "INTMAX",
        "Q1",
        "grps",
        "divmod",
        "samstag",
        "paths",
        "mid",
        "curi",
        "pv",
        "rIdx",
        "total_number",
        "N0",
        "__init__",
        "weekend_total",
        "counter",
        "p_max",
        "lismin",
        "update_boundaries_dfs_rec",
        "min_sum_helper",
        "namedic",
        "count2",
        "values",
        "y_offset",
        "iterate_tokens",
        "to_print",
        "sleeping",
        "curr_i",
        "weight_last",
        "findFirstLand",
        "bridgeBFS",
        "end",
        "number",
        "findFirst",
        "sd",
        "name4",
        "guys_out",
        "RET",
        "sDict1",
        "spr",
        "boatCnt",
        "database",
        "MAX_N",
        "MIS",
        "C",
        "min_unf",
        "planet_dict",
        "his",
        "split",
        "t4",
        "dealTree",
        "m1",
        "myString",
        "symbols",
        "make_edge",
        "mir",
        "sum_mini_series",
        "msg",
        "tam",
        "island2",
        "get_coefficient",
        "reduced_arr",
        "L0",
        "isalpha",
        "AS",
        "fun",
        "first_pos",
        "lenV",
        "y2",
        "div",
        "_",
        "less_total",
        "ceil",
        "other",
        "sDict",
        "stringa",
        "s_x",
        "actions",
        "xyDict",
        "enu",
        "ord",
        "smallest_distance",
        "golds",
        "powerful_n",
        "rb",
        "word_end",
        "list_planet_id",
        "outliners_1",
        "INTMIN",
        "sign",
        "transform_island",
        "planet",
        "elts",
        "numlist",
        "get_off",
        "nu",
        "letters",
        "newrow",
        "fives",
        "j2",
        "key",
        "ABC",
        "co",
        "total_time",
        "two_max",
        "index1",
        "indexNum1",
        "clear",
        "neighbors",
        "jobIndex",
        "islands1",
        "bus_stop",
        "xs",
        "workers",
        "extra",
        "discover_case",
        "skill",
        "bus_stops",
        "ay",
        "elements",
        "start_island",
        "checking",
        "arr_int",
        "set",
        "second_tuple_elements",
        "withoutToTake",
        "lt2",
        "bin2dec",
        "workerCounts",
        "i_pre",
        "max_size",
        "rev_t",
        "diff_job",
        "friday",
        "cC",
        "dp_dict",
        "kebab",
        "more_keys",
        "strng",
        "unite",
        "final_score",
        "newc",
        "curr_y",
        "gcd",
        "getNeis",
        "tai",
        "pi",
        "markIsland2",
        "A",
        "dfs",
        "right_p",
        "two_count",
        "do",
        "ID_M",
        "R_cs",
        "line",
        "acc",
        "job_index",
        "max_char",
        "x1",
        "newq",
        "workerCab",
        "here",
        "benifit",
        "responses",
        "last_max",
        "sums",
        "push_L",
        "matA",
        "elt",
        "aa",
        "classmethod",
        "rez",
        "max_num",
        "stdpr",
        "outliners_2",
        "lx",
        "rp",
        "rank",
        "__add__",
        "curX",
        "findAnIsland",
        "last_valid_target",
        "convertCase",
        "sec_pos",
        "negatives",
        "shift2",
        "Set",
        "divisor",
        "min_elem",
        "result_profit",
        "search_col",
        "mai",
        "start_sen",
        "translate",
        "targetCase",
        "d2p",
        "__x",
        "max_n",
        "next_id",
        "ini_ind",
        "totalPeople",
        "next_j",
        "leftovers",
        "take_one",
        "nbori",
        "bile",
        "any",
        "maxpa",
        "plannetdict",
        "node_visit",
        "get_poss",
        "Au",
        "isdigit",
        "squared",
        "prevValue",
        "resp",
        "pivot",
        "mirror",
        "ttime",
        "R0",
        "numar",
        "nsteps",
        "boat_num",
        "maxa",
        "roots",
        "end_sen",
        "multiplier",
        "isupper",
        "find_factor",
        "xyz",
        "ri",
        "TestCase",
        "insert",
        "lnode",
        "Sum",
        "total_ones",
        "B",
        "paint",
        "ids",
        "sum_1_to_n",
        "first_size",
        "scalar",
        "setrecursionlimit",
        "jj",
        "subarr_min",
        "neighbor_is_1",
        "debug",
        "defaultdict",
        "elapsed",
        "find_shortest_pair",
        "N2",
        "tmpans",
        "expand_island",
        "midsearch",
        "operation",
        "wt",
        "recorder",
        "changed_v",
        "delta_j",
        "dix",
        "record",
        "key_cycle",
        "sort",
        "genTrees",
        "curr",
        "on_sum",
        "i0",
        "arr_size",
        "toConsider",
        "num_zero",
        "five_exponent",
        "binarySearch",
        "diag",
        "b01",
        "p",
        "max_val",
        "lenth",
        "accu_max",
        "handle_starttag",
        "task",
        "press_button",
        "l_end",
        "subarr_max",
        "rewinder",
        "new_coord",
        "to_ret",
        "pre_prev",
        "prod",
        "new_part",
        "mark_island",
        "r_dist",
        "bus_occupancy",
        "t_",
        "out",
        "node_values",
        "is_kebab",
        "__eq__",
        "diagonal_difference",
        "insort_right",
        "hantei",
        "options",
        "new_profit",
        "inc_idx",
        "ta",
        "toplam",
        "compact",
        "wd",
        "new_layer",
        "row",
        "myans",
        "oX",
        "num_to_remove",
        "hold",
        "input2",
        "cur_area",
        "stdin",
        "sortedPeople",
        "score",
        "rptr",
        "horz",
        "weight",
        "curr_idx",
        "random",
        "maketrans",
        "cj",
        "S_lower",
        "lis1",
        "n_j",
        "neis",
        "points",
        "totProfit",
        "TA",
        "total_dogs",
        "sum",
        "peoplein",
        "cached",
        "__",
        "qa",
        "cache_key",
        "fill",
        "max_list",
        "good_points",
        "right_p_old",
        "findNode",
        "sright",
        "end_b",
        "tmp",
        "idx",
        "d1",
        "averager",
        "zero",
        "W",
        "window",
        "net_profit",
        "bit",
        "minWindow",
        "tests",
        "layer",
        "names",
        "nj",
        "r_srch",
        "planets",
        "remove_once",
        "max_pal",
        "get_off_bus",
        "sort_photos",
        "first_index",
        "end_arr_half",
        "bridgeList",
        "remain",
        "valid_win",
        "max_height",
        "bump",
        "border",
        "ans2",
        "cursum",
        "DFS_LIS",
        "s_index",
        "number_of_people",
        "worker",
        "is_odd_heavy",
        "origin",
        "sequence",
        "DUMMY",
        "tolist",
        "split_words",
        "comp",
        "island_id",
        "bridge_len",
        "c2",
        "yyy",
        "Go",
        "LS2",
        "max_len",
        "total_sum",
        "maximum_profit_for_difficulty",
        "LR",
        "visited",
        "difficulty",
        "new_i",
        "curNum",
        "j1",
        "is_snake_case",
        "finsh",
        "negV",
        "var",
        "nn",
        "pref",
        "lookup",
        "lst2",
        "ndsufflen",
        "srch",
        "most",
        "str_list",
        "last_t",
        "read_str_list",
        "point",
        "fact",
        "pop_L",
        "col",
        "step1",
        "broken",
        "popped",
        "read_str",
        "sum_list",
        "longest_word",
        "isle",
        "up",
        "isinstance",
        "bestjobs",
        "min_sum",
        "deletelen",
        "slower",
        "anss",
        "height",
        "p11",
        "LAND",
        "highest_rank",
        "get_func",
        "MOD",
        "min_dist",
        "sum_dict",
        "c1",
        "curr_set",
        "bool",
        "lists",
        "minRes",
        "PriorityQueue",
        "maxes",
        "h2n",
        "e1",
        "snake",
        "num_rows",
        "island_2",
        "span",
        "mina1",
        "dist_arr",
        "new_lst",
        "timeline",
        "job_nums",
        "temp1",
        "varMap",
        "KeyError",
        "dig_sum",
        "words2",
        "parents",
        "__contains__",
        "numRight",
        "leftTrees",
        "even",
        "isl_one_coords",
        "stops",
        "dsc_i",
        "tup",
        "pre_len",
        "maxFromBegin",
        "boundaries",
        "front",
        "d_pre",
        "y2pts",
        "index",
        "MI",
        "LENGTH1",
        "score_with_current",
        "leftIncreasing",
        "avg",
        "current_difficulty_index",
        "nxt",
        "xi",
        "old",
        "pt",
        "square",
        "getPrime",
        "current_max",
        "next_level",
        "direc",
        "start_b",
        "itertools",
        "to_visit",
        "uv_list",
        "average",
        "enough",
        "n_left",
        "coner_number",
        "solve",
        "ascii_lowercase",
        "sell",
        "aC",
        "lightest",
        "ctr",
        "last_passengers",
        "best_dist",
        "inP",
        "demodi",
        "prev_length",
        "first",
        "spans",
        "join",
        "numRescueBoats2",
        "sum_in_bus",
        "prev_val",
        "maxHeight",
        "args",
        "repeat_check",
        "pow",
        "mins",
        "cdg",
        "randint",
        "id",
        "unittest",
        "stk",
        "copyTree",
        "is_in_middle",
        "nei",
        "num",
        "maxMap",
        "searchsorted",
        "HOLDER",
        "useless",
        "pre_ans",
        "increment",
        "mapProfit",
        "doesExist",
        "S",
        "difprof",
        "t2",
        "identifier",
        "dY",
        "dealArr",
        "bins",
        "switchcase",
        "xtmp",
        "left_sub_trees",
        "boat_number",
        "k1",
        "rstrip",
        "currMax",
        "converted_array",
        "middle",
        "name1",
        "Val",
        "lastN",
        "nextRow",
        "mem",
        "preCur",
        "pop",
        "array",
        "sl",
        "people_out",
        "array_equal",
        "zeroOnes",
        "worker_minus_min_heap",
        "push",
        "dist_map",
        "terminate",
        "decryptkey",
        "capitalize",
        "uf",
        "des",
        "all",
        "SortedDict",
        "longest_array",
        "vector",
        "uid",
        "get",
        "E",
        "stg",
        "outputs",
        "inuse",
        "trees",
        "h2",
        "par",
        "chunkSorted",
        "sorted_key",
        "text_cnt",
        "best",
        "bus",
        "head_longest",
        "nrow",
        "traverse",
        "src",
        "getout",
        "inOrderTravel",
        "phrase",
        "goal",
        "numbers_of_letters",
        "no_first_size",
        "Char",
        "has_first_size",
        "Y",
        "isok",
        "current",
        "enter",
        "linalg",
        "find_close_brace",
        "cr",
        "maxEven",
        "isvalid",
        "fetchBestMax",
        "peopleout",
        "right_candidate",
        "res2",
        "list_index",
        "sorted_workers",
        "lastLis",
        "wordify",
        "ksums",
        "Generator",
        "validCoords",
        "is_possible",
        "shortest_coords",
        "mod",
        "maxDotProduct",
        "sortedPics",
        "before",
        "color",
        "base",
        "sDict2",
        "turn",
        "oldj",
        "generateTrees",
        "Es",
        "isedge",
        "set2",
        "pointer1",
        "kid",
        "N",
        "last_key",
        "arr_for_sum",
        "lisdp",
        "width",
        "col_limit",
        "Unionfind",
        "darr",
        "moves",
        "I",
        "i_l",
        "x2",
        "q_step",
        "left_candidate",
        "candidates",
        "poem",
        "dec2bin",
        "zip",
        "rotate",
        "maxp",
        "format_poem",
        "lefts",
        "pid",
        "offset",
        "plantes",
        "shortestBridge",
        "DIV",
        "stringBegin",
        "StopIteration",
        "modi",
        "right_start",
        "pack_bagpack",
        "second_island",
        "xxx",
        "distance",
        "coords1",
        "k2",
        "N1",
        "rtn",
        "rec",
        "max_inf",
        "labelIsland",
        "leftsearch",
        "FLIST",
        "ind",
        "visited_zero",
        "nv",
        "is_palindrome",
        "bin_expo",
        "ref",
        "mc",
        "insort",
        "bef",
        "sorted_to",
        "__rmul__",
        "shortedDist",
        "min_remove",
        "dp",
        "cmd",
        "target_island",
        "include",
        "maxProfit",
        "__neg__",
        "c_x",
        "disttobol",
        "ExploreIslands",
        "left_extend",
        "Sandgraph",
        "dy",
        "dfs_visit",
        "cusum",
        "run",
        "cnt2",
        "getjob",
        "curY",
        "island_1",
        "this_item",
        "get_islands",
        "m_",
        "words1",
        "maxk",
        "staticmethod",
        "sq",
        "mindist",
        "tidx",
        "string",
        "gold_list",
        "n_r",
        "min_flip",
        "position",
        "get_out",
        "possible",
        "remove",
        "min_value",
        "lis_len",
        "nmove",
        "result_sum",
        "n_x",
        "ys",
        "hasNext",
        "p2D",
        "attrs",
        "findGround",
        "next_y",
        "get_shortest_dist",
        "Tree",
        "Fraction",
        "query_list",
        "n_2",
        "boarder",
        "permutation_average",
        "lo",
        "d_index",
        "add_to_queue",
        "next_n_digits",
        "lines",
        "is_kebab_case",
        "rx",
        "stringend",
        "leftlists",
        "p_x",
        "mset",
        "coordinates2",
        "bs",
        "c_dist",
        "upper",
        "rev_arr",
        "pr",
        "read_a_int",
        "difference",
        "q",
        "test",
        "chunks",
        "isGround",
        "_j",
        "camel",
        "helper",
        "arb",
        "bin_search",
        "index2",
        "zip_longest",
        "char_count",
        "least_difficult_job",
        "numbers",
        "enum_segs",
        "ii",
        "golds_c",
        "inside",
        "reversed",
        "sw",
        "maxSum",
        "option",
        "grab_two",
        "link",
        "lowest_number",
        "level",
        "BFS",
        "used",
        "L_",
        "to",
        "stdint",
        "next_l",
        "mark_next",
        "dfs_paint_2",
        "findSrc",
        "ng",
        "change",
        "current_dist",
        "heappush",
        "val",
        "_max",
        "count1",
        "indx",
        "parr",
        "type",
        "db",
        "inp",
        "lz",
        "Max",
        "watchmen",
        "abc",
        "Syntax",
        "addon",
        "unit",
        "freq",
        "fin",
        "testcase",
        "total_juice_consumed",
        "bfs2",
        "ss",
        "rorl",
        "lower",
        "add_to_edges",
        "aedges",
        "Xmin",
        "maxx",
        "d0",
        "clist",
        "xDict",
        "cls",
        "range",
        "div_num",
        "whole_runs",
        "hyp",
        "thresh",
        "dst",
        "markBridge",
        "m2",
        "bis",
        "end_idx",
        "permutations",
        "cost",
        "pics",
        "start_j",
        "s_arr",
        "max_profit",
        "ALen",
        "total_boats",
        "get_nearest",
        "J",
        "boat",
        "trips",
        "md",
        "first_tuple_elements",
        "capacity",
        "main1",
        "cum",
        "not_work",
        "minv",
        "val1",
        "my_ip",
        "stringEnd",
        "parser",
        "target_dest",
        "NUM",
        "new_base",
        "b1",
        "sep",
        "log10",
        "finish",
        "ll",
        "NDP",
        "maxProfitAssignment",
        "cutoffs",
        "w2",
        "right_nodes",
        "min_sublen",
        "ln",
        "char1",
        "find_kebab",
        "split_union_commas",
        "margin",
        "leftSum",
        "es",
        "remove_ls",
        "parts",
        "job_profit",
        "mctr",
        "new_M",
        "fritag",
        "pointer",
        "uid_string",
        "en",
        "lmnt",
        "times",
        "read_ints",
        "maxcnt",
        "layers",
        "pic2",
        "AOld",
        "distance_between",
        "nr",
        "str_end",
        "ordered_inv",
        "mm",
        "profit_minus_min_heap",
        "bolspeed",
        "nextItem",
        "is_reached",
        "curcnt",
        "r",
        "dtb",
        "integrate",
        "rhs",
        "new_j",
        "H",
        "ap",
        "__radd__",
        "lcs",
        "source_island",
        "numRows",
        "node1",
        "rel",
        "get_strings",
        "r_lst",
        "nc",
        "arr_len_half",
        "sor",
        "combinations",
        "td",
        "asc_a",
        "num_node",
        "kwargs",
        "curr_min",
        "find_difficulty",
        "left_p",
        "ZA",
        "j",
        "parents_lt",
        "Directions",
        "k",
        "accum",
        "peopleInBus",
        "somenode",
        "isA",
        "new_total",
        "chunk",
        "curr_mean",
        "benchmark",
        "nextColumn",
        "person_weight",
        "rightSub",
        "expressions",
        "steps",
        "size_tree",
        "begin",
        "Tuple",
        "r1",
        "matches",
        "solver",
        "clones_num",
        "onboard",
        "prv",
        "paint_one_island",
        "shiftText",
        "heaviest",
        "isSplitable",
        "b11",
        "loads",
        "__sub__",
        "plants",
        "s1",
        "val2",
        "yn",
        "bt",
        "right_extend",
        "a_",
        "somme",
        "max_s",
        "stdstr",
        "heapify",
        "xx",
        "MmRL_list",
        "node2",
        "gather",
        "step",
        "ytmp",
        "now_",
        "carry",
        "ok",
        "mult",
        "rev_i",
        "directions",
        "d_c",
        "lt",
        "sorted_people",
        "sleft",
        "maxm",
        "parents_gt",
        "minMap",
        "edge",
        "curr_points",
        "zer_count",
        "get_first",
        "compile",
        "generateSubTrees",
        "default",
        "getFirst",
        "__dict__",
        "pre",
        "isnum",
        "cdj",
        "main",
        "end_ind",
        "binary_search",
        "valid_position",
        "id2",
        "tuple",
        "inStr",
        "count_if",
        "min_start",
        "this_accu_max",
        "win",
        "bit_length",
        "islandA",
        "freedom",
        "set_val",
        "v2",
        "copy",
        "LI_",
        "popDups",
        "FindFirstIsland",
        "sz",
        "board",
        "thisdict",
        "ba",
        "generate_recursively",
        "lcm",
        "calc",
        "maxv",
        "rights",
        "lb",
        "op",
        "LI2",
        "is2",
        "chk",
        "rc",
        "shortestBridge1",
        "tmp_offset",
        "boundary_set",
        "scores",
        "modulo",
        "items",
        "profit_diff",
        "iter",
        "cut_height",
        "code",
        "nksums",
        "REPLACE",
        "lst",
        "sb",
        "curr_sum",
        "As",
        "LISonTree",
        "__rtruediv__",
        "caseText",
        "adjacent",
        "test_sum_mix_with_elements_are_integers_or_string",
        "sl_idx",
        "go",
        "side",
        "prev_v",
        "digit_check_result",
        "compress_list",
        "optimal",
        "people",
        "p1",
        "t_indx",
        "nsw",
        "dfs1",
        "FILL4",
        "rs",
        "find_island",
        "seq",
        "BASE_ID",
        "enqueue",
        "depth",
        "splitArray",
        "checked",
        "st",
        "colnum",
        "oneOnes",
        "newTree",
        "sand",
        "conv",
        "num_boats",
        "passengers",
        "job_id",
        "nxts",
        "gold",
        "newList",
        "cut_msg",
        "arr_b",
        "mif",
        "ry",
        "clones",
        "d_msg",
        "lastj",
        "ISLAND",
        "is_odd",
        "br",
        "min",
        "n",
        "R_",
        "left_good",
        "inverse",
        "sdict",
        "Zeros",
        "cache_dict",
        "__checkForSizeException__",
        "sub_sum",
        "rewind_idxval",
        "getIslandLocation",
        "curr_j",
        "minb",
        "sum_",
        "f",
        "myVecSize",
        "juice_consumed",
        "n_digits",
        "mapp",
        "enumerate",
        "processCoord",
        "find_color",
        "minn",
        "sdict3",
        "reverse",
        "new_queue",
        "searchInsert",
        "el",
        "extend",
        "newcol",
        "seen",
        "preflastkeep_idx",
        "ceildiv",
        "lru_cache",
        "next_node",
        "hi",
        "weights",
        "cell",
        "island_one",
        "foundflag",
        "sp",
        "lst3",
        "l2",
        "x",
        "createListOfProfitDiff",
        "num_cols",
        "erase",
        "grabscrab",
        "max_",
        "in_centre",
        "digit_check",
        "bus_pop",
        "LIS",
        "binval",
        "cmb",
        "curr_height",
        "step3",
        "to_pop",
        "ab",
        "to_key",
        "P",
        "collections",
        "find_snake",
        "is_second",
        "First",
        "west_ego",
        "iMirror",
        "cur",
        "isrt",
        "_r",
        "curlen",
        "totalMatch",
        "_get_island",
        "testcases",
        "find_exponent",
        "U",
        "sep2",
        "recursion",
        "deeper",
        "sorted_pairs",
        "wker",
        "name5",
        "tary",
        "n1",
        "dp_bitwise",
        "squares",
        "primes",
        "jobPointer",
        "dirs",
        "found",
        "x0",
        "sqr",
        "max_crop_length",
        "y1",
        "get_values",
        "money",
        "get_all",
        "tigerAcceleration",
        "rtnTree",
        "bsres",
        "new_x",
        "isBSTUtil",
        "possible_words",
        "factorial",
        "isRightInc",
        "difficulty_min_heap",
        "trend",
        "__3DVECSIZE__",
        "_sum",
        "uppperBsearch",
        "argsort",
        "MAX_VAL",
        "min_nums",
        "tr",
        "curr_x",
        "calc_time",
        "countBattleships",
        "count_5",
        "profit_sum",
        "abs",
        "start_idx",
        "new_arr",
        "maxl",
        "case"
    ],
    "string": [
        "\",\"",
        "'three'",
        "'append'",
        "\"\"\"\n\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\n\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\n\n\"\"\"",
        "\"7\"",
        "'Missmatch of vector size: Size '",
        "'#'",
        "\"\"\"\n    [\n        [1,1,1,1,1],\n        [1,1,1,1,1],\n        [0,0,1,1,1],\n        [1,0,0,1,1],\n        [1,1,1,0,1]]\n    \"\"\"",
        "\"A\"",
        "r'[^a-zA-Z0-9]'",
        "\"Empty\"",
        "'democracy'",
        "\"Returns a Planet\"",
        "\"Belajar Lagi Bos\"",
        "\"\"\"\nprint(A)\nprint(B)\nprint(C)\nprint(D)\n\"\"\"",
        "\"9\"",
        "\"There was an error\"",
        "\"\"\"\n         :type board: List[List[str]]\n         :rtype: int\n         \"\"\"",
        "'Remaining Passengers for last stop: '",
        "\"\"\"\n    Given an array of integers as strings and numbers, return the sum of the array values as if all were numbers.\n    Return your answer as a number.\n\n    :param arr: [9, 3, '7', '3']\n    :return: 22\n    \"\"\"",
        "'Neptune'",
        "\"H\"",
        "'''\n        [1 1 1 1 1]\n        [1 0 0 0 1]\n        [1 0 1 0 1]\n        [1 0 0 0 1]\n        [1 1 1 1 1]\n        \n        [0 2 0]\n        [0 0 0]\n        [0 0 1]\n        \n        Find one island - convert all of it to 2. then put them all in queue. Find all non-2's that are 1 away as next frontier.\n        Check if you ever reach 1\n        '''",
        "\"}\"",
        "'More than 3 digits'",
        "r'((.)\\2*)'",
        "'''factorial = 1\n    count = 0\n    if n <= 0:\n        return 0\n    for i in range(1, n + 1):\n        factorial = factorial * 1'''",
        "\"\"\"\n         :type num1: str\n         :type num2: str\n         :rtype: str\n         \"\"\"",
        "\"Q\"",
        "'one'",
        "'Q'",
        "\"Sorry, that's not a planet.\"",
        "\"functools\"",
        "\"\"\"return [min, max, is_BST]\"\"\"",
        "'?'",
        "'''Return the frequency of a character in a string'''",
        "\"2\"",
        "'''\n        1111\n        1001\n        0000\n        1000\n        1110\n        '''",
        "'['",
        "\"zero one two three four five six seven eight nine\"",
        "'*'",
        "\"d\"",
        "\"\"\" count all factors of 5: 5 10 15 .. 25(count twice as 25 = 5*5) ..... 125 (count three) \"\"\"",
        "'''\n\n\n\n'''",
        "\"h\"",
        "'QAQ'",
        "'zero one two three four five six seven eight nine'",
        "'Saturn'",
        "\"\\n\"",
        "'T'",
        "\"test\"",
        "'01'",
        "\"Invalid Planet Index\"",
        "'Y'",
        "\"T\"",
        "\"*\"",
        "','",
        "\"{:.4f}\"",
        "'''\n         def check(m, n, mode=1):\n             table = dict(zip(t, [0]*len(t)))\n             for i in range(m, n+1):\n                 if s[i] in table:\n                     if mode == 1 and table[s[i]] != None:\n                         continue\n                     else:\n                         table[s[i]] = i\n \n             a, b = None, None\n             for k, v in table.items():\n                 if v == None:\n                     return 0, 0, False\n                 if a == None or a > v:\n                     a = v\n                 if b == None or b < v:\n                     b = v\n             return a, b, True\n         \n         first, last, result = check(0, len(s)-1, 1)\n         if not result:\n             return False\n         a, b = first, last\n         for i in range(last+1, len(s)):\n             t_a, t_b, result = check(i-(b-a+1), i, 2)\n             if result == True:\n                 a, b = t_a, t_b\n         \n         return s[a:(b+1)]\n         '''",
        "'value'",
        "'^{}$'",
        "\" := \"",
        "\"\"\" Get the square of given number `n`. \"\"\"",
        "'''\n    https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/discuss/830480/C%2B%2B-O(N)-Sliding-window-Explanation-with-Illustrations\n    1,2,3,10,4,2,3,5]\n    1 2 2  3 3 4 5 10\n    '''",
        "'sys'",
        "f\"{s[:i]}{int(s[i]) - 1}{'9' * (l - i - 1)}\"",
        "\"\"\"\n    No factorial is going to have fewer zeros than the factorial of a smaller\n    number.\n\n    Each multiple of 5 adds a 0, so first we count how many multiples of 5 are\n    smaller than `n` (`n // 5`).\n\n    Each multiple of 25 adds two 0's, so next we add another 0 for each multiple\n    of 25 smaller than n.\n\n    We continue on for all powers of 5 smaller than (or equal to) n.\n    \"\"\"",
        "'2'",
        "f'{{:0{n}b}}'",
        "'u'",
        "\"No\"",
        "'case1'",
        "'Mercury'",
        "\"\"\"\n    Finds the digit sum of the digits in an integer or list of positional integers\n    \"\"\"",
        "'popleft'",
        "r'-\\1'",
        "'NO'",
        "\"\"\"\n    Takes the digits of an array and increments the digit at index i and decrements the digit at \n    index i + 1.\n    E.g. bump([1, 2, 8, 4], 1) -> [1, 2+1, 8-1, 4] -> [1, 3, 7, 4]\n    \"\"\"",
        "'''\n        1 2 3 10 4 2 3 5\n            i\n                     j\n                       \n        1  2 3\n          ij\n        '''",
        "\"\"\"\nWriter: SPD_9X2\nhttps://atcoder.jp/contests/arc082/tasks/arc082_d\n\nai\u304c\u56fa\u5b9a\u306a\u3089\u3070\u3001\u305f\u3060\u30af\u30a8\u30ea\u3092\u30bd\u30fc\u30c8\u3057\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u306a\u304c\u3089\u7b54\u3048\u3092\u51fa\u305b\u3070\u3088\u3044\n\u4eca\u56de\u306f\u305d\u3046\u3067\u306a\u3044\u306e\u3067\u3001\u65b9\u6cd5\u3092\u8003\u3048\u308b\n\n\u4e00\u5ea6\u3067\u3082\u7802\u304c\u843d\u3061\u5207\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u305d\u306e\u5f8c\u306fai\u306b\u95a2\u308f\u3089\u305a\u3001\u7b54\u3048\u306f\u7b49\u3057\u304f\u306a\u308b\n\u304a\u3061\u304d\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u5e38\u306b\u7802\u304c\u79fb\u52d5\u3057\u7d9a\u3051\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u304b\u3089\u306e\u5dee\u5206\u304c\u5e38\u306b\u7b49\u3057\u304f\u306a\u308b\n\u3088\u3063\u3066\u3001\u843d\u3061\u5207\u3089\u306a\u3044a\u306e\u7bc4\u56f2\u3092\u4fdd\u6301\u3057\u3001\u4e00\u5ea6\u3082\u843d\u3061\u5207\u3089\u306a\u3044\u5834\u5408\u306e\u521d\u671f\u304b\u3089\u306e\u5dee\u5206\n& \u843d\u3061\u5207\u3063\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7d50\u679c\u3092\u7528\u3044\u3066\u7b54\u3048\u308c\u3070\u3088\u3044\n\n\u2192\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0(\u533a\u9593)\u3067\u843d\u3061\u5207\u308b\u304b\u3067\u305d\u306e\u5f8c\u306e\u52d5\u304d\u304c\u9055\u304f\u306d\uff1f\uff1f\uff1f\n\u2192\u6b7b\n\n\u2192a\u306e\u533a\u9593\u306f\u9ad8\u30053\u3064\u306b\u5206\u3051\u3089\u308c\u308b\n\u2192 a\u304c\u5c11\u306a\u304f\u3001a=0\u3068\u540c\u3058\u306b\u53ce\u675f\u3059\u308b\u5834\u5408\u3001 a\u304c\u5927\u304d\u304f\u3001a=X\u3068\u540c\u3058\u306b\u53ce\u675f\u3059\u308b\u5834\u5408\u3002\u3001\u4e00\u5ea6\u3082\u843d\u3061\u5207\u3089\u306a\u3044\u5834\u5408\n\u2192\u305d\u3057\u3066\u3001a=0,a=X\u3068\u540c\u3058\u306b\u306a\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u305e\u308ca\u306e\u521d\u671f\u5024\u306e\u533a\u9593\u306e\u4e21\u7aef\u304b\u3089\u4fb5\u98df\u3057\u3066\u3044\u304f\n\u2192\u3088\u3063\u3066\u3001a=0\u306e\u30b7\u30df\u30e5\u3001a=X\u306e\u30b7\u30df\u30e5\u3001\u843d\u3061\u5207\u3089\u306a\u3044\u5dee\u5206\u30b7\u30df\u30e5\u3002\u305d\u306e\u6642\u3042\u308ba\u304c\u3069\u308c\u306b\u5c5e\u3059\u304b\u306e\u533a\u9593\n\u3092\u7528\u3044\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u306a\u304c\u3089dp\u7684\u306b\u51e6\u7406\u3057\u3066\u3042\u3052\u308c\u3070\u3088\u3044\n\n\u3042\u3068\u306f\u5b9f\u88c5\u304c\u9762\u5012\u305d\u3046\n\"\"\"",
        "'Right'",
        "\"\"\"\n    Converts an array of positional integers into a single integer\n    \"\"\"",
        "\"([-])([A-Za-z])\"",
        "\"_\"",
        "'appendleft'",
        "'--'",
        "'q'",
        "'''\n    input: bus_stops tuple - the # of people who get on and off the bus\n    approach: loop through and sum the first element and sum the last element then subtract the two numbers\n    output: the # of people left on the bus after the last stop\n    '''",
        "\"Sun Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\"",
        "'l'",
        "'More than a handful!'",
        "'Valid'",
        "\"6\"",
        "\"\"\"\"\n        1. find the 1st island (DFS)\n        2. increment on the 1st island's boundary until it hit island (BFS)\n        3. return the step\n        \"\"\"",
        "']'",
        "\"8\"",
        "\"\"\"\n         :type k: int\n         :type prices: List[int]\n         :rtype: int\n         \"\"\"",
        "f\"{a}{b}\"",
        "\"@\"",
        "\"\"\"\n         :type n: int\n         :rtype: List[TreeNode]\n         \"\"\"",
        "\"%.6f \"",
        "'4'",
        "'Tiger'",
        "'seven'",
        "'''\n        [1,2,3,10,4,2,3,5]\n        3\n        \n        '''",
        "'A'",
        "'case'",
        "'''\n    return index which is lowest in values more than or equal to x\n    '''",
        "'5'",
        "\"\"\"\n    1. Problem Summary / Clarifications / TDD:\n\n\"\"\"",
        "'Invalid planet id!'",
        "\"\"\"\n    O(n) algorithm to find longest palindrome substring\n    :param S: string to process\n    :return: longest palindrome\n    \"\"\"",
        "\"Vector\"",
        "'case7'",
        "'='",
        "' '",
        "'e'",
        "\"four\"",
        "\"\"\"\n    Recursive helper method for min_sum.\n    \"\"\"",
        "r'[a-z]*-?'",
        "'H'",
        "\"\"\"\nf(x) = \uff08\u4e00\u756a\u4e0a\u306e\u9577\u65b9\u5f62\u306e\u5de6\u7aef\u304cx\u306b\u6765\u308b\u3068\u304d\u306e\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\uff09 \u3092\u95a2\u6570\u3054\u3068\u66f4\u65b0\u3057\u3066\u3044\u304d\u305f\u3044\n\u66f4\u65b0\u5f8c\u3092g(x)\u3068\u3059\u308b\ng(x) = |x-L| + min_{-width_1 \\leq t\\leq width_2} f(x+t), \u524d\u56de\u306e\u5e45\u3001\u4eca\u56de\u306e\u5e45\n\u5e38\u306b\u3001\u533a\u9593\u4e0a\u3067\u6700\u5c0f\u5024\u3092\u6301\u3061\u50be\u304d\u304c1\u305a\u3064\u5909\u308f\u308b\u51f8\u306a\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u7dad\u6301\u3055\u308c\u308b\u3002\uff08\u533a\u9593\u306f1\u70b9\u304b\u3082\uff09\n\u50be\u304d\u304c\u5909\u308f\u308b\u70b9\u306e\u96c6\u5408S_f = S_f_lower + S_f_upper\u3092\u6301\u3063\u3066\u3044\u304f\u3002\nS_f_lower, S_upper\u306f\u4e00\u6589\u306b\u5b9a\u6570\u3092\u8db3\u3059\uff1a\u5909\u5316\u91cf\u306e\u307f\u6301\u3064\n\"\"\"",
        "'Either give single iterable of 3 coords or pass them as *args'",
        "'1'",
        "'inf'",
        "'d'",
        "\"4\"",
        "\"\"\"\n        step 1: use DFS to find the first island\n        need to record island1 and boundary\n        \"\"\"",
        "\"Kypton\"",
        "\"\"\"\n\u53ea\u67092\u4e2a\u5c9b\n\u5148dfs - find 1st island's boundary nodes\uff0c label 1st island with 2\n\u518dbfs - expand 1st island's boundary, and mark unvisited 0 as prevstep+1, until finding 1\ntimeO(m*n) spaceO(m*n)\n\"\"\"",
        "\"\"\"\n         :type root: TreeNode\n         :rtype: bool\n         \"\"\"",
        "\"|\"",
        "'-_'",
        "\"Not Available\"",
        "'. '",
        "\"X\"",
        "r'\\.img'",
        "\"\"\" This function returns planet`s name by id. \"\"\"",
        "f'{d[t]}'",
        "'Invalid'",
        "'Jupiter'",
        "'6'",
        "\"\"\" Get a defined string from the list based on given number. \"\"\"",
        "'AND'",
        "\"illuminati\"",
        "\"QAQ\"",
        "\"%f\"",
        "'no planet for id {}'",
        "\".img\"",
        "\"\"\"Find how many times the prime number p divides n!\"\"\"",
        "r\"\\?+!+\"",
        "r'([A-Z]|-)'",
        "\"([_])([A-Za-z])\"",
        "'o'",
        "'''\n    Write a function that returns the longest contiguous palindromic substring in s. \n    In the event that there are multiple longest palindromic substrings, return the \n    first to occur.\n'''",
        "'z'",
        "\"invadlid\"",
        "\"five\"",
        "\"\"\"\n        step 2: use BFS to find the shortest path\n        need to record island1 and boundary\n        \"\"\"",
        "'3'",
        "'0'",
        "\"\"\"(^-__-^)\"\"\"",
        "'f'",
        "\"{}.img{}\"",
        "r'\\d\\d\\d'",
        "\"a\"",
        "'''if n <= 0:\n        return 0\n    else:\n        fact = math.factorial(int(n))\n        check = True\n        while check:\n            if fact % 10 == 0:\n                count += 1\n            elif fact % 10 != 0:\n                check = False'''",
        "\"\"\"Custom exception class for invalid input args given to the Vector instantiation\"\"\"",
        "'''def how_many_dalmatians(number):\n  dogs = [\"Hardly any\", \"More than a handful!\", \"Woah that's a lot of dogs!\", \"101 DALMATIONS!!!\"];\n  \n  respond = if number <= 10 then dogs[0] else if (number <= 50 then dogs[1] else (number = 101  dogs[3] else dogs[2]\n  \nreturn respond'''",
        "\"Hardly any\"",
        "\"score: {}  duration---> {}\"",
        "'{'",
        "\"End\"",
        "\"six\"",
        "\"Uh oh! Something went really wrong!\"",
        "'Not found by id'",
        "\"Not in range\"",
        "'''\n        similar to 1D candy crush\n        This is stack mehod but slightly slower than stack approach in solutions. With this method\n            we could solve for duplicates > 2 (adjust k - look 2 submission)\n        '''",
        "'snake'",
        "'No passengers where on the bus'",
        "\"Uranus\"",
        "\"three\"",
        "r'(.)\\1'",
        "\"camel\"",
        "\"Invalid ID\"",
        "f'<{self.x}, {self.y}, {self.z}>'",
        "'camel'",
        "'OR'",
        "\"<\"",
        "'g'",
        "r\"(!+|\\?+)\"",
        "\"0\"",
        "\"\"\"\n        nrow, ncol = len(A), len(A[0])\n        \n        def is_valid(nr, nc):\n            if 0 <= nr < nrow and 0 <= nc < ncol:\n                return True\n            return False\n        \n        def get_components():\n            visited = set()\n            components = []\n            for r, row in enumerate(A):\n                for c, val in enumerate(row):\n                    if val and (r, c) not in visited:\n                        stack = [(r, c)]\n                        seen = {(r, c)}\n                        while stack:\n                            r1, c1 = stack.pop()\n                            for nei in ((r1-1, c1), (r1+1, c1), (r1, c1-1), (r1, c1+1)):\n                                if is_valid(nei[0], nei[1]) and A[nei[0]][nei[1]] and nei not in seen:\n                                    stack.append(nei)\n                                    seen.add(nei)\n                        visited = visited.union(seen) # visited |= seen\n                        components.append(seen)\n            return components\n        \n        components = get_components()\n        print (components)\n        \"\"\"",
        "'five'",
        "'Uranus'",
        "'kebab'",
        "\"LOL\"",
        "\"f\"",
        "\"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"",
        "'''\n\n            \n        \n        \n'''",
        "\"Saturn\"",
        "\"Invalid\"",
        "\"Neptune\"",
        "\"#\"",
        "'101 DALMATIONS!!!'",
        "'a'",
        "\"r : \"",
        "\"{{{0}}}\"",
        "'case2'",
        "\"codechef\"",
        "'Sun'",
        "r'([A-Z_])'",
        "\"{:.15f}\"",
        "'-'",
        "\"is1:\"",
        "'''\n    \n    \n[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n0 0  *  2 3\n[[6, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n\n0 1  *  2 0\n[[6, 6, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n0 2  *  2 -6\n[[6, 6, 6], [0, 0, 0], [0, 0, 0], [0, 0, 0]]\n----------------------\n1 0  *  1 3\n[[6, 6, 6], [6, 0, 0], [0, 0, 0], [0, 0, 0]]\n1 1  *  1 0\n[[6, 6, 6], [6, 6, 0], [0, 0, 0], [0, 0, 0]]\n1 2  *  1 -6\n[[6, 6, 6], [6, 6, 6], [0, 0, 0], [0, 0, 0]]\n----------------------\n2 0  *  -2 3\n[[6, 6, 6], [6, 6, 6], [6, 0, 0], [0, 0, 0]]\n2 1  *  -2 0\n[[6, 6, 6], [6, 6, 6], [6, 6, 0], [0, 0, 0]]\n2 2  *  -2 -6\n[[6, 6, 6], [6, 6, 6], [6, 6, 18], [0, 0, 0]]\n----------------------\n3 0  *  5 3\n[[6, 6, 6], [6, 6, 6], [6, 6, 18], [15, 0, 0]]\n3 1  *  5 0\n[[6, 6, 6], [6, 6, 6], [6, 6, 18], [15, 15, 0]]\n3 2  *  5 -6\n[[6, 6, 6], [6, 6, 6], [6, 6, 18], [15, 15, 18]]\n----------------------\n    \n    \n    \n    \n    \n    \n    \n    [0, 0, 0], \n    [0, 0, 0], \n    [0, 0, 0], \n    [0, 0, 0]\n\n    \n    \n    '''",
        "'Earth'",
        "\". \"",
        "'b'",
        "\"\"\"\nX\u5b9a\u6570\u3060\u3063\u305f\u3002\u4e21\u6975\u7aef\u306a\u5834\u5408\u304c\u5408\u6d41\u3059\u308b\u3002\n[0,L]\u4e0a\u5b9a\u6570A\u3001[R,X]\u4e0a\u5b9a\u6570B\u3001\u305d\u306e\u9593\u306f\u7dda\u5f62\n\"\"\"",
        "'eight'",
        "\"\"\"\n    Find the largest number <= n with the maximum digit sum\n    \"\"\"",
        "\"{:.20f}\"",
        "\"<{x}, {y}, {z}>\"",
        "'abcdefghijklmnopqrstuvwxyz'",
        "\"A:\"",
        "'+n'",
        "'_'",
        "r'.*(.).*\\1'",
        "\"is2:\"",
        "'.\\n'",
        "'codehf'",
        "\"s\"",
        "'X'",
        "\"\"",
        "f'source {source}, target {target}'",
        "\"Start\"",
        "\"abc\"",
        "\"nine\"",
        "\"\"\"Raises n to the power of 2.\"\"\"",
        "\"Jupiter\"",
        "\"Valid\"",
        "\"ivalid id\"",
        "\"\"\"\n    node id starts from 1\n    \"\"\"",
        "\"convert to int digit or string\"",
        "r'([A-Z\\-])'",
        "\"maxVal\"",
        "\"-> {} > {}\"",
        "'}'",
        "'''\n        similar to 1D candy crush\n        '''",
        "'''\n         https://www.youtube.com/watch?v=oDhu5uGq_ic\n \n             i: number of transactions\n             j: jth day \n \n             Total[i][j] = max(T[i][j-1], max((price[j] - price[m]) + T[i-1][m] for m in range(0, j-1)))\n             \n             NOTEs:\n                 1. use cache\n                 2. no need to initialize a 2D array, it takes too long\n                 3. When k is big enough to cover as many transactions as we want, \n                    use greedy algorithm (i.e. Stock Buy/Sell II)\n         '''",
        "\"\"\"\n        # loop to find first 1 in one of the 2 islands\n        # dfs from first 1 and mask all 1 to -1 in this island and collect boundry as well\n        # From boundries of first island, bfs until find 1 which must be part of 2nd island\n        \"\"\"",
        "\"Tiger\"",
        "'horz'",
        "\"Mercury\"",
        "\".\\n\"",
        "\"{:.12f}\"",
        "\"ISIS\"",
        "'YES'",
        "'-inf'",
        "\"\"\"\n         :type K: int\n         :type A: List[int]\n         :rtype: int\n         \"\"\"",
        "'.img'",
        "'abc'",
        "'  '",
        "f\"{id} not available.\"",
        "'''return the square of number'''",
        "'''\n        time complexity :\n            because of sorting O(Nlog(N))\n            the second loop is smaller so we ignore it\n        \n        space complexity:\n            because of sorting\n            O(N)\n        '''",
        "'n'",
        "\"The Sun\"",
        "'h'",
        "'''\n    1,2,3,10,4,2,3,5]\n    1 2 2  3 3 4 5 10\n    '''",
        "\"<{}, {}, {}>\"",
        "\"<%d, %d, %d>\"",
        "'Bus occupancy is: '",
        "\"-\"",
        "\"not plante in this range\"",
        "r'.*([0-9].*){3,}'",
        "\"'\"",
        "\"zero\"",
        "'B'",
        "r'[A-Z_-]'",
        "r\"!+\\?+\"",
        "\"{\"",
        "\" \"",
        "'+'",
        "'<{}>'",
        "'six'",
        "\"one\"",
        "', '",
        "\"\"\"Find the number of trailing zeroes in n!.\"\"\"",
        "\"\"\"answer\u306e\u30ea\u30b9\u30c8\u3092\u66f4\u65b0\u3057\u3066\u304b\u3089dfs\u3057\u3066\u3001old\u3067\u623b\u3059\"\"\"",
        "\"^#$\"",
        "\"5\"",
        "'two'",
        "\"3\"",
        "\"?\"",
        "'XOR'",
        "\"o\"",
        "\"More than a handful!\"",
        "\"HT\"",
        "\"push\"",
        "'Hello World'",
        "\"\"\"\n    Returns the minimum sum nof integer products of arr.\n    \"\"\"",
        "\"\"\"\n         insert node to the bottom left\n         \"\"\"",
        "\"+\"",
        "'{},{},{}'",
        "'Venus'",
        "r'[a-z_]+'",
        "\"\"\"\n         :type root: TreeNode\n         \"\"\"",
        "'Putin'",
        "'>'",
        "'Pluto'",
        "\"0123456789\"",
        "\"{}-{}\"",
        "'%.12f'",
        "\"\"\"\"Based on Manacher algorithm\"\"\"",
        "r'([a-z]+[A-Z])+[a-z]*'",
        "\"\"\"\ncreated by shhuan at 2017/11/19 21:52\n\n\"\"\"",
        "\"Venus\"",
        "r''",
        "r'[_-][a-z]|[A-Z]'",
        "'case3'",
        "\"kebab\"",
        "\"wrong walue\"",
        "'__'",
        "\" {:.15f}\"",
        "r\"(?<=\\.)\\s\"",
        "\"!\"",
        "'''\n2\n\n3527\n\n47269\n\n3<p<10 :: p>99 and p<10**10\n1 \u2264 t \u2264 1000\n'''",
        "'zero'",
        "\"=\"",
        "\"9876543210\"",
        "\"Pluto\"",
        "'QA'",
        "\"-inf\"",
        "'''\n         https://www.youtube.com/watch?v=oDhu5uGq_ic\n \n             i: number of transactions\n             j: jth day \n \n             Total[i][j] = max(T[i][j-1], max((price[j] - price[m]) + T[i-1][m] for m in range(0, j-1)))\n             \n             NOTEs:\n                 1. use cache\n                 2. no need to initialize a 2D array, it takes too long\n     \n         '''",
        "r\"\\?+\\!+\"",
        "'depth'",
        "\"More than 3 digits\"",
        "\">\"",
        "\"{0}\\n{1}\"",
        "'Woah that\\'s a lot of dogs!'",
        "'''\n        people.sort()        \n        left = 0\n        right = len(people) - 1\n        \n        counter = 0\n        while left <= right:\n            if people[left] + people[right] <= limit:\n                left += 1\n                right -= 1\n                counter += 1\n            else: # people[left] + people[right] > limit:\n                right -= 1\n                counter += 1\n            return counter'''",
        "'8'",
        "\"([A-Z])\"",
        "\"odhf\"",
        "\"e\"",
        "\"^#\"",
        "'7'",
        "r'[A-Z]{2}'",
        "\"re\"",
        "\"\"\" return square of n \"\"\"",
        "\"snake\"",
        "\"\"\"\n    \u6c42\u6700\u5927\u5206\u6570\n    :param scores:   \u884c\u674e\u8bc4\u5206\u5217\u8868\n    :param weights:  \u884c\u674e\u91cd\u91cf\u5217\u8868\n    :param capacity: \u9650\u5236\u91cd\u91cf\n    :return: \u6700\u5927\u5206\u6570\n\n    1\uff09\u6309\u7167\u5747\u5206\u5012\u5e8f\u6392\u5217\n    2) \u9012\u5f52\u7ec4\u5408\n        max_value = max(\u5305\u542b\u81ea\u5df1\u7684\u6700\u5927\u503c, \u8df3\u8fc7\u81ea\u5df1\u7684\u6700\u5927\u503c)\n    3) \u5f97\u51fa\u6700\u4f18\n    \"\"\"",
        "r'[_-]'",
        "\"Kelebihan Bos\"",
        "'HT'",
        "'name'",
        "'Mars'",
        "\"NO\"",
        "\"\"\"Return border of current island\"\"\"",
        "\"c\"",
        "\"\"\"\ncreated by shhuan at 2017/10/5 15:00\n\n\"\"\"",
        "\"Bolt\"",
        "\"\"\" Get planet name by given ID. \"\"\"",
        "\"\"\"Euclidean Algorithm\"\"\"",
        "'str'",
        "\"Invalid Planet Selection\"",
        "'c'",
        "'''\nCreated on Apr 30, 2016\nGmail : r.haque.249.rh@gmail.com\n@author: Md. Rezwanul Haque\n'''",
        "r'_\\1'",
        "\"List[int]\"",
        "r'([A-Z]|_)'",
        "\"1\"",
        "\"debug:\"",
        "''",
        "\"Woah that's a lot of dogs!\"",
        "\"seven\"",
        "\"\"\"\n         :type nums: List[int]\n         :type m: int\n         :rtype: int\n         \"\"\"",
        "'case6'",
        "'Bolt'",
        "'!'",
        "\"101 DALMATIONS!!!\"",
        "'ID not fund'",
        "r'.*([A-Z].*){2,}'",
        "\"confirmed!\"",
        "'''Idea is straightforward.\nWe get root of first island from \"first\" function\nWe dfs root and add indexes of the island to bfs (all indexes of island 1)\nWe bfs and expand the first island in other words\nFinally return step number when facing other island\nNote: This can also be done with referenced array if you don't want to modify A.'''",
        "\"two\"",
        "f\"{y}.img{n+(i==l)}\"",
        "\"append\"",
        "'Z'",
        "'pop'",
        "\"YES\"",
        "'9'",
        "'<'",
        "\":\"",
        "r'([A-Za-z0-9]){10}$'",
        "\"last\"",
        "\"\"\"\n         :type s: str\n         :type t: str\n         :rtype: str\n         \"\"\"",
        "\"b\"",
        "'case4'",
        "'Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune'",
        "'Hardly any'",
        "\"\"\"This function return square of number\"\"\"",
        "\"inf\"",
        "\"Y\"",
        "\"\"\"\n        [[1,1,1,1,1],\n         [1,0,0,0,1],\n         [1,0,1,0,1],\n         [1,0,0,0,1],\n         [1,1,1,1,1]]\n        \n        \"\"\"",
        "\"earth\"",
        "'([A-Z])'",
        "'([_-])([a-z])'",
        "'''Complexity O(log(n))'''",
        "\"Mars\"",
        "f'<{ \", \".join(map(str,self)) }>'",
        "r'(\\-|_)(.)'",
        "\"c : \"",
        "'applied to vector of size '",
        "'\\n'",
        "r\"\\!+\\?+\"",
        "'|'",
        "\"INF\"",
        "\"\"\"\n of course this is a dp problem.\n if we consider upper bound and lower bound for each sub tree, \n we will have a index-based solution over all posible numbers.\n \n each time we part a sub-tree into two parts, the question then becomes:\n how many possible boundaries can we find (start, end).\n \"\"\"",
        "'four'",
        "\"eight\"",
        "'nine'",
        "\"Yes\"",
        "'\\d+'",
        "\"invalid planet index\"",
        "\"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"",
        "'NA'",
        "'case8'",
        "'.'",
        "'case5'",
        "\"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"",
        "\"#$\"",
        "'Obama'",
        "\"Earth\""
    ],
    "integer": [
        "59",
        "100000000000",
        "11",
        "16",
        "31",
        "10000000000",
        "18",
        "7",
        "999",
        "99",
        "10",
        "300",
        "200001",
        "2001",
        "37",
        "83",
        "5000",
        "89",
        "9223372036854775807",
        "21474836480",
        "10101000",
        "1001001001",
        "9999",
        "8",
        "27",
        "9001",
        "23",
        "200005",
        "122",
        "97",
        "30",
        "9223372036854775808",
        "43",
        "29",
        "180",
        "25",
        "150",
        "1001",
        "998244353",
        "1000000000",
        "19",
        "280000002",
        "52",
        "53",
        "500",
        "2818",
        "100000",
        "512",
        "22",
        "15",
        "21474836470",
        "202020",
        "65",
        "58",
        "250",
        "14",
        "6",
        "4",
        "20",
        "0",
        "100",
        "1000",
        "9",
        "151",
        "100005",
        "100000000",
        "79",
        "9000",
        "2",
        "505",
        "1000000",
        "501",
        "5",
        "9999999",
        "3",
        "70",
        "13",
        "728",
        "8740",
        "71",
        "26",
        "400",
        "73",
        "41",
        "1000000007",
        "360",
        "61",
        "1",
        "91",
        "1000000005",
        "10000000",
        "200000",
        "1500",
        "12",
        "101",
        "2147483647",
        "47",
        "67",
        "51",
        "17",
        "50",
        "48",
        "1648961"
    ],
    "float": [
        "0.017453292519943295",
        "1e100",
        "1.00",
        "10e+10",
        "0.0",
        "1e99",
        "0.5",
        "1.0",
        "1e18",
        "0.1",
        ".5",
        "10e+100",
        "4.0",
        "10e+50",
        "1.24999999",
        "1e9",
        "1e-9"
    ],
    "module_identifier": [
        "operator",
        "scipy...integrate",
        "sqrt",
        "bisect_right",
        "heapq",
        "chain",
        "string",
        "html...parser",
        "time",
        "ascii_uppercase",
        "matrix",
        "numpy",
        "Union",
        "Queue",
        "sub",
        "hypot",
        "pprint",
        "Decimal",
        "array",
        "Fraction",
        "comb",
        "os",
        "combinations",
        "randrange",
        "ROUND_HALF_UP",
        "math",
        "accumulate",
        "quad",
        "queue",
        "SortedDict",
        "HTMLParser",
        "add",
        "deepcopy",
        "sortedcontainers",
        "abstractmethod",
        "starmap",
        "reduce",
        "perm",
        "ceil",
        "insort_left",
        "zip_longest",
        "sys",
        "acos",
        "setrecursionlimit",
        "floor",
        "defaultdict",
        "scipy...special",
        "re",
        "itemgetter",
        "PriorityQueue",
        "cycle",
        "lru_cache",
        "heapify",
        "ABC",
        "decimal",
        "pformat",
        "heappush",
        "fractions",
        "groupby",
        "abc",
        "collections",
        "insort_right",
        "digits",
        "mul",
        "takewhile",
        "square",
        "count",
        "itertools",
        "stdin",
        "sin",
        "log",
        "bisect_left",
        "SortedList",
        "copy",
        "stdout",
        "permutations",
        "ascii_lowercase",
        "random",
        "gcd",
        "pi",
        "ROUND_HALF_EVEN",
        "insort",
        "factorial",
        "functools",
        "deque",
        "typing",
        "log10",
        "bisect",
        "Counter",
        "heappop",
        "tau",
        "List",
        "truth",
        "pow",
        "randint",
        "unittest",
        "product"
    ]
}
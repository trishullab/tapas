{
    "identifier": [
        "prefix",
        "max_curr",
        "queries",
        "mn",
        "op_idx",
        "lb",
        "next_mini",
        "a2",
        "B",
        "eps",
        "length1",
        "age",
        "grades",
        "put",
        "map1",
        "alice_score",
        "tab",
        "findbest",
        "atoz",
        "vowels",
        "newnumber",
        "stone_sum",
        "smp",
        "limit",
        "robbed",
        "ePrt",
        "a_total",
        "maxdistance",
        "kj",
        "GLR",
        "is_composite",
        "kB",
        "prime_or_composite",
        "ar",
        "atexit",
        "mii",
        "type",
        "out",
        "take",
        "group_size",
        "alphabet",
        "defaultdict",
        "get_v",
        "vals",
        "height_now",
        "int",
        "cand",
        "appendleft",
        "coord_king",
        "min_suum",
        "vaccine",
        "charIN",
        "lists",
        "output",
        "newNumber",
        "dfs",
        "aScore",
        "stoneGameIII2",
        "stdin",
        "ky",
        "contains_all",
        "ax",
        "graph",
        "vacs_toDo",
        "greek",
        "stoneValue",
        "vaccines",
        "perm1",
        "dr",
        "ordered",
        "s0",
        "MAXN",
        "optimum",
        "boxes_number",
        "checkmates",
        "divisors",
        "stalemates",
        "totals",
        "safePosAround",
        "begins",
        "reversed",
        "block",
        "get_result",
        "n_op",
        "numpy",
        "s2token",
        "intersection",
        "LIST",
        "la",
        "i_3",
        "book",
        "rsplit",
        "results",
        "max_val",
        "bit",
        "chunkn",
        "iK",
        "sv",
        "ai",
        "lhs",
        "test_should_return_7511_when_given_n_is_15023",
        "combinations",
        "sum_of_a",
        "segtree",
        "b_list",
        "ch1",
        "sure",
        "l1d",
        "t_1",
        "ok",
        "nk",
        "group1",
        "en",
        "vow",
        "u2",
        "USE_STDIO",
        "Lazysegtree",
        "write",
        "h_clues",
        "backward",
        "iter2",
        "miller_test",
        "mini",
        "memV",
        "ans1",
        "colclues",
        "dprint",
        "Arr",
        "choose",
        "sin",
        "sum_cubes",
        "player",
        "countUnderscore",
        "cmp1",
        "independentcunt",
        "pos",
        "at_h",
        "headers",
        "temp1",
        "vac_time",
        "nu",
        "posInBoard",
        "digitsSum",
        "adjacents",
        "sum_array",
        "stoneGameIII1",
        "dict_old",
        "char2",
        "provfunc",
        "as_array",
        "property",
        "simplified",
        "neighbors",
        "iteration",
        "brave",
        "reduce",
        "C",
        "pmasstring",
        "cartesian_offset",
        "exists",
        "sc",
        "total_chunks",
        "dy",
        "am",
        "maxpow",
        "player_pick_three_stones",
        "arr1",
        "ans2",
        "get_h_stripe",
        "rown",
        "cur_s",
        "execute",
        "i0",
        "pay",
        "tempb",
        "last_payment",
        "px",
        "isdigit",
        "intv",
        "backSum",
        "NORTH_WEST",
        "elements",
        "king_attacks",
        "max_this_chunk",
        "maxp",
        "merge",
        "xs",
        "resdigit",
        "card",
        "el1",
        "nr_bumps",
        "a3",
        "P2_WIN",
        "find_prime_kPerm",
        "P1_WIN",
        "lim",
        "isspace",
        "ln",
        "decode",
        "runningsum",
        "ans",
        "ga",
        "H",
        "num",
        "chance",
        "combs",
        "kv",
        "paper_rock",
        "the_list",
        "subarray",
        "my_condition",
        "my_list2",
        "rtr",
        "s1Sorted",
        "bumps",
        "diagonal",
        "orig_stdin",
        "rps2",
        "binarySearch",
        "dig",
        "isarrayodd",
        "side",
        "__str__",
        "cost",
        "round",
        "begin",
        "colfill",
        "cal",
        "wk1",
        "amazonx",
        "default",
        "F",
        "iH",
        "fromkeys",
        "compute",
        "s",
        "ns",
        "newNum",
        "area",
        "hand",
        "checkIfCanBreak",
        "vertex",
        "setdefault",
        "ss",
        "maxPoint",
        "ANS",
        "cur_idx",
        "findGCD",
        "createMatrix",
        "frontSum",
        "sumc",
        "tmep",
        "max2",
        "tr",
        "SegTree",
        "MovementDirection",
        "chunk",
        "child_count",
        "pi",
        "around_fib",
        "S",
        "group",
        "hand2",
        "mo",
        "win_sum",
        "CodeforcesTask585ASolution",
        "lazy",
        "sys",
        "my_lst_str",
        "day",
        "can_move_to_safety",
        "greek_comparator",
        "ele",
        "allZero",
        "create_amazon",
        "new_clue",
        "i",
        "bottom",
        "shift",
        "max_h",
        "clues",
        "maxendu",
        "denom",
        "cos",
        "dz",
        "prime",
        "query",
        "checksolutions",
        "f_dist",
        "dh",
        "_primes",
        "ntok",
        "ys",
        "most_common",
        "sperm_list",
        "sp",
        "register",
        "returnArr",
        "vac_sched",
        "outstring",
        "move",
        "R",
        "scissors",
        "cantG",
        "rel_mat",
        "right_sums",
        "constrains",
        "pika",
        "Kind_sperm",
        "sum_arr",
        "rst",
        "iterator",
        "chess_location_to_game_indicies",
        "N0",
        "CHECKMATE",
        "minimal",
        "half",
        "missing",
        "lits",
        "r2",
        "sav",
        "fib",
        "highest_age",
        "args",
        "dec",
        "enum",
        "ar1",
        "q",
        "a_set",
        "squares_list",
        "dPrimes",
        "list2d",
        "iter1",
        "DEBUG",
        "stderr",
        "max1",
        "g2",
        "bi",
        "blanks",
        "exponent",
        "allz",
        "PS",
        "piles",
        "ui",
        "MATHEMATICA",
        "seq2",
        "GameSquare",
        "preS",
        "cant",
        "asort",
        "m",
        "Gameboard",
        "randrange",
        "t1",
        "y1",
        "segment",
        "size",
        "sm",
        "d2",
        "getcontext",
        "cdiv",
        "pre_sum",
        "get",
        "idx2",
        "ops",
        "bisect",
        "gcd",
        "ljust",
        "checkmate",
        "Knight",
        "discard",
        "odd_lowerbound",
        "dollar_to_speech",
        "strng",
        "cardLen",
        "assign_safe_not_safe",
        "staticmethod",
        "is_it_your_turn",
        "KeyError",
        "cubesB",
        "sheep",
        "DRAW",
        "i_1",
        "lr",
        "GameSquareOutcome",
        "crying",
        "reverseVowels",
        "sep",
        "beta",
        "aj",
        "index",
        "dt",
        "ni",
        "ds",
        "bs",
        "ktok",
        "text",
        "colSwap",
        "angle_multiplier",
        "render",
        "a_squares",
        "symmetric_difference",
        "MAX_BUMPS",
        "p2c",
        "up",
        "hash",
        "a_green",
        "possible",
        "append_path",
        "pop",
        "add_lista1",
        "hot_singles",
        "c1",
        "fact",
        "nh",
        "memo_search",
        "mins",
        "resupper",
        "val",
        "unittest",
        "l1",
        "miller_rabin",
        "MOD",
        "child",
        "curr_score",
        "repeat_sequence_len",
        "radians",
        "b_sum",
        "str_list",
        "width",
        "init_val",
        "rowcombs",
        "lin",
        "k",
        "determine_square_status_and_update_outcome",
        "sigma_b",
        "sciss_paper",
        "to_be_marked",
        "chinese_remainder",
        "remains",
        "amazon_piece",
        "lists1",
        "id",
        "uf",
        "possible_cols",
        "bl",
        "ring",
        "borders",
        "sumtilln",
        "last_balance_id",
        "max_size",
        "find",
        "favourable_matchups",
        "cb",
        "sq",
        "countSwap",
        "_ascend",
        "empty_header",
        "items_below_limit",
        "have",
        "fifth",
        "left_sums",
        "CHECK",
        "window",
        "char_list",
        "DestinationMover",
        "new",
        "rowSwap",
        "countN",
        "accumulate",
        "units",
        "v_clues",
        "n",
        "solutions",
        "sumn",
        "rem",
        "kPerm",
        "maxpossible",
        "In",
        "ansb",
        "search",
        "msg",
        "gg",
        "remove_values_from_list",
        "i1te",
        "math",
        "has_unique_chars",
        "how_many",
        "kA",
        "person",
        "sign",
        "cubed",
        "newar",
        "minis",
        "wins",
        "newa",
        "__init__",
        "tree",
        "salida",
        "at_n",
        "chron",
        "prime_perms",
        "nb_ops",
        "postsum",
        "rowposs",
        "RMQ",
        "deque",
        "islower",
        "fx",
        "swapcase",
        "kCover",
        "reta",
        "finals",
        "outa",
        "inhibit_as_well_as_threaten",
        "sieve",
        "fullCover",
        "fl",
        "NORTH_EAST",
        "jd",
        "init_hand",
        "check_digit",
        "Row",
        "nsum",
        "alex_score",
        "binarySearchCount",
        "inpl",
        "is_coprime",
        "bitsoncount",
        "maxi",
        "bump",
        "testcases",
        "__xor__",
        "cs",
        "max",
        "rock_sciss",
        "flat",
        "max3",
        "str1",
        "post_sum",
        "new_s",
        "mark_attacked_squares",
        "sal",
        "Min",
        "prv",
        "dev",
        "POS",
        "summation_N",
        "map",
        "sum_A",
        "maxis",
        "rr",
        "let",
        "payments_id",
        "TestOddCount",
        "is_inhibited",
        "walkable",
        "unit",
        "currValue",
        "hypot",
        "link",
        "dim",
        "binary_n_string",
        "apples",
        "swap_them",
        "key",
        "array1",
        "cmp",
        "turn",
        "itertools",
        "creatures",
        "ARound",
        "valR",
        "s3",
        "valL",
        "sum_xor",
        "s_numerator",
        "__or__",
        "popleft",
        "maxarr",
        "ls2",
        "left_cumsum",
        "lens",
        "tests",
        "marker",
        "case2",
        "digits",
        "isPowerOf2",
        "next_player_values",
        "temp_left",
        "ch2",
        "__import__",
        "bfs",
        "mp",
        "enumerate",
        "assign_king_check",
        "has_neighbor",
        "result_a",
        "stoneValues",
        "angle",
        "maxk",
        "max_s",
        "sort_coor",
        "random",
        "total",
        "added",
        "alice",
        "coeff",
        "dicts",
        "mons",
        "o",
        "lmp",
        "rays",
        "tmp_b",
        "most_frequent",
        "arr3",
        "i1",
        "sigma_a",
        "maxGlob",
        "candidate_root",
        "pp",
        "count_odd_square",
        "yx",
        "minimum",
        "comb",
        "s2list",
        "answer",
        "recurse",
        "countSquares",
        "preCompute",
        "strin",
        "p3",
        "pl",
        "first_sum",
        "RPS",
        "fin",
        "location",
        "elem",
        "final",
        "prevMax",
        "max_hint_length",
        "cumusum",
        "nf",
        "np",
        "indicator",
        "stoneGameIII",
        "spider",
        "_a",
        "get_a",
        "resultA",
        "tt",
        "lUpd",
        "an",
        "tortoise",
        "sp1",
        "amazon_coords",
        "os",
        "__invert__",
        "maxhero",
        "get_v_stripe",
        "Sflag",
        "current_min_sum",
        "lista2",
        "mod",
        "warning",
        "sort",
        "elemb",
        "l2",
        "get_pos",
        "mx",
        "blockHeight",
        "ge",
        "chain",
        "new_a",
        "kadane",
        "ism",
        "cube_array2",
        "kroki",
        "format_duration",
        "window_size",
        "binaries",
        "swapping",
        "x1",
        "lst",
        "resa",
        "maxLen",
        "totalPoints",
        "next",
        "__",
        "cubes_list",
        "mm",
        "valid_around",
        "current",
        "get_two",
        "list2",
        "best",
        "pos2",
        "s_dict",
        "unfami_ly",
        "wr",
        "tmpPrimes",
        "letter",
        "go",
        "StopIteration",
        "simp",
        "mpow",
        "Cube",
        "max_width",
        "divmod",
        "twos",
        "MIN",
        "space",
        "getCoveredPos",
        "newStr",
        "compress",
        "penultimate",
        "vac_list",
        "SLI",
        "citizen",
        "n_count",
        "binom",
        "_descend",
        "check_breakable",
        "attacked",
        "max_mini",
        "poz",
        "exceptions",
        "res_count",
        "groupby",
        "auto",
        "nx",
        "_",
        "le",
        "hb",
        "next_location",
        "spot_diff",
        "ind_of_last_payment",
        "k1",
        "proportion",
        "row2",
        "getFirstSetBitPos",
        "ndenumerate",
        "array2",
        "nditer",
        "lis",
        "lst1",
        "diag2",
        "lcm",
        "f2",
        "is_relative",
        "psum",
        "drel",
        "SR",
        "new1",
        "max_",
        "minRemainSum",
        "rowSum",
        "u1",
        "end_d",
        "reStr",
        "web_to_xy",
        "sqinc",
        "p1",
        "s2sorted",
        "case",
        "climbing_grades",
        "rule",
        "newb",
        "amazon",
        "vote",
        "swap_count",
        "suffix_sum",
        "u",
        "nums",
        "Col",
        "atleastz",
        "perms",
        "zero",
        "possible_solutions",
        "firstSum",
        "set_neighbor",
        "heappush",
        "dic",
        "check_relative",
        "LEN",
        "corr_cry",
        "lists_of_vaccines",
        "result_num",
        "tem1",
        "next_prime",
        "coord_amazon",
        "cnt1",
        "xor",
        "fraction",
        "t2",
        "euclid",
        "earn",
        "s_denominator",
        "findTheDifference",
        "makePrimes",
        "nxt",
        "cze",
        "cry",
        "temp5",
        "even_fib",
        "CountFrequencyasPair",
        "powermodulo",
        "join",
        "end",
        "lettersB",
        "file",
        "rot90",
        "good_packages",
        "UNKNOWN",
        "element",
        "list4",
        "grade",
        "flag1",
        "simplify",
        "bleh",
        "fiblist",
        "movement_path",
        "square_array",
        "sums",
        "gameover",
        "notPres",
        "has",
        "score_with_one",
        "t_3",
        "stoneGameIII5",
        "lst_bin",
        "sList",
        "bump_counter",
        "board",
        "cubes",
        "mxs",
        "rB",
        "sum_n",
        "dp",
        "cd",
        "list3",
        "total_points",
        "initIndex",
        "square",
        "maxset",
        "cclues",
        "candidates",
        "decimals",
        "kid",
        "days",
        "s1_counter",
        "Li",
        "chunks",
        "tmp",
        "L",
        "ALIVE",
        "max_col",
        "tmp_g",
        "sarr",
        "neighbor",
        "balance",
        "result1",
        "strip",
        "transform",
        "reverse",
        "ma",
        "denominator",
        "impossible",
        "rowCount",
        "Solution1",
        "lowest",
        "gen_array",
        "mon",
        "min_next",
        "zigzag",
        "log2",
        "everyele",
        "ins_pairs",
        "OrderedCounter",
        "parity_bit",
        "deno",
        "amazon_sq",
        "cured",
        "Bob",
        "list_diff",
        "VOWELS",
        "P1_WINS",
        "a",
        "starmap",
        "string",
        "perm",
        "w",
        "check_all_the_same",
        "da",
        "best_potwor",
        "item",
        "trans",
        "union",
        "count_odd",
        "rlt",
        "exp",
        "kwargs",
        "x_offset",
        "lista1",
        "coln",
        "endurances",
        "currMax",
        "sigma_n",
        "Sequence",
        "Fun",
        "empty",
        "sumb",
        "Tuple",
        "isaban",
        "stones",
        "two",
        "hg",
        "max_so_far",
        "s2_arr",
        "thisRoundScore",
        "res",
        "colours",
        "cells",
        "pecore",
        "strlen",
        "ctr",
        "wage_arr",
        "dvs",
        "so",
        "n_a",
        "persons2",
        "this_res",
        "fmt",
        "min",
        "french",
        "clue",
        "tupV",
        "hours",
        "free",
        "cardPoints",
        "rowelim",
        "takewhile",
        "qy",
        "min_len",
        "val2",
        "modInverse",
        "II",
        "a_list",
        "rn",
        "el",
        "jj",
        "c2",
        "cols_p",
        "stoneValueLength",
        "pa",
        "l1_test",
        "dead",
        "front",
        "secondSum",
        "de",
        "msofar",
        "min1",
        "res_sum",
        "qnext",
        "kingship",
        "list3d",
        "product",
        "rps",
        "dict",
        "determined",
        "T",
        "cand2",
        "py",
        "rc",
        "box",
        "alice_get",
        "maxN",
        "alpha",
        "divisor",
        "c",
        "ft",
        "t_2",
        "alives",
        "dedup",
        "kingy",
        "spow",
        "calcMove",
        "diff",
        "top",
        "second_sum",
        "listOfTips",
        "covered",
        "SL",
        "c_l",
        "number",
        "get_list",
        "origin",
        "sub_sum",
        "place_pieces",
        "z",
        "king_piece",
        "resb",
        "moment_of_time_in_space",
        "ord",
        "one",
        "getScore",
        "subAns",
        "help",
        "lol",
        "words",
        "full",
        "rules",
        "temp_lst",
        "reslower",
        "_dfs",
        "dp1",
        "u_res",
        "rock",
        "v2",
        "readlines",
        "AMA_MOVES",
        "name_score",
        "middle",
        "update_field",
        "di",
        "ad",
        "fields",
        "insieme",
        "floor",
        "afterS",
        "coord",
        "ts",
        "temple",
        "ending",
        "l2d",
        "a_blue",
        "maxm",
        "print",
        "sumi",
        "Counter",
        "offspring",
        "nogo_board",
        "index_lhs",
        "prev",
        "transposedboard",
        "res_gap",
        "index_rhs",
        "s_angle",
        "wrap",
        "sum_squares",
        "pattern",
        "y",
        "s1",
        "sg",
        "pay_maxi",
        "king_coords",
        "blockHeights",
        "winner",
        "orig_stdout",
        "movesToChessboard",
        "base",
        "vy",
        "is_occupied",
        "fusc",
        "size_t",
        "from_iterable",
        "f1",
        "al",
        "outcome",
        "log",
        "title",
        "howmany",
        "setrecursionlimit",
        "max_seen",
        "e",
        "a_sum",
        "_heros",
        "existing_neighbor",
        "render_outcome",
        "frac_to_string",
        "__setitem__",
        "prime_seive",
        "prec",
        "CountFrequency",
        "listletters",
        "num1",
        "pay_max",
        "Simplify",
        "N",
        "W",
        "monster",
        "inserting",
        "resalpha",
        "flush",
        "changed_before",
        "f",
        "already",
        "oddListLen",
        "left_index",
        "BEATS",
        "memoize",
        "values",
        "rec_max",
        "inputfile",
        "nc",
        "eng",
        "alf",
        "king_pos",
        "vH",
        "lt",
        "dec_hall",
        "lsta",
        "fir",
        "sf",
        "fyles",
        "strhr",
        "flag",
        "a_",
        "letters",
        "checkValidity",
        "cols",
        "primes_",
        "first_tmp",
        "right_cumsum",
        "pos_string",
        "fight",
        "ht_array",
        "king_amazon_adj",
        "directions",
        "player_pick_one_stone",
        "constrain",
        "alles",
        "outId",
        "get_adjacents",
        "ctz",
        "row",
        "value",
        "bottomUpDP",
        "NO",
        "isupper",
        "GamePiece",
        "survivors",
        "b2",
        "seq",
        "bin",
        "where",
        "ones",
        "hexpoint",
        "G",
        "fractions",
        "K",
        "records",
        "s_dist",
        "currSum",
        "listcit",
        "hold",
        "rel1",
        "array_madness",
        "my_turn",
        "gamestate",
        "guy",
        "find_gcd",
        "rv1",
        "extra",
        "float",
        "now",
        "xpr",
        "sqr",
        "__rfloordiv__",
        "deltBig",
        "__sub__",
        "fromfunction",
        "times",
        "assign_check",
        "any",
        "direction",
        "zeros",
        "band_name_generator",
        "store",
        "line",
        "Sum",
        "Child",
        "bad_apples",
        "a_rmq",
        "soldiers",
        "checks",
        "b3",
        "OrderedDict",
        "pig_latin",
        "bounce",
        "s2Sorted",
        "sum_of_array",
        "i3",
        "ls1",
        "canAdd",
        "_t",
        "seq1",
        "minSum",
        "pre",
        "next_s2",
        "checkit",
        "p1c",
        "has_safe_move",
        "create_king",
        "kids",
        "s_rmq",
        "colSum",
        "cou",
        "sy",
        "message",
        "beat_dict",
        "reciprical",
        "count_states",
        "roadList",
        "t_map",
        "seconds",
        "notFull",
        "bisearch_max",
        "cents",
        "list_of_letters",
        "stoneN",
        "itemgetter",
        "idx1",
        "gcd_matrix",
        "soluzione",
        "road_list",
        "main",
        "arange",
        "s1_tally",
        "corB",
        "leftsum",
        "nb",
        "revmap",
        "glr",
        "A",
        "best_practice_bumps",
        "sum_xors",
        "colour",
        "isprime",
        "minus",
        "create_bishop_movers",
        "remadd",
        "abs",
        "phrase",
        "new_ele_rel",
        "bits",
        "p1won",
        "sheep_list",
        "sC",
        "addDigits",
        "get_num",
        "card_points",
        "inf",
        "arrg",
        "curr",
        "dollars",
        "NN",
        "append",
        "newrd",
        "expo",
        "sb",
        "rs",
        "close",
        "maxChunksToSorted",
        "table",
        "s1list",
        "sPrt",
        "list_string",
        "knight_paths",
        "balls",
        "func",
        "collections",
        "battlefield",
        "totalblacks",
        "__winner",
        "secs",
        "RWI",
        "slen1",
        "spf",
        "rhs",
        "boxes_sizes",
        "binary",
        "temp",
        "hi",
        "time",
        "aa",
        "l2_test",
        "fl_num",
        "right_index",
        "get_three",
        "localTotal",
        "sideA",
        "D",
        "gamesquare",
        "num_bumps",
        "maxPayoff",
        "alfawita",
        "maxn",
        "rew",
        "total_seen",
        "Y",
        "IsPowerOfTwo",
        "isPerfectSquare",
        "check_safe",
        "doubles",
        "knight",
        "xy",
        "row_field",
        "range_query",
        "me",
        "iN",
        "ERROR_MESSAGE",
        "neigh",
        "distance",
        "fk",
        "points",
        "cas",
        "suma",
        "space_ids",
        "maxsum",
        "n_sep",
        "yu",
        "real",
        "player_pick_two_stones",
        "resultado",
        "power2",
        "keys",
        "ModuleNotFoundError",
        "y2",
        "neighbor_conditions",
        "count1",
        "blacks",
        "res2",
        "resultB",
        "diffs",
        "ib",
        "hum",
        "badNumber",
        "t",
        "amazony",
        "signal",
        "pow",
        "ini",
        "blocks_height",
        "speech",
        "road",
        "possibilities",
        "maketrans",
        "noOfOperations",
        "angle_default",
        "test_case",
        "v1",
        "cum_sum",
        "template",
        "memo",
        "EAST",
        "curr_val",
        "even_list",
        "red",
        "score_rules",
        "jab",
        "perm2",
        "summation_n",
        "kk",
        "iV",
        "b_set",
        "commute",
        "sum1",
        "total_value",
        "fives",
        "st",
        "childs",
        "get_array",
        "neigs",
        "forward",
        "STALEMATE",
        "freq",
        "rowlen",
        "EOFError",
        "r1",
        "maxs",
        "each",
        "Exception",
        "aliceNext",
        "max_sums",
        "cubeSum",
        "points_R",
        "or_arrays",
        "lru_cache",
        "gender",
        "sizeG",
        "cards",
        "user_input",
        "result2",
        "binomial_coefficient",
        "prev_max",
        "black",
        "r",
        "FenwickTree",
        "LF",
        "b_score",
        "sum_a",
        "oddlist",
        "old_grid",
        "counter",
        "month",
        "ms",
        "ones_in_even",
        "steps",
        "combblock",
        "land",
        "nRows",
        "temp3",
        "numbers",
        "der",
        "mod2",
        "place_on_board",
        "money",
        "pln",
        "count2",
        "sublist",
        "dict1",
        "elema",
        "rabbit",
        "idxs",
        "sa",
        "num_stones",
        "range",
        "minV",
        "signchange",
        "num_rows",
        "win",
        "radial",
        "gs",
        "t_dict",
        "cnt2",
        "pts",
        "RMI",
        "ar2",
        "ncr",
        "si",
        "dc",
        "permutations",
        "cu",
        "min_nums",
        "precompute",
        "ng",
        "found",
        "fly",
        "zl",
        "tipm",
        "fun",
        "rel",
        "input",
        "loop",
        "res_flag",
        "pq",
        "j",
        "payments",
        "match_constrains",
        "nj",
        "l",
        "height",
        "setflags",
        "lar_com",
        "ids",
        "max_sum",
        "lstrip",
        "current_location",
        "years",
        "b",
        "assertEqual",
        "curr_arr",
        "a_i",
        "rycerz",
        "seg2",
        "SIEVE_LIMIT",
        "window_sum",
        "mul",
        "op_score",
        "deck",
        "sex",
        "king",
        "setb",
        "sumt",
        "check",
        "word_set",
        "rowfill",
        "readline",
        "sideB",
        "vowel",
        "I",
        "PRIMES",
        "bb",
        "rowclues",
        "isinstance",
        "lower_bound",
        "heapify",
        "ss1",
        "spider_to_fly",
        "dic_2",
        "add_lista2",
        "sub",
        "LI",
        "tip",
        "score_with_two",
        "bump_number",
        "ii",
        "getval",
        "movers",
        "cube_array",
        "maxMoney",
        "zetac",
        "backwardSum",
        "compile",
        "expected",
        "bad",
        "val1",
        "col_",
        "solve",
        "unfam_ily",
        "dva",
        "inputStr",
        "tj",
        "coordinates",
        "candidate",
        "relatives",
        "dd",
        "n_operations",
        "sumarr",
        "move_to_end",
        "h",
        "Q",
        "list1",
        "copy",
        "pair",
        "c_i",
        "cube",
        "mapper",
        "totdays",
        "waste",
        "group2",
        "filler",
        "bool",
        "revn",
        "sum",
        "get_gcd",
        "ergebnis",
        "get_neig",
        "Next_Greater_Element_for_all_in_array",
        "fileoperation",
        "b1",
        "scoreGivenCards",
        "div",
        "stdout",
        "condition_2",
        "chose",
        "iter",
        "fiut",
        "tempa",
        "issubset",
        "swap",
        "sh",
        "totalOfA",
        "allOne",
        "readTree",
        "kub",
        "replace",
        "expand_empty_header",
        "a0",
        "web",
        "max_power",
        "fill",
        "LIMIT",
        "SI",
        "subSum",
        "numer",
        "max_monster",
        "common_member",
        "find_relatives",
        "Yes",
        "convn",
        "beats",
        "pows",
        "Fraction",
        "shifts",
        "Outcomes",
        "rect",
        "len",
        "binsearch",
        "nrow",
        "num_cols",
        "x",
        "max_ending_here",
        "su",
        "index2",
        "zeta",
        "get_ints",
        "fy",
        "arg",
        "second_tmp",
        "game",
        "LRUCache",
        "f_angle",
        "translate",
        "_b",
        "eratosthenes",
        "soldier_g",
        "sorted",
        "condition_1",
        "solution",
        "sum_b",
        "mem1",
        "Nonogram",
        "grid",
        "testy",
        "res1",
        "iin",
        "result_str",
        "max_pay_for_moment",
        "p2_",
        "islice",
        "ValueError",
        "square_at",
        "DollarToSpeech",
        "ncol",
        "spot",
        "initialize",
        "congrats",
        "post",
        "previous",
        "num_res",
        "totel",
        "stns",
        "alive",
        "GameSquareConditions",
        "NORTH",
        "new_h",
        "max_height",
        "factors",
        "currmax",
        "nom",
        "dv",
        "findall",
        "setBits",
        "outcomes",
        "minutes",
        "odd_upperbound",
        "maximum",
        "endswith",
        "hero_i",
        "usedNum",
        "num3",
        "draw",
        "rad",
        "gap",
        "preSum",
        "char1",
        "maxcnt",
        "head",
        "mover_content",
        "vx",
        "read_ints",
        "move_from",
        "vv",
        "rokda",
        "sep_sort",
        "lower",
        "b_cub",
        "textwrap",
        "rinput",
        "SOUTH",
        "WEST",
        "update",
        "locals",
        "CountSquares",
        "existing_recip_neighbor",
        "changed_str",
        "self",
        "capped",
        "AtoZ",
        "pat",
        "prod",
        "isPrime",
        "farr",
        "f_l",
        "payoff",
        "imag",
        "amt",
        "current_idx",
        "brac",
        "seg",
        "botm",
        "make",
        "count_nonzero",
        "get_primes",
        "cur",
        "mem3",
        "TC",
        "ischeck",
        "arr4",
        "cursum",
        "Listeb",
        "index1",
        "b_total",
        "max_score_using_subsequence",
        "king_sq",
        "min_val",
        "arrays_new",
        "MF",
        "three",
        "indC",
        "adding",
        "colelim",
        "pref",
        "tupH",
        "seg1",
        "po",
        "result",
        "bScore",
        "recip_direction",
        "knight_moves",
        "VACCINATIONS",
        "to_int",
        "bisect_right",
        "lettersA",
        "numStones",
        "x2",
        "details",
        "ncrmodp",
        "try_base",
        "ascii_uppercase",
        "countOdds",
        "maxDistance",
        "workingDays",
        "queue",
        "grx",
        "retb",
        "frase",
        "cond",
        "maxsize",
        "length",
        "str",
        "cache",
        "create_rook_movers",
        "update_cols_p",
        "testcase",
        "is_ok",
        "ps",
        "lines",
        "not_matches",
        "monpows",
        "split",
        "process",
        "P",
        "read",
        "dot",
        "extend",
        "dict_new",
        "p3w",
        "sheeps",
        "packed",
        "idle",
        "cusum",
        "recursive",
        "ncols",
        "greek_alphabet",
        "green",
        "fs",
        "second",
        "anss",
        "tuple",
        "buildPattern",
        "minx",
        "arr",
        "insert",
        "list_of_strings",
        "offset",
        "colCount",
        "moves",
        "s1_bigger",
        "rev_sum",
        "capacity",
        "s2_tally",
        "persons1",
        "diag",
        "environ",
        "actual",
        "d1",
        "temp2",
        "lo",
        "listtostr",
        "heightOfTallestTemple",
        "simplifiedFractions",
        "fmax",
        "ALPHA",
        "IndexError",
        "piece",
        "VectorMover",
        "wage",
        "isPalindrome",
        "calculate",
        "first",
        "bestv",
        "zip_longest",
        "low",
        "popitem",
        "my_list1",
        "evens_sum",
        "bisect_left",
        "X",
        "lemming",
        "forwardSum",
        "states",
        "randint",
        "battlefields",
        "count",
        "copysign",
        "prefixSum",
        "SumB",
        "fo",
        "s2",
        "heappop",
        "sum_subsequence",
        "otherPlayerMax",
        "options",
        "INF",
        "_count",
        "create_knight_movers",
        "yp",
        "maxSum",
        "firstSelect",
        "leave",
        "ismate",
        "TypeError",
        "rv2",
        "ch",
        "connected",
        "update_rows_p",
        "start",
        "s_map",
        "eachnumber",
        "ListNode",
        "SOUTH_WEST",
        "nm",
        "sum2",
        "mons_power",
        "ht",
        "cool",
        "curr_n",
        "rows_p",
        "mlin",
        "add",
        "relative",
        "power",
        "yes",
        "row_",
        "maxStep",
        "oppo",
        "fami_ly",
        "last_set",
        "listsum",
        "recursiveHelper",
        "count_sheep",
        "row1",
        "totalOfB",
        "no_cases",
        "upper",
        "all_true",
        "gt",
        "summ",
        "mode",
        "vs",
        "all",
        "curr_max",
        "temp4",
        "k2",
        "inps",
        "last",
        "na",
        "modified_arrays",
        "llin",
        "reverse_by_center",
        "hcf",
        "a1",
        "Clue",
        "vaccinations",
        "RI",
        "choices",
        "curSum",
        "num2",
        "hashing",
        "path",
        "nextk",
        "pm",
        "cards_and_pero",
        "bob",
        "mem2",
        "cand1",
        "relatively_prime",
        "ggT",
        "List",
        "counts",
        "need",
        "amazon_attacks",
        "get_marked_size",
        "p1w",
        "cumSumm",
        "poss",
        "cardDeck",
        "ranks",
        "mean",
        "kx",
        "dj",
        "vV",
        "next_single",
        "format",
        "ret",
        "max_step",
        "players",
        "list",
        "Max",
        "col",
        "squaring_array1",
        "min_width",
        "array",
        "cycle",
        "list2a",
        "quer",
        "Alice",
        "_gcd",
        "moment",
        "Listea",
        "is_prime",
        "can",
        "Enum",
        "camel_case",
        "endurance",
        "flu_months",
        "g",
        "changed",
        "work_on_strings",
        "m1",
        "minsum",
        "calculate_v2",
        "rclues",
        "bit_length",
        "inday",
        "segf",
        "match",
        "neighbor_y",
        "qx",
        "ConDecBin",
        "powerOfK",
        "optimalValue",
        "SLF",
        "field",
        "minu",
        "byte",
        "node",
        "heapq",
        "changes",
        "acount",
        "sec",
        "curr_min",
        "paper",
        "currhigh",
        "Ans",
        "valid",
        "get_area",
        "l0",
        "inpl_s",
        "deli",
        "colcombs",
        "b_cubes",
        "cured_order",
        "deltSmall",
        "speedBumps",
        "odd_count",
        "pb",
        "neighbor_x",
        "pr",
        "prime_factors",
        "monotoneIncreasingDigits",
        "name",
        "stripe",
        "current_size",
        "typs",
        "scores",
        "k_perms",
        "p2w",
        "operation",
        "curr_total",
        "isclose",
        "countBits",
        "eval",
        "i2",
        "box_force",
        "No",
        "yuanyin",
        "capitalize",
        "temp_right",
        "ls",
        "rtype",
        "tf",
        "expr",
        "shifted",
        "gen",
        "singles",
        "upto",
        "curAns",
        "dtype",
        "visited",
        "taken",
        "rank",
        "presum",
        "nC2",
        "sixth",
        "hand1",
        "__getitem__",
        "sr",
        "new_arr",
        "numRows",
        "maxHeight",
        "curr_sum",
        "citizens",
        "ia",
        "scnt",
        "squares",
        "startswith",
        "ind",
        "stone",
        "zipped",
        "max_a",
        "ans_i",
        "i_2",
        "rf",
        "rA",
        "remainCnt",
        "word",
        "initial",
        "aliceScore",
        "nrows",
        "mover",
        "__gt__",
        "new_b",
        "alice_value",
        "max_v",
        "read_input",
        "at_o",
        "pile",
        "qt",
        "rob",
        "outputfile",
        "stck",
        "condition",
        "wk2",
        "postfix",
        "ftt",
        "sub_len",
        "set",
        "n1",
        "lemming_battle",
        "max_score",
        "generate_combinations",
        "min_sum",
        "opstr",
        "my_list",
        "fac",
        "arr2",
        "parent",
        "read_int",
        "find_str",
        "Solution",
        "p",
        "coef",
        "nospace",
        "target",
        "off_spring",
        "hasFactor",
        "sn",
        "object",
        "len1",
        "gmpy2",
        "ceil",
        "curChunkn",
        "cnt",
        "sort_grades",
        "getIntList",
        "t3",
        "testCase",
        "aux",
        "__starting_point",
        "br",
        "REGEX",
        "Cflag",
        "is_integer",
        "dummy_arr",
        "kingx",
        "oper",
        "bahh",
        "lang_set",
        "indices",
        "M",
        "nearPow",
        "blue",
        "character",
        "crosscheck",
        "sqrt",
        "tc",
        "lista",
        "li",
        "track",
        "test_should_return_7_when_given_n_is_15",
        "pos1",
        "FI",
        "filter",
        "flags",
        "gen_primes",
        "sx",
        "bad_packages",
        "you",
        "rv",
        "stack",
        "end_c",
        "dic_1",
        "hour",
        "dis",
        "get_one",
        "isalnum",
        "SOUTH_EAST",
        "nume",
        "is_threatened",
        "s2_bigger",
        "game_map",
        "listim",
        "rows",
        "remove",
        "v3",
        "ddd",
        "rh",
        "ol",
        "find132pattern",
        "swaper",
        "fre",
        "rowList",
        "maxSoFar",
        "suffixsum",
        "fillvalue",
        "version_info",
        "MI",
        "rtrn",
        "inId",
        "num_cards",
        "acc",
        "divs",
        "print_board",
        "c3",
        "all1s",
        "zip",
        "ALL_MOVES",
        "piano",
        "max_to_i",
        "squareSum",
        "RW",
        "Ri",
        "s1sorted",
        "brackets",
        "allCombo",
        "thing",
        "case1",
        "newfunc",
        "adj",
        "chromosome_check",
        "items",
        "endu",
        "xor_solution",
        "setBit",
        "Box",
        "chr",
        "v",
        "amazon_check_mate",
        "sqsum",
        "ind_of_last_operation",
        "squared",
        "primes",
        "possible_cells",
        "shift_amt",
        "forw",
        "correct_string",
        "seen",
        "new_initial",
        "eq",
        "maxa",
        "polygonArea",
        "vaccine_list",
        "store_1",
        "lookup",
        "shpStr",
        "shape",
        "dataList",
        "Optional",
        "var",
        "zeros_in_even",
        "max_pow",
        "border",
        "bobScore",
        "right",
        "mem",
        "maxValue",
        "repeat",
        "factorial",
        "get_commons",
        "direct_relatives",
        "p2won",
        "exact",
        "sumOne",
        "left",
        "totalScore",
        "max_d",
        "score",
        "localSum",
        "union_find",
        "lstb",
        "get_minimal_size",
        "inp",
        "p2",
        "s1_arr",
        "localMin",
        "sperm",
        "curr_net",
        "INT",
        "suum",
        "convert",
        "rht",
        "max_m",
        "mid",
        "igcd",
        "Values",
        "miillerTest",
        "mark_knight",
        "ti",
        "b_i",
        "yo",
        "get_ggT",
        "sum_B",
        "__divmod__",
        "lw",
        "ny",
        "data",
        "SumA",
        "friend",
        "test",
        "upper_bound",
        "lem",
        "bumpCount",
        "rightsum",
        "p1_",
        "digit",
        "vis",
        "play",
        "ss2",
        "list4d",
        "len_a",
        "clear",
        "SUCCESS_MESSAGE",
        "other",
        "helper",
        "update_cells",
        "iteritems",
        "get_angle",
        "tmp_result",
        "dividend",
        "sol",
        "xpn",
        "countmax",
        "qty",
        "max_pay",
        "comp",
        "sp_num",
        "den",
        "remain",
        "calculate_array",
        "soldier_b",
        "mi",
        "suit",
        "hcfnaive",
        "s_l",
        "float64",
        "dx",
        "poly_derivative",
        "possible_rows",
        "nodes",
        "stli",
        "abs_tol",
        "solved",
        "curr_num",
        "process_task",
        "max_c",
        "theta",
        "cycles",
        "s1token",
        "pairs",
        "test_cases",
        "maxRightSum",
        "strr",
        "unique",
        "op",
        "bcount",
        "dec_volume",
        "TestCase",
        "TOME",
        "y_offset",
        "sqrtVal",
        "MAP",
        "blocked",
        "cache_clear",
        "a_sqr",
        "resalnum",
        "sum_arrays",
        "comparisons",
        "maxx",
        "ki",
        "list_sheep",
        "currlow",
        "max_rows",
        "njit",
        "ifbreaks",
        "lst2",
        "impart_force",
        "__add__",
        "points_L",
        "n2",
        "score_with_three",
        "freeQueen",
        "status",
        "year",
        "back",
        "s2_candidate",
        "mark_king",
        "a_idx",
        "akey",
        "main_lot",
        "gi",
        "coor",
        "mark",
        "MAX",
        "flag2",
        "outcome_type",
        "outputs",
        "it",
        "ne",
        "ncount",
        "sumOfBlockHeightsBefore",
        "bouncing_ball",
        "stalemate",
        "corA",
        "oplst",
        "amazon_pos",
        "step",
        "maxval",
        "open",
        "isalpha",
        "colposs",
        "min_subarray_sum",
        "blocks",
        "req",
        "inpt",
        "record",
        "seg3",
        "run",
        "iinput",
        "result_b",
        "tot",
        "count_blacks",
        "cmp2",
        "ssum",
        "maxdig",
        "arrays",
        "vector",
        "knows",
        "numerator",
        "char",
        "arrIN",
        "YES",
        "dirs",
        "find_score",
        "chunkCount",
        "mark_queen",
        "efib",
        "nab",
        "max1_count",
        "numbers_fibonacci",
        "__call__",
        "re",
        "S_res",
        "is_safe",
        "__rpow__",
        "rstrip",
        "s2_counter",
        "package",
        "is_diagonal",
        "d",
        "cumsum",
        "maxScore",
        "besti",
        "squaresA",
        "isSolved",
        "reshape",
        "english",
        "safe",
        "g1",
        "ind_of_max_payment",
        "n_sqrt",
        "out_dest",
        "bracket_buster",
        "idx",
        "suff",
        "assign_checkmates",
        "last_balance",
        "occurs",
        "sum_of_b",
        "high",
        "endtopow",
        "mat",
        "point",
        "max_of_stack"
    ],
    "integer": [
        "23",
        "31536000",
        "10000000",
        "10",
        "17",
        "1000010",
        "83",
        "94",
        "3",
        "225",
        "100000000000000",
        "20",
        "101",
        "1000000000000000",
        "3600",
        "360",
        "1339",
        "26",
        "1j",
        "29",
        "16",
        "128",
        "5",
        "365",
        "71",
        "1000",
        "1000000",
        "1000003",
        "4000",
        "22",
        "90",
        "21",
        "64",
        "1000000009",
        "12",
        "30",
        "11",
        "2",
        "43",
        "45",
        "998244353",
        "14",
        "15000",
        "135",
        "180",
        "1000001",
        "10001",
        "5958",
        "13",
        "65",
        "31624",
        "67",
        "10000",
        "100005",
        "1000000000000001",
        "41",
        "15023",
        "4",
        "92",
        "49",
        "73",
        "0x00",
        "1",
        "60",
        "47",
        "25",
        "99999999999",
        "223",
        "89",
        "37",
        "59",
        "53",
        "270",
        "86400",
        "100000",
        "315",
        "24",
        "6",
        "15",
        "9",
        "50",
        "79",
        "7",
        "98",
        "882",
        "100000000001",
        "1000005",
        "18",
        "7511",
        "1000000007",
        "9863",
        "97",
        "100000000",
        "50001",
        "0x01",
        "8",
        "650000",
        "19",
        "718",
        "61",
        "31",
        "0",
        "300",
        "100",
        "96"
    ],
    "string": [
        "'fractions'",
        "'upsilon'",
        "\"tau\"",
        "'debug mode'",
        "\"n\"",
        "f\"{cs}.\"",
        "''",
        "\",\"",
        "'{} dollar{}'",
        "\"AA\"",
        "'{} dollar{}{}'",
        "f\"{z} sheep...\"",
        "\"2/4\"",
        "\"\"\"Enumeration of movement directions.\n    \"\"\"",
        "\"\"\"The VectorMover moves from an origin location in a constant direction\n    and returns each GameSquare along the movement path. The mover stops a \n    GameSquare is occupied or there is no next neighbor in the direction.\n    \"\"\"",
        "\"123456789\"",
        "'{}/{}'",
        "r\"\\[(.*?)\\]\"",
        "'(^[^aeiou]+)(\\w*)'",
        "'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''",
        "'stuff'",
        "\"theta\"",
        "f'{c+1} sheep...'",
        "' days and '",
        "f\"[{ ''.join(c for c,n in Counter(s.lower()).items() if n&1) or ' ' }]\"",
        "f\"Player {1+(p1[0]+p2[0] in 'psrp')} won!\"",
        "'''\nCreated on\n\n@author: linhz\n'''",
        "\"D\"",
        "'p1rp2p'",
        "f'{i+1} sheep...'",
        "'4'",
        "'Green'",
        "\"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"",
        "f'{i}/{m}'",
        "'%d %s%s'",
        "\"\"\"Create the VectorMovers for the possible rook moves.\n    \n    Returns:\n        [list(VectorMover)] -- List of movers to execute rook moves.\n    \"\"\"",
        "'{} dollar and {} cents.'",
        "'dollars'",
        "f\"{winner.title()} wins: {survivors}\"",
        "\"{} {}\"",
        "\"r\"",
        "'-1'",
        "\"{} {}{}\"",
        "\"\"\"Return the number of positive odd numbers below n.\"\"\"",
        "'XX'",
        "'Green wins: {}'",
        "f\"Green wins: {' '.join(map(str, sorted(green, reverse=1)))}\"",
        "\"\"\"Convert chess locations (ex A1) to index for a gameboard.\n\n    Arguments:\n            pos_string {string} -- Chess notation location on the board.\n\n    Return:\n        (x,y) tuple to index the gameboard.\n    \"\"\"",
        "'I'",
        "'Player '",
        "\"K\"",
        "\"\"\"Return an (x,y) tuple offset for the direction. This method assumes\n        the cartesian grid lower left is 0,0 with positive x to the right and\n        positive y up.\n        \"\"\"",
        "\"The \"",
        "'pneumococcal'",
        "\"{} {} and {} {}.\"",
        "'preSchoolBooster'",
        "'Congratulations! You\\'re going to have a'",
        "'p1pp2s'",
        "\"9\"",
        "'epsilon'",
        "\"\"\"Update the game squares based on the force abilities of the\n        piece.\n\n        Arguments:\n            location {GameSquare} -- Position on the gameboard of the piece.\n\n        Returns a list of the updated game squares.\n        \"\"\"",
        "' minute and '",
        "f\"Congratulations! You\\'re going to have a {['daughter','son']['Y' in sperm]}.\"",
        "' hours and '",
        "f'''Congratulations! You're going to have a {k}.'''",
        "'B00+1 2 3 4 5 6 7 8 9 1011121314151617'",
        "'Y'",
        "'-'",
        "'.'",
        "'V4'",
        "\"{}/{}\"",
        "\"Congratulations! You\\'re going to have a {}.\"",
        "'S'",
        "\"\"\"\n         :type N: int\n         :rtype: int\n         \"\"\"",
        "'error '",
        "'way'",
        "f'{el} sheep...'",
        "\"{} dollar{}.\"",
        "\"{} cent.\"",
        "\"aeiouAEIOU\"",
        "' yeas, '",
        "\"\"\"Enapsulation of outcomes to which tracks results as named attributes\n    and can return the array expected by the kata.\n    \"\"\"",
        "\"Blue wins: \"",
        "'d'",
        "\"\"\"Initialize the neighbors in all directions to None.\n        \"\"\"",
        "\"\"\" Invariant: a < b \"\"\"",
        "'{} {}'",
        "\"VB V0 V0+\"",
        "\"\"\"Returns the sum of all even numbers in a Fibonacci sequence\n    up to the maximum value m (non-inclusive of m).\"\"\"",
        "\"1/3\"",
        "f\"{ch}{ch.upper()}\"",
        "'E'",
        "'00'",
        "'PKHT'",
        "\"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         a= 1, b=3, c= 2\n         \"\"\"",
        "\"Take a seat on the bench.\"",
        "'lambda'",
        "'ABCDEFGH'",
        "' days'",
        "f'{i} sheep...'",
        "\" wins: \"",
        "f\"Green wins: {' '.join(map(str, a))}\"",
        "'f'",
        "'0+'",
        "' day'",
        "'beta'",
        "'{} dollars.'",
        "'0'",
        "'offer fluVaccine'",
        "\"1+(0*)\"",
        "\"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"",
        "\"\"\"\nCreated on Sun Dec 22 22:04:23 2019\n\n@author: user\n\"\"\"",
        "\"No\"",
        "\"Last chunk \"",
        "\"\"\"    if p1 == p2:\n        return \"Draw!\"\n    elif p1[0].lower == \"s\" and p2[0].lower == \"p\":\n        return \"Player 1 won!\"\n    elif p1[0].lower == \"r\" and p2[0].lower == \"s\":\n        return \"Player 1 won!\"\n    elif p1[0].lower == \"p\" and p2[0].lower == \"r\":\n        return \"Player 1 won!\"\n    else:\n        return \"Player 2 won!\"\n\"\"\"",
        "'Yes'",
        "'N'",
        "f\"{n} sheep...\"",
        "\"B\"",
        "\"{} sheep...\"",
        "\", \"",
        "\"measlesMumpsRubella\"",
        "\"\"\"Initialize the gameboard with a num_rows x num_cols grid of \n        GameSquares.\n        \n        Arguments:\n            num_rows {int} -- Number of rows on the gameboard\n            num_cols {int} -- Number of columns on the gameboard\n        \"\"\"",
        "'W:/Competitive Programming/output.txt'",
        "\"12 weeks\"",
        "'fluVaccine'",
        "\"gamma\"",
        "f\"Congratulations! You're going to have a {'son' if 'Y' in sperm else 'daughter'}.\"",
        "f\"The {name.capitalize()}\"",
        "'Draw!'",
        "'''count = 0\n    for x in range(n):\n        if(x % 2 != 0):\n            count += 1'''",
        "'paperrock'",
        "f\"{i}/{n}\"",
        "\"delta\"",
        "\"\"\"\nCreated on Thu Dec 19 19:45:35 2019\n\n@author: user\n\"\"\"",
        "'{} cents.'",
        "\"Last chunk {}; Max is {} for digit {}\"",
        "'Car Dead'",
        "f'{counter} sheep...'",
        "\"\"\"Return the GameSquare at the specified row and column.\n\n        If row or col are out of bounds, an KeyError is raised.\n        \n        Arguments:\n            row {int} -- 0 based index of the row to return the square from.\n            col {int} -- 0 based index of the column to return the square from.\n\n        Return:\n            GameSquare at the specified index.\n        \"\"\"",
        "\"VectorMover: \"",
        "\"4\"",
        "\"rp\"",
        "\"\"\"Append the provided MovementDirections to the path.\n        \"\"\"",
        "' hour'",
        "'YX'",
        "'''\n        # Recursion + TopDown\n        rowlen=len(stones)\n        index=0\n        memo=[-1] * rowlen\n             \n        def helper(index,memo):\n            \n            if index >= rowlen:\n                return 0\n            elif memo[index] != -1:\n                return memo[index] \n            else:\n                answer=-float('inf')\n                answer=max(answer,stones[index] - helper(index+1,memo))\n                if index + 1 < rowlen:\n                    answer=max(answer,stones[index]+stones[index+1] - helper(index+2,memo))\n                \n                if index + 2 < rowlen:\n                    answer=max(answer,stones[index]+stones[index+1]+stones[index+2] - helper(index+3,memo))\n                \n                memo[index]=answer\n                return memo[index]      \n                \n        answer=helper(0,memo)\n        print(answer)\n        \n        if answer < 0:\n            return 'Bob'\n        elif answer > 0:\n            return 'Alice'\n        else:\n            return 'Tie'\n            \n        '''",
        "'h'",
        "\"Composite\"",
        "\"[^1-9]\"",
        "'scissorspaper'",
        "f\"{i+1} sheep...\"",
        "\"VB\"",
        "'Player %d won!'",
        "' year, '",
        "''' check if sign change '''",
        "'''\n        convert this into a sliding window problem\n        rephrase the problem:\n            find the max window of length k between cardPoints[n-k:n+k]\n        [1,2,3,4,5,6]\n        k = 2\n        4,5,0,1\n        \n            \n        '''",
        "'c'",
        "' year '",
        "f\"Blue wins: {' '.join(map(str, b))}\"",
        "'+'",
        "\"$0.00\"",
        "f'{x}/{y}'",
        "' second'",
        "\"{} dollar{} and {} cent{}.\"",
        "'16 weeks'",
        "'son'",
        "\"year\"",
        "\"plus-\"",
        "\":\"",
        "''' If all the element of that row is zero case\r\n    then nth element = nth element of its previous row *\r\n    ((max. power of x) - 4 - r - 2n ) '''",
        "'V16'",
        "'day'",
        "'hibMenC'",
        "'F'",
        "\"fiveInOne\"",
        "\"daughter\"",
        "'#'",
        "\"Congratulations! You're going to have a {0}.\"",
        "\"E\"",
        "\"\"\"\nNTC here\n\"\"\"",
        "'V2'",
        "\"T\"",
        "\"!\"",
        "' years and '",
        "'n'",
        "' sheep'",
        "\"Congratulations! You're going to have a {}\"",
        "\"0\"",
        "\"\"\"Simple grid rendering of the outcome to the output stream.\n\n        Arguments:\n            out_dest -- Output stream to render to.\n        \"\"\"",
        "\"up-to-date\"",
        "'{} sheep...'",
        "'y'",
        "'''\n  Problem : Id and Ship\n  Author @ Rakesh Kumar\n  cpp.rakesh@gmail.com\n  Date : 04/02/2021\n'''",
        "' years, and '",
        "\" sheep...\"",
        "'C'",
        "\"PKHT\"",
        "'DEBUG'",
        "\"sheep...\"",
        "\"rs\"",
        "\"%s cent%s\"",
        "'000000000000000000'",
        "'87654321'",
        "\"Last chunk %s; Max is %d for digit %s\"",
        "'VH'",
        "')\\]'",
        "f\"Congratulations! You're going to have a {gen}.\"",
        "' minute'",
        "\"Green and Blue died\"",
        "\"BB\"",
        "'K'",
        "'$'",
        "r'([PKHT])(\\d{2})'",
        "'V7'",
        "\"omega\"",
        "\"{} cent{}\"",
        "\"eta\"",
        "'%d/%d'",
        "\"rotavirus\"",
        "'Player {} won!'",
        "f\"Congratulations! You're going to have a {offspring}.\"",
        "'V'",
        "f\"{ds} and {cs}.\"",
        "f\"{name}{name[1:]}\"",
        "f'{n1}/{n2}'",
        "'rockscissors'",
        "'5'",
        "\"{} wins: {}\"",
        "' year, and '",
        "\"Congratulations! You're going to have a daughter.\"",
        "\"scissors\"",
        "'U'",
        "'b'",
        "f'{i  + 1} sheep...'",
        "'before'",
        "\"phi\"",
        "'V17'",
        "\"november\"",
        "'nu'",
        "\"1 2\"",
        "'-inf'",
        "'NO'",
        "'123456789'",
        "'Player 2 won!'",
        "\"(.{%s})(.?)(.{%s})\"",
        "'Blue'",
        "'[\\d\\W]'",
        "\"\\n\\nGameboard\\n\"",
        "\"\\[(.*?)\\]\"",
        "\"\\d\"",
        "'aeiou'",
        "', '",
        "'minute'",
        "'{} dollars and {} cents.'",
        "\"v\"",
        "f\"Blue wins: {' '.join(map(str, sorted(blue, reverse=1)))}\"",
        "\"-\"",
        "r'\\[(.*?)\\]'",
        "'0123456789'",
        "\"\"\"Return the penultimate element from a given list.\n    \n    args:\n        a: the input list\n    \"\"\"",
        "'.txt'",
        "f\"{i} sheep...\"",
        "' days, '",
        "\"upsilon\"",
        "'('",
        "\"\"\"Set the piece on the specified gamesquare.\n        \n        Arguments:\n            gamesquare {GameSquare} -- Location on the gameboard to place piece.\n        \"\"\"",
        "f'{num} sheep...'",
        "'s'",
        "\"{}{}{}\"",
        "'eta'",
        "\"P\"",
        "'{} dollar and {} cent.'",
        "'p1rp2s'",
        "'''\n    check = str(n)[min(i,j):max(i,j)+1]\n    \n    if str(d) in check:\n        return True\n    return False\n    '''",
        "\"s\"",
        "'k'",
        "\"YES\"",
        "\"\"",
        "'''memo = [0]*(n+1)\n        memo[0] = 0\n        \n        start = 0\n        for i in range(0, n):\n            memo[i+1] = memo[i] + cardPoints[i]            \n            if i-start + 1 == remove: \n                ans = max(ans, total-(memo[i+1]-memo[start]))\n                start = start+1'''",
        "\"\"\"This functions returns the number of positive odd numbers below 'n'.\"\"\"",
        "\"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"",
        "'cents'",
        "\"{0}/{1}\"",
        "\"\"\"\n         :type s: str\n         :type t: str\n         :rtype: str\n         \"\"\"",
        "\"\"\"Create the DestinationMovers for the possible knight moves.\n    \n    Returns:\n        [list(DesintationMover)] -- List of movers to execute knight moves.\n    \"\"\"",
        "\"sigma\"",
        "'p'",
        "'The '",
        "\"Player 2 won!\"",
        "\"pi\"",
        "f\"Congratulations! You're going to have a {gender}.\"",
        "'r'",
        "'V10'",
        "'p1sp2p'",
        "'3'",
        "'L'",
        "\"alpha\"",
        "'Take a seat on the bench.'",
        "'V1'",
        "'7'",
        "f\"Player {dic[p1[0] + p2[0]]} won!\"",
        "\" and \"",
        "\"\"\"\n         :type num: int\n         :rtype: int\n         \"\"\"",
        "' years, '",
        "\"{} cents.\"",
        "'omega'",
        "\"ODD\"",
        "f\"{k.upper()}{k}\"",
        "f\"{d} dollar\"",
        "\"{} cent{}.\"",
        "f'Congratulations! You\\'re going to have a {\"son\" if sperm == \"XY\" else \"daughter\"}.'",
        "'mu'",
        "'D'",
        "f\"Congratulations! You're going to have a {gender[sperm]}.\"",
        "'paperscissors'",
        "'KA$'",
        "\"minus\"",
        "\"\"\"Store the neighbor to the specified direction.\n\n        Side effects:\n        Neighbor status is also set in the reciprical direction of the\n        provided neighbor. If the neighbor is already set on that\n        direction, it is cleared.\n\n        If the provided neighbor is 'self' a \n        \n        Arguments:\n            neighbor {GameSquare} -- Neighboring game square to connect.\n            direction {MovementDirection} -- Direction to get neighbor in.\n        \"\"\"",
        "\"offer fluVaccine\"",
        "\"6\"",
        "\"H\"",
        "\"%d sheep...\"",
        "\"preSchoolBooster\"",
        "\"\\n\\nOutcomes\\n\"",
        "'X'",
        "f\"Congratulations! You\\'re going to have a {'son' if sperm[1] == 'Y' else 'daughter'}.\"",
        "\"\"\"Determine the status of the square from the square's condition and\n    the neighboring conditions. Update and return the outcome.\n    \n    Return the outcome type.\n\n    Arguments:\n        my_condition {GameSquareConditions} -- Condition of the square to evaluate\n        neighbor_conditions {list(GameSquareConditions)} -- Conditions of nieghbors\n        outcome {Outcomes} -- Cumulative outcome of the gameboard.\n    \"\"\"",
        "'november'",
        "' minutes and '",
        "f'{count} sheep...'",
        "\"5/8\"",
        "'Last chunk {}; Max is {} for digit {}'",
        "\"Gameboard initialized with number of rows < 1 ({})!\"",
        "\"C\"",
        "\"omicron\"",
        "'Congratulations! You\\'re going to have a %s.'",
        "\"Gameboard initialized with number of columns < 1 ({})!\"",
        "'A'",
        "f\"Congratulations! You're going to have a {sex}.\"",
        "'a daughter.'",
        "\"pneumococcal\"",
        "' year and  '",
        "f\"{num}/{den}\"",
        "\"o\"",
        "'the '",
        "\"X\"",
        "'''Large inputs are given because if you use a list comprehension iteration approach'''",
        "' hour, '",
        "'{} dollars and {} cent.'",
        "'pi'",
        "f\"Congratulations! You're going to have a {['daughter', 'son']['Y' in sperm]}.\"",
        "\"\"\"Follow the stored direction until there are no neighboring squares or\n        if a square is occupied.\n        \n        Arguments:\n            origin {GameSquare} -- Position on the gameboard to be move from.\n\n        Return:\n            List of squares moved along the path.\n        \"\"\"",
        "\"...\"",
        "\"No negative numbers are allowed!\"",
        "'g'",
        "\"V\"",
        "'T'",
        "r'\\$(\\d+)\\.'",
        "\"second\"",
        "\"aeiou\"",
        "'V14'",
        "'01'",
        "\"$\"",
        "f\"{ds}.\"",
        "'''\n\ta = [0] * n\n\n\tfor i in range(n):\n\n\t\tfor j in range(i, n, i+1):\n\n\t\t\tif (j+1) % 3 == 0:\n\t\t\t\tcontinue\n\n\t\t\ta[j] = 0 if a[j] else 1\n\n\tprint(a)\n\n\t'''",
        "'stdout'",
        "\"\"\"Property to return the inverse of is_threatened.\n        \"\"\"",
        "f'{i//d}/{m//d}'",
        "'paper'",
        "'V12'",
        "' minutes'",
        "f'{s}{prev}{(\"\", \"w\")[not prev]}ay'",
        "\"\"\"Create the VectorMovers for the possible bishop moves.\n    \n    Returns:\n        [list(VectorMover)] -- List of movers to execute bishop moves.\n    \"\"\"",
        "'minus'",
        "' day, '",
        "'V0'",
        "\"1\"",
        "'son.'",
        "\"\"\"Return a nice, printable representation of the GamePiece.\n        \"\"\"",
        "\"\"\"\n         :type board: List[List[int]]\n         :rtype: int\n         \"\"\"",
        "'B'",
        "'\\n'",
        "'abcdefghijklmnopqrstuvwxyz'",
        "'8'",
        "'V0+'",
        "' and '",
        "'a'",
        "\"beta\"",
        "'{} cent{}'",
        "f\"Congratulations! You\\'re going to have a daughter.\"",
        "'i'",
        "\" for digit \"",
        "'now'",
        "'*'",
        "'p1sp2r'",
        "\"\"\"Simple grid rendering to the output stream.\n\n        Arguments:\n            out_dest -- Output stream to render to.\n        \"\"\"",
        "\"{} dollar{}\"",
        "\"V{}\"",
        "\"12 months\"",
        "'Bob'",
        "'october'",
        "'YES'",
        "\"Player 1 won!\"",
        "'tau'",
        "'abcdefgh'",
        "'o'",
        "\"\"\"Gameboard comprised of rows and columns of GameSquares.\n    The origin of the gameboard is the \"lower-left\".\n    \"\"\"",
        "'Woohoo!'",
        "'scissorsscissors'",
        "'{} wins: {}'",
        "'year'",
        "\"Green wins: \"",
        "\"paper\"",
        "\"Car Dead\"",
        "\"daughter.\"",
        "\"Player {} won!\"",
        "' hour and '",
        "'xi'",
        "'1/'",
        "\"*\"",
        "'V11'",
        "'rock'",
        "\"Blue\"",
        "\"\"\"\n\ncreated by shuangquan.huang at 1/15/20\n\n\"\"\"",
        "'9'",
        "\"Blue wins: {0}\"",
        "'fiveInOne'",
        "\"hour\"",
        "\"\"\"Follow the stored movement path from the provided origin.\n        \n        Arguments:\n            origin {GameSquare} -- Position on the gameboard to be move from.\n\n        Return:\n            List of 1 item where the move terminated, or an empty list if the\n            movement path cannot be completed.\n        \"\"\"",
        "'BA'",
        "f'{x} sheep...'",
        "\"sp\"",
        "\"\"\"Gameplay conditions of a square.\n    \"\"\"",
        "'40 months'",
        "\"Draw!\"",
        "\"Congratulations! You\\'re going to have a daughter.\"",
        "\"ay\"",
        "' year and '",
        "\"Another neighbor is already in that direction!\"",
        "\"EVEN\"",
        "\"kappa\"",
        "'name'",
        "'{} dollar.'",
        "\"Unknown direction to recipricate!\"",
        "'6'",
        "\"Congratulations! You're going to have a {}.\"",
        "'rotavirus'",
        "'Probable Prime'",
        "\"Congratulations! You're going to have a \"",
        "f\"{j}/{i}\"",
        "\"XY\"",
        "'plus'",
        "'H'",
        "f'{j}/{i}'",
        "\"8 weeks\"",
        "'0 dollars'",
        "\"\"\"Return a nice, printable representation of the DestinationMover.\n        \"\"\"",
        "'12 weeks'",
        "'AB'",
        "\"september\"",
        "\"p\"",
        "'scissorsrock'",
        "'inf'",
        "'chi'",
        "\"1/2\"",
        "\"\"\"\n         :type s: str\n         :type numRows: int\n         :rtype: str\n         \"\"\"",
        "\"Green wins: {0}\"",
        "f\"{k}{k.upper()}\"",
        "r\"\\d{1,25}\"",
        "'alpha'",
        "'No'",
        "f\"Last chunk {last}; Max is {val[0]} for digit {-val[1]}\"",
        "' won!'",
        "r'\\[.*?\\]'",
        "'''Congratulations! You\\'re going to have a daughter.'''",
        "'error'",
        "'dollar'",
        "'after'",
        "'rho'",
        "'paperpaper'",
        "f'{message} son.'",
        "\"|\"",
        "\" \"",
        "'W'",
        "\"40 months\"",
        "f'{j//t}/{i//t}'",
        "\"no\"",
        "'_'",
        "\"\"\"Check if there is a neighboring square in the given direction.\n        \n        Arguments:\n            direction {MovementDirection} -- Direction to check.\n        \"\"\"",
        "\"0 dollars.\"",
        "\"%d/%d\"",
        "\"nu\"",
        "'gamma'",
        "\"Green\"",
        "\"rsp\"",
        "\"player 1 won!\"",
        "\"Input neighbor already has neighbor in opposite direction!\"",
        "\"+\"",
        "'V5'",
        "' -'",
        "' hours'",
        "'Green and Blue died'",
        "f\"Congratulations! You're going to have a {('daughter', 'son')['Y' in sperm]}.\"",
        "\"YX\"",
        "'%d sheep...'",
        "\"day\"",
        "\"h: %s : %s \"",
        "'V9'",
        "'V3'",
        "\"XX\"",
        "\"\"\" Determine if the sex of the offspring based on the X or Y chromosome present in the male's sperm. \"\"\"",
        "\"hibMenC\"",
        "\"\\n  \"",
        "r\"\\3\\2\\1\"",
        "\"\"\" This function returns True if the sum of the squares of each element in arr1 is strictly greater than the sum of the cubes of each element in arr2. \"\"\"",
        "\"{} dollars.\"",
        "\"F\"",
        "\"iota\"",
        "f\"{j}/{d}\"",
        "'Congratulations! You\\'re going to have a daughter.'",
        "'theta'",
        "'V15'",
        "'z'",
        "\"\"\"Return the neighboring game square in the direction. If no neighbor\n        has been set, None.\n        \n        Arguments:\n            direction {MovementDirection} -- Direction to get neighbor in.\n\n        Return:\n            GameSquare or None.\n        \"\"\"",
        "f\"Congratulations! You\\'re going to have a {'son' if sperm == 'XY' else 'daughter'}.\"",
        "\"pr\"",
        "\"G\"",
        "'september'",
        "' years and  '",
        "'-1\\n'",
        "'psi'",
        "'use input'",
        "'cent'",
        "\"Woohoo!\"",
        "\"\"\"\n    Return `true` if the sum of the squares of each element in `a` \n    is strictly greater than the sum of the cubes of each element in `b`.\n    \"\"\"",
        "\"\"\"Return a nice, printable representation of the VectorMover.\n        \"\"\"",
        "'yes'",
        "'Last chunk %s; Max is %d for digit %s'",
        "\"|\\n\"",
        "\"2\"",
        "f\"Congratulations! You're going to have a {'son' if sperm[1] == 'Y' else 'daughter'}.\"",
        "'|'",
        "r'(plus|minus)'",
        "'W:/Competitive Programming/input.txt'",
        "'GamePiece'",
        "f\"{c} cent\"",
        "\"Cannot set yourself as a neighbor!\"",
        "'rockrock'",
        "'Tie'",
        "r'\\[([\\w\\s\\'?!\\d\\-]+|\\[{1,}|'",
        "\"V0+\"",
        "\"A\"",
        "'EVEN'",
        "'scissors'",
        "\"1 sheep...\"",
        "\"{0} sheep...\"",
        "\"\"\"Simple grid rendering to the output stream. The board is rendered\n        with the \"top\" row on \"top\".\n\n        Arguments:\n            out_dest -- Output stream to render to.\n        \"\"\"",
        "'u'",
        "\"\r\"",
        "\"V0\"",
        "\"green\"",
        "\"/\"",
        "\"\"\"\n    :param height:\n    :type width: object\n    \"\"\"",
        "'12 months'",
        "\"lambda\"",
        "'O'",
        "'sheep...'",
        "\"minute\"",
        "'daughter.'",
        "\"; Max is \"",
        "'aeiouAEIOU'",
        "\"{0}\\n{1}\"",
        "\"son\"",
        "f'{numerator // gcd}/{denominator // gcd}'",
        "\"Congratulations! You're going to have a %s.\"",
        "f'Congratulations! You\\'re going to have a {kid}.'",
        "'second'",
        "f\"{x} sheep...\"",
        "'.5'",
        "'delta'",
        "'1'",
        "'8 weeks'",
        "'l'",
        "f'{x+1} sheep...'",
        "\"Congratulations! You\\'re going to have a son.\"",
        "\"1/\"",
        "\"meningitisB\"",
        "f'{message} daughter.'",
        "'List must contain at least two elements'",
        "'''Congratulations! You\\'re going to have a son.'''",
        "' seconds'",
        "'V8'",
        "\"psi\"",
        "'V6'",
        "\"the \"",
        "' hours, '",
        "'zeta'",
        "\"rho\"",
        "'use output'",
        "r'\\.(\\d+)'",
        "f'{i}/{denominator}'",
        "\"age\"",
        "'XY'",
        "'{} cent.'",
        "'\\g<2>\\g<1>ay'",
        "'@'",
        "''' \u0628\u0650\u0633\u0652\u0645\u0650 \u0627\u0644\u0644\u064e\u0651\u0647\u0650 \u0627\u0644\u0631\u064e\u0651\u062d\u0652\u0645\u064e\u0670\u0646\u0650 \u0627\u0644\u0631\u064e\u0651\u062d\u0650\u064a\u0645\u0650 '''",
        "'rockpaper'",
        "' sheep...'",
        "'phi'",
        "\"%i sheep...\"",
        "'''(string)-> string\n    A string representation of the road will be the input.\n    Tests will be made to ensure that there are less than 15\n    bumps in the road.'''",
        "\"\"\"Initialize the path to move to.\n\n        Arguments:\n            *args {MovementDirection} -- Path to move along.\n        \"\"\"",
        "'No negative numbers are allowed!'",
        "\"\u25a1\"",
        "'m'",
        "'VB'",
        "\"Player %s won!\"",
        "\"?\"",
        "\"\"\"Square on the gameboard.\n    \"\"\"",
        "'e'",
        "f\"Congratulations! You\\'re going to have a son.\"",
        "\"v: %s : %s \"",
        "'hour'",
        "\"Congratulations! You're going to have \"",
        "'Congratulations! You\\'re going to have a {}.'",
        "f\"Congratulations! You\\'re going to have a {gender[sperm]}.\"",
        "'1/2'",
        "\"#\"",
        "'age'",
        "\"now\"",
        "'Composite'",
        "\"\"\"Initialize situational count members to 0.\n        \"\"\"",
        "'omicron'",
        "\"plus\"",
        "f\"{ch.upper()}{ch}\"",
        "'P'",
        "\"Wye Ask Wye, Ask Bud Drye\"",
        "\"loop \"",
        "'up-to-date'",
        "\"{} dollar.\"",
        "' '",
        "'sigma'",
        "'measlesMumpsRubella'",
        "'iota'",
        "'''while(n>=1):\n            if(n%2==1):\n                c=c+1\n            n=n//2'''",
        "'ODD'",
        "\"chi\"",
        "\"yes\"",
        "\"\"\"Apply the movement to the provided X, Y cartesian coordinates.\n        \n        Arguments:\n            x {int} -- Starting X cartesian coordinate to move from.\n            y {int} -- Starting Y cartesian coordinate to move from.\n\n        Returns:\n            Tuple (x,y) cartesian coordinates resulting from the move.\n        \"\"\"",
        "f'Congratulations! You\\'re going to have a {res}.'",
        "\"name\"",
        "\"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \n         if len(nums) < 3:\n             return False\n \n         stack = [[nums[0], nums[0]]]\n         minimum = nums[0]\n         for num in nums[1:]:\n             if num <= minimum:\n                 minimum = num\n             else:\n                 while stack and num > stack[-1][0]:\n                     if num < stack[-1][1]:\n                         return True\n                     else:\n                         stack.pop()\n                 stack.append([minimum, num])\n \n         return False\n         \"\"\"",
        "\"error\"",
        "'V13'",
        "\"1 3 2\"",
        "'input'",
        "\"epsilon\"",
        "\"\"\"Return a list of all conditions for neighboring squares.\n        \"\"\"",
        "f\"Player {(p2[0] + p1[0] in 'rspr') + 1} won!\"",
        "'G'",
        "'Congratulations! You\\'re going to have a son.'",
        "\"\"\"Return the array ordered as expected by the kata definition.\n        \n        Returns:\n            array -- integer array of counts of squares by chess condition.\n        \"\"\"",
        "\"NO\"",
        "\"october\"",
        "\"rspr\"",
        "'0 dollars.'",
        "f\"{winner} wins: {survivors}\"",
        "\"\"\"\n    Look at the top of the range: if it is odd then add 1, if even leave alone.\n\nLook at the bottom of the range: if it is odd then subtract 1, if even leave alone.\n\nTake the difference between the new even top and bottom; then divide by two.\n\nSo for the range [1,100] you get 100\u221202=50 odd integers.\n\"\"\"",
        "'in.txt'",
        "'; Max is %d for digit '",
        "'Blue wins: {}'",
        "\"\u2588\"",
        "'ay'",
        "' day and '",
        "'{} {}{}'",
        "'p1pp2r'",
        "\"\"\" Get information which player won! In case of a draw return Draw! \"\"\"",
        "'w'",
        "'Last chunk '",
        "' years'",
        "'CWaoro hDoeoa!d'",
        "'nnnnnnnnnnnnnnnn'",
        "'no'",
        "' year'",
        "'2'",
        "\"%s dollar%s\"",
        "'Player 1 won!'",
        "\"re\"",
        "\"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \n         If is increasing then it is chunkable.\n         It if decreases then no.\n         \n         We start with one chunk (the whole array)\n         \"\"\"",
        "'Congratulations! You\\'re going to have a '",
        "f\"Congratulations! You\\'re going to have a {'son' if 'Y' in x else 'daughter'}.\"",
        "f\"{a}{b}\"",
        "f\"Congratulations! You're going to have a {'son' if s[-1] == 'Y' else 'daughter'}.\"",
        "\"Y\"",
        "'meningitisB'",
        "'a son.'",
        "\"rock\"",
        "\"16 weeks\"",
        "\"\\n\"",
        "\"Congratulations! You're going to have a son.\"",
        "\"ps\"",
        "'Alice'",
        "\"xi\"",
        "\".\"",
        "\"\"\"The DestinationMover attempts to move along a path to reach\n    a GameSquare. Only the final destination is returned.\n    \"\"\"",
        "\"{}{}{}.\"",
        "\"5/6\"",
        "\"blue\"",
        "\"mu\"",
        "\"son.\"",
        "f\"Player {res} won!\"",
        "\"\"\"Return the opposite direction.\n        \"\"\"",
        "'kappa'",
        "\"%s/%s\"",
        "\"DestinationMover: \"",
        "f'Player {a} won!'",
        "\"player 2 won!\"",
        "\"Yes\"",
        "\"x\"",
        "\"N\"",
        "'daughter'",
        "'srp'",
        "\"sr\"",
        "'...'",
        "\"Probable Prime\"",
        "'''for i in range(len(mat)):\n        if mat[i]==idle:\n            for j in range(len(mat[i])):\n                mat[i][j] = mat[i-1][j]*(mpow+4-(i+1)-2*(j+1))'''",
        "f'Congratulations! You\\'re going to have a {sex}.'",
        "\"zeta\"",
        "\"p1{}p2{}\"",
        "'/'",
        "\"_\""
    ],
    "float": [
        "45.0",
        "4.0",
        "0.90",
        "10e-5",
        ".5",
        "0.98",
        "0.96",
        "1.0",
        "0.8",
        "2.0",
        "0.92",
        "1e9",
        "1e10",
        "3.",
        "0.0",
        "0.02",
        "0.5",
        "2.",
        "1e-9",
        "0.94"
    ],
    "module_identifier": [
        "log",
        "cmath",
        "bisect_left",
        "Sequence",
        "lru_cache",
        "abs",
        "count",
        "copy",
        "Tuple",
        "ascii",
        "copysign",
        "functools",
        "fmod",
        "heappop",
        "merge",
        "accumulate",
        "scipy...misc",
        "hex",
        "isclose",
        "PriorityQueue",
        "inf",
        "BytesIO",
        "angle",
        "stdout",
        "numba",
        "random",
        "enum",
        "zip",
        "IOBase",
        "xrange",
        "decimal",
        "takewhile",
        "numpy...linalg",
        "copyreg",
        "atexit",
        "insort",
        "collections",
        "defaultdict",
        "math",
        "comb",
        "njit",
        "insort_right",
        "heappush",
        "insort_left",
        "time",
        "Fraction",
        "deepcopy",
        "bisect_right",
        "Queue",
        "xor",
        "rect",
        "stdin",
        "mode",
        "randrange",
        "product",
        "ascii_uppercase",
        "Optional",
        "deque",
        "queue",
        "zeta",
        "permutations",
        "Decimal",
        "fractions",
        "repeat",
        "builtins",
        "factorial",
        "bisect",
        "gcd",
        "os",
        "List",
        "numpy",
        "datetime",
        "namedtuple",
        "scipy...spatial",
        "subn",
        "cmp_to_key",
        "mean",
        "chain",
        "statistics",
        "combinations",
        "islice",
        "nsmallest",
        "scipy...special",
        "fabs",
        "cycle",
        "operator",
        "pi",
        "gmpy2",
        "ceil",
        "mypc",
        "floor",
        "map",
        "sys",
        "OrderedDict",
        "re",
        "findall",
        "matrix_power",
        "Counter",
        "unittest",
        "sin",
        "heapify",
        "sub",
        "hypot",
        "typing",
        "cos",
        "radians",
        "log2",
        "compress",
        "sqrt",
        "binom",
        "starmap",
        "string",
        "heapq",
        "zetac",
        "itertools",
        "oct",
        "reduce",
        "io",
        "filter",
        "itemgetter",
        "log10",
        "groupby",
        "future_builtins",
        "textwrap",
        "ConvexHull",
        "zip_longest",
        "exp"
    ]
}